/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    use super::root;

    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage, Align> {
        storage: Storage,
        align: [Align; 0],
    }
    impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
        #[inline]
        pub const fn new(storage: Storage) -> Self {
            Self { storage, align: [] }
        }
    }
    impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                *byte |= mask;
            } else {
                *byte &= !mask;
            }
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
    }

    #[repr(C)]
    #[derive(Default)]
    pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
    impl<T> __IncompleteArrayField<T> {
        #[inline]
        pub const fn new() -> Self {
            __IncompleteArrayField(::core::marker::PhantomData, [])
        }
        #[inline]
        pub fn as_ptr(&self) -> *const T {
            self as *const _ as *const T
        }
        #[inline]
        pub fn as_mut_ptr(&mut self) -> *mut T {
            self as *mut _ as *mut T
        }
        #[inline]
        pub unsafe fn as_slice(&self, len: usize) -> &[T] {
            ::core::slice::from_raw_parts(self.as_ptr(), len)
        }
        #[inline]
        pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
            ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
        }
    }
    impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
        fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            fmt.write_str("__IncompleteArrayField")
        }
    }
    #[repr(C)]
    pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
    impl<T> __BindgenUnionField<T> {
        #[inline]
        pub const fn new() -> Self {
            __BindgenUnionField(::core::marker::PhantomData)
        }
        #[inline]
        pub unsafe fn as_ref(&self) -> &T {
            ::core::mem::transmute(self)
        }
        #[inline]
        pub unsafe fn as_mut(&mut self) -> &mut T {
            ::core::mem::transmute(self)
        }
    }
    impl<T> ::core::default::Default for __BindgenUnionField<T> {
        #[inline]
        fn default() -> Self {
            Self::new()
        }
    }
    impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
        #[inline]
        fn clone(&self) -> Self {
            Self::new()
        }
    }
    impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
    impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
        fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            fmt.write_str("__BindgenUnionField")
        }
    }
    impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
        fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
    }
    impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
        fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
            true
        }
    }
    impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}

    pub mod app {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod SoundModule {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct enSEType {
                pub _address: u8,
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BattleObjectModuleAccessor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventLassoHang {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AreaContactLog {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterRidleyLinkEventMotion {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventCapturePulled {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DamageInfo {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DamageNoReactionMode {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BattleObjectSlow {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventPipe {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CameraStatus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterManager {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct stWaterAreaInfo {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventDrumCheckNeedHide {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventCaptureItem {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventCatch {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WeaponRobotHominglaserLinkEventBurst {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterInformation {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventPos {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LuaScriptStatusFuncID {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct KineticEnergyNormal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPikminLinkEventWeaponPikminSetInt {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct OnCalcParamEvent {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventTornadoEscape {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MaterialAnimeKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GroundTouchFlag {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WeaponShizueFishingrodLinkEventShoot {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Rhombus2 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct VisibilityMode {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ShieldStatus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPikminLinkEventWeaponPikminOnFlag {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventCaptureDriver {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GroundCollisionLineHandle {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ArticleOperationTarget {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventPos {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEvent {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ShieldFront {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WeaponRobotHominglaserLinkEventSearch {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterRyuLinkEventFinalMoveTarget {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BossManager {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventSpring {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AttackHeight {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventMask {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventThrow {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterKineticEnergyGravity {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemParamAccessor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventTornadoMoveInfo {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventBarrel {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventStarShot {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemSpecializedParamFloat {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventCaptureFishingrodDamage {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterEntryID {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AttackSetOffKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterSpiritsSupportSkill {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterInklingLinkEventPaint {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct StageManager {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterKineticEnergyMotion {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventDrumRelease {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventLadder {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AttackData {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventDrumPos {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventDrumShake {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventDrumCheckNeedLock {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemSize {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterBayonettaFinalModule {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CutInTransactor {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterRyuLinkEventFinalDeadDamage {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemCommonParamFloat {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GroundCollisionLine {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterAvailableFinal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Weapon {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Article {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPikminLinkEventWeaponPikminSyncPos {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPitBFinalModule {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct QuickItemTreatType {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Item {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemSpecializedParamInt {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WeaponSnakeMissileKineticEnergyNormal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SituationKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventYoshiTamagoDamageEffect {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LuaScriptLineID {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GroundCorrectKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPokemonLinkEventChange {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BattleObjectWorld {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventSlashEscape {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AttackAbsoluteData {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MotionNodeRotateCompose {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventWarp {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEvent {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemStatusParamFloat {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct HitStatus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct HitStopMulTarget {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPikminLinkEventWeaponPikminSetPowerMulStatus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CutInType {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CutInData {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct StopOtherKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WeaponShizueFishingrodLinkEventCliff {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemStatusParamInt {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MODEL_COLOR_TYPE {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventFinal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemAiType {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct CutInPriority {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ShadowDrawFlag {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventNotify {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct KineticEnergyRotNormal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventPresenter {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BattleObjectManager {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WeaponShizueFishingrodLinkEventReel {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AttackDirectionAxis {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct SpecialPaintKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemPickupSearchMode {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterCutInManager {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WeaponSnakeNikitaMissileKineticEnergyNormal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MotionNodeRotateOrder {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPikminLinkEventWeaponPikminConstraint {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Circle {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPikminLinkEventWeaponPikminChangeStatus {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkAttribute {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemManager {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WorkKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterParamAccessor2 {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventCaptureMimikkyu {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct MaterialAnimeLoopFlag {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WeaponKineticEnergyGravity {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EffectScreenBlendType {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct DamageLog {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventDrumEscape {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventTornadoShootInfo {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterKineticEnergyController {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPikminLinkEventWeaponPikminSetFloat {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GimmickEventSlashLockInfo {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterCloudLinkEventFinal {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPikminLinkEventWeaponPikminChangeMotion {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemSlopeType {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct KineticEnergy {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemStatusParamBool {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterPikminLinkEventWeaponPikminSyncLR {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GroundTouchID {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct EffectScreenLayer {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct BossCommonParamInt {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct AttackerAttribute {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemCommonParamInt {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventCapture {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemManagerItemKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct WeaponShizueFishingrodLinkEventCut {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct FighterEntry {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ItemKineticFlag {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct ShieldType {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct GroundCliffCheckKind {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct enStatusBGMType {
            pub _address: u8,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct LinkEventTouchItem {
            pub _address: u8,
        }
        pub mod FL_sv_module_access {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "\u{1}_ZN3app19FL_sv_module_access5slopeEP9lua_State"]
                pub fn slope(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app19FL_sv_module_access7captureEP9lua_State"]
                pub fn capture(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app19FL_sv_module_access4linkEP9lua_State"]
                pub fn link(arg1: u64);
            }
        }
        pub mod lua_bind {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub mod MotionAnimcmdModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43MotionAnimcmdModule__exec_motion_lines_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn exec_motion_lines(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52MotionAnimcmdModule__change_script_motion_lines_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Efbbfb"]
                    pub fn change_script_motion_lines(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: bool,
                        arg5: bool,
                        arg6: f32,
                        arg7: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind60MotionAnimcmdModule__change_script_motion_partial_lines_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Efbfb"]
                    pub fn change_script_motion_partial_lines(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: bool,
                        arg5: f32,
                        arg6: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44MotionAnimcmdModule__call_script_single_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40Ei"]
                    pub fn call_script_single(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58MotionAnimcmdModule__change_script_motion_line_single_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40Ei"]
                    pub fn change_script_motion_line_single(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54MotionAnimcmdModule__exec_motion_lines_initialize_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn exec_motion_lines_initialize(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46MotionAnimcmdModule__flush_current_motion_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn flush_current_motion(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31MotionAnimcmdModule__flush_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn flush(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35MotionAnimcmdModule__set_sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_sleep(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40MotionAnimcmdModule__set_sleep_game_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_sleep_game(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42MotionAnimcmdModule__set_sleep_effect_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_sleep_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41MotionAnimcmdModule__set_sleep_sound_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_sleep_sound(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34MotionAnimcmdModule__is_sleep_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_sleep(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50MotionAnimcmdModule__enable_skip_delay_update_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn enable_skip_delay_update(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod LinkEventLassoHang {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkEventLassoHang__load_from_l2c_table_implEPNS_18LinkEventLassoHangERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventLassoHang,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkEventLassoHang__store_l2c_table_implEPKNS_18LinkEventLassoHangE"]
                    pub fn store_l2c_table(arg1: *const root::app::LinkEventLassoHang)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkEventLassoHang__store_l2c_table_implEPKNS_18LinkEventLassoHangERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventLassoHang,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod TurnModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25TurnModule__set_turn_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Efbbb"]
                    pub fn set_turn(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: bool,
                        arg5: bool,
                        arg6: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25TurnModule__end_turn_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn end_turn(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24TurnModule__is_turn_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_turn(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32TurnModule__is_turn_after90_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_turn_after90(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26TurnModule__is_extern_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_extern(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38TurnModule__set_omit_intermediate_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_omit_intermediate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27TurnModule__ry_reverse_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn ry_reverse(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod AreaContactLog {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40AreaContactLog__load_from_l2c_table_implEPNS_14AreaContactLogERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::AreaContactLog,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AreaContactLog__store_l2c_table_implEPKNS_14AreaContactLogE"]
                    pub fn store_l2c_table(arg1: *const root::app::AreaContactLog) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AreaContactLog__store_l2c_table_implEPKNS_14AreaContactLogERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::AreaContactLog,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterRidleyLinkEventMotion {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54FighterRidleyLinkEventMotion__load_from_l2c_table_implEPNS_28FighterRidleyLinkEventMotionERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterRidleyLinkEventMotion,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterRidleyLinkEventMotion__store_l2c_table_implEPKNS_28FighterRidleyLinkEventMotionE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterRidleyLinkEventMotion,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterRidleyLinkEventMotion__store_l2c_table_implEPKNS_28FighterRidleyLinkEventMotionERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterRidleyLinkEventMotion,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod LinkEventCapturePulled {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48LinkEventCapturePulled__load_from_l2c_table_implEPNS_22LinkEventCapturePulledERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventCapturePulled,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkEventCapturePulled__store_l2c_table_implEPKNS_22LinkEventCapturePulledE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::LinkEventCapturePulled,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkEventCapturePulled__store_l2c_table_implEPKNS_22LinkEventCapturePulledERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventCapturePulled,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod ControlModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__get_stick_angle_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_stick_angle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ControlModule__get_stick_dir_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_stick_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ControlModule__is_stick_side_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_stick_side(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__get_sub_stick_dir_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_sub_stick_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__is_sub_stickSide_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_sub_stickSide(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__is_enable_flick_jump_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_enable_flick_jump(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ControlModule__start_clatter_implEPNS_26BattleObjectModuleAccessorEfffaibb"]
                    pub fn start_clatter(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: f32,
                        arg5: libc::c_schar,
                        arg6: libc::c_int,
                        arg7: bool,
                        arg8: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ControlModule__set_dec_time_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_dec_time(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ControlModule__set_dec_time_recovery_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_dec_time_recovery(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__set_clatter_time_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_clatter_time(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__add_clatter_time_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn add_clatter_time(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__get_clatter_time_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_clatter_time(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__set_clatter_stop_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_clatter_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__is_clatter_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_clatter_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45ControlModule__start_clatter_motion_rate_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn start_clatter_motion_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ControlModule__end_clatter_motion_rate_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn end_clatter_motion_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ControlModule__end_clatter_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn end_clatter(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__is_input_clatter_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_input_clatter(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ControlModule__set_clatter_shake_scale_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_clatter_shake_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ControlModule__reset_button_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_button(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ControlModule__reset_trigger_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_trigger(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__reset_trigger_2_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn reset_trigger_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ControlModule__reset_main_stick_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_main_stick_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__set_main_stick_x_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_main_stick_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ControlModule__reset_main_stick_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_main_stick_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__set_main_stick_y_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_main_stick_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__reset_main_stick_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_main_stick(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__reset_sub_stick_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_sub_stick_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__reset_sub_stick_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_sub_stick_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__reset_sub_stick_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_sub_stick(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ControlModule__reset_flick_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_flick_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ControlModule__reset_flick_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_flick_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__reset_flick_sub_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_flick_sub_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__reset_flick_sub_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_flick_sub_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ControlModule__get_stick_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_stick_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__get_stick_prev_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_stick_prev_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ControlModule__get_stick_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_stick_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__get_stick_prev_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_stick_prev_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ControlModule__get_flick_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__get_flick_x_dir_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_x_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ControlModule__get_flick_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__get_flick_y_dir_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_y_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__get_flick_no_reset_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_no_reset_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__get_flick_no_reset_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_no_reset_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__get_flick_after_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_after_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ControlModule__get_flick_after_x_dir_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_after_x_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__get_flick_after_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_after_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__get_flick_sub_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_sub_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ControlModule__get_flick_sub_x_dir_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_sub_x_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__get_flick_sub_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_sub_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ControlModule__get_flick_sub_y_dir_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_sub_y_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__get_sub_stick_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_sub_stick_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__get_sub_stick_prev_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_sub_stick_prev_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__get_sub_stick_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_sub_stick_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__get_sub_stick_prev_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_sub_stick_prev_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ControlModule__get_trigger_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_trigger(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__get_trigger_count_implEPNS_26BattleObjectModuleAccessorEh"]
                    pub fn get_trigger_count(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ControlModule__get_trigger_count_prev_implEPNS_26BattleObjectModuleAccessorEh"]
                    pub fn get_trigger_count_prev(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ControlModule__get_button_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_button(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__get_button_prev_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_button_prev(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ControlModule__get_release_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_release(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__check_button_trigger_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn check_button_trigger(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__check_button_release_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn check_button_release(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__check_button_on_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn check_button_on(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__check_button_off_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn check_button_off(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ControlModule__check_button_on_trriger_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn check_button_on_trriger(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ControlModule__check_button_on_release_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn check_button_on_release(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ControlModule__set_off_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_off(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__set_stick_reverse_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_stick_reverse(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__is_stick_reversed_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_stick_reversed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ControlModule__get_clatter_threshold_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_clatter_threshold(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ControlModule__set_rumble_hit_data_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eibji"]
                    pub fn set_rumble_hit_data(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                        arg4: bool,
                        arg5: libc::c_uint,
                        arg6: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ControlModule__clear_rumble_hit_data_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_rumble_hit_data(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ControlModule__request_rumble_hit_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn request_rumble_hit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ControlModule__set_rumble_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eibj"]
                    pub fn set_rumble(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                        arg4: bool,
                        arg5: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ControlModule__set_rumble_all_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eij"]
                    pub fn set_rumble_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                        arg4: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__stop_rumble_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ej"]
                    pub fn stop_rumble_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ControlModule__stop_rumble_id_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn stop_rumble_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ControlModule__stop_rumble_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn stop_rumble(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__stop_rumble_all_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ej"]
                    pub fn stop_rumble_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ControlModule__set_reverse_x_frame_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_reverse_x_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26ControlModule__get_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_lr(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__get_flick_bonus_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_bonus(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ControlModule__get_flick_bonus_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_flick_bonus_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__reset_flick_bonus_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_flick_bonus(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__reset_flick_bonus_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_flick_bonus_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__get_stick_x_no_clamp_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_stick_x_no_clamp(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__get_stick_y_no_clamp_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_stick_y_no_clamp(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ControlModule__get_pad_flag_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_pad_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ControlModule__get_command_flag_cat_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_command_flag_cat(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ControlModule__clear_command_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn clear_command(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__clear_command_one_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn clear_command_one(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__get_command_life_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_command_life(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46ControlModule__get_command_life_count_max_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_command_life_count_max(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ControlModule__set_command_life_extend_implEPNS_26BattleObjectModuleAccessorEh"]
                    pub fn set_command_life_extend(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__is_clear_command_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_clear_command(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ControlModule__exec_command_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn exec_command(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ControlModule__set_back_command_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_back_command(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ControlModule__reset_turn_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_turn_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ControlModule__get_attack_hi3_fb_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_attack_hi3_fb_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ControlModule__get_attack_lw3_fb_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_attack_lw3_fb_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ControlModule__get_attack_air_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_attack_air_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ControlModule__reset_attack_air_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_attack_air_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ControlModule__set_attack_air_kind_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_attack_air_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ControlModule__get_attack_air_stick_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_attack_air_stick_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ControlModule__get_attack_air_stick_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_attack_air_stick_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ControlModule__get_attack_air_stick_dir_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_attack_air_stick_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ControlModule__get_down_stand_fb_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_down_stand_fb_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ControlModule__reset_down_stand_fb_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_down_stand_fb_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ControlModule__set_down_stand_fb_kind_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_down_stand_fb_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ControlModule__item_light_throw_fb_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn item_light_throw_fb_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45ControlModule__item_light_throw_fb4_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn item_light_throw_fb4_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48ControlModule__item_light_throw_air_fb_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn item_light_throw_air_fb_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ControlModule__item_light_throw_air_fb4_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn item_light_throw_air_fb4_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ControlModule__item_heavy_throw_fb_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn item_heavy_throw_fb_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ControlModule__special_s_turn_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn special_s_turn(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ControlModule__is_jump_mini_button_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_jump_mini_button(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ControlModule__set_add_jump_mini_button_life_implEPNS_26BattleObjectModuleAccessorEa"]
                    pub fn set_add_jump_mini_button_life(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_schar,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ControlModule__set_log_active_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_log_active(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ControlModule__is_remake_command_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_remake_command(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ControlModule__get_reserve_turn_lr_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_reserve_turn_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ControlModule__delete_reserve_turn_lr_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn delete_reserve_turn_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ControlModule__set_special_command_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_special_command(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ControlModule__reset_special_command_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn reset_special_command(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ControlModule__reverse_special_command_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reverse_special_command(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ControlModule__get_special_command_lr_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_special_command_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ControlModule__reverse_x_frame_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reverse_x_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51ControlModule__set_special_command_life_extend_implEPNS_26BattleObjectModuleAccessorEa"]
                    pub fn set_special_command_life_extend(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_schar,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57ControlModule__set_special_command_life_count_extend_implEPNS_26BattleObjectModuleAccessorEh"]
                    pub fn set_special_command_life_count_extend(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                    );
                }
            }
            pub mod DamageModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24DamageModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30DamageModule__init_damage_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn init_damage(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35DamageModule__set_force_damage_implEPNS_26BattleObjectModuleAccessorEjRKN3phx8Vector3fEiibbbb"]
                    pub fn set_force_damage(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: *const root::phx::Vector3f,
                        arg4: libc::c_int,
                        arg5: libc::c_int,
                        arg6: bool,
                        arg7: bool,
                        arg8: bool,
                        arg9: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29DamageModule__add_damage_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn add_damage(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25DamageModule__damage_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn damage(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27DamageModule__reaction_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn reaction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28DamageModule__power_max_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn power_max(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36DamageModule__check_no_reaction_implEPNS_26BattleObjectModuleAccessorERKNS_10DamageInfoE"]
                    pub fn check_no_reaction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::app::DamageInfo,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46DamageModule__set_no_reaction_mode_status_implEPNS_26BattleObjectModuleAccessorENS_20DamageNoReactionModeEffi"]
                    pub fn set_no_reaction_mode_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::DamageNoReactionMode,
                        arg3: f32,
                        arg4: f32,
                        arg5: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48DamageModule__reset_no_reaction_mode_status_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_no_reaction_mode_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47DamageModule__set_no_reaction_damage_power_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_no_reaction_damage_power(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44DamageModule__set_no_reaction_no_effect_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_reaction_no_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46DamageModule__is_no_reaction_mode_perfect_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_no_reaction_mode_perfect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29DamageModule__damage_log_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn damage_log(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36DamageModule__set_attacker_info_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn set_attacker_info(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33DamageModule__is_capture_cut_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn is_capture_cut(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44DamageModule__set_ignore_capture_cut_no_implEPNS_26BattleObjectModuleAccessorEa"]
                    pub fn set_ignore_capture_cut_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_schar,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33DamageModule__set_damage_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_damage_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37DamageModule__set_damage_mul_2nd_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_damage_mul_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39DamageModule__set_force_damage_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_force_damage_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35DamageModule__set_reaction_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_reaction_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39DamageModule__set_reaction_mul_2nd_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_reaction_mul_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39DamageModule__set_reaction_mul_4th_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_reaction_mul_4th(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33DamageModule__set_weak_param_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ef"]
                    pub fn set_weak_param(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34DamageModule__set_damage_lock_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_damage_lock(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38DamageModule__set_damage_lock_2nd_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_damage_lock_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33DamageModule__is_damage_lock_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_damage_lock(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23DamageModule__heal_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn heal(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47DamageModule__overwrite_log_reaction_frame_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn overwrite_log_reaction_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40DamageModule__start_damage_info_log_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn start_damage_info_log(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38DamageModule__end_damage_info_log_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn end_damage_info_log(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52DamageModule__set_force_damage_from_last_damage_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn set_force_damage_from_last_damage(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30DamageModule__is_paralyze_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_paralyze(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35DamageModule__set_critical_hit_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_critical_hit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34DamageModule__is_critical_hit_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_critical_hit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
            }
            pub mod FighterWorkModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38FighterWorkModuleImpl__calc_param_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn calc_param(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55FighterWorkModuleImpl__calc_escape_air_slide_param_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn calc_escape_air_slide_param(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> u64;
                }
            }
            pub mod BattleObjectSlow {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27BattleObjectSlow__rate_implEPNS_16BattleObjectSlowE"]
                    pub fn rate(arg1: *mut root::app::BattleObjectSlow) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34BattleObjectSlow__is_estimate_implEPNS_16BattleObjectSlowE"]
                    pub fn is_estimate(arg1: *mut root::app::BattleObjectSlow) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32BattleObjectSlow__is_adjust_implEPNS_16BattleObjectSlowE"]
                    pub fn is_adjust(arg1: *mut root::app::BattleObjectSlow) -> bool;
                }
            }
            pub mod GimmickEventPipe {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42GimmickEventPipe__load_from_l2c_table_implEPNS_16GimmickEventPipeERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventPipe,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38GimmickEventPipe__store_l2c_table_implEPKNS_16GimmickEventPipeE"]
                    pub fn store_l2c_table(arg1: *const root::app::GimmickEventPipe) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38GimmickEventPipe__store_l2c_table_implEPKNS_16GimmickEventPipeERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventPipe,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod LuaModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27LuaModule__enable_line_implEPNS_26BattleObjectModuleAccessorENS_15LuaScriptLineIDE"]
                    pub fn enable_line(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::LuaScriptLineID,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28LuaModule__disable_line_implEPNS_26BattleObjectModuleAccessorENS_15LuaScriptLineIDE"]
                    pub fn disable_line(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::LuaScriptLineID,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29LuaModule__is_valid_line_implEPNS_26BattleObjectModuleAccessorENS_15LuaScriptLineIDE"]
                    pub fn is_valid_line(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::LuaScriptLineID,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32LuaModule__get_execute_line_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_execute_line(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41LuaModule__reserve_status_data_array_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn reserve_status_data_array(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27LuaModule__enable_func_implEPNS_26BattleObjectModuleAccessorENS_21LuaScriptStatusFuncIDE"]
                    pub fn enable_func(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::LuaScriptStatusFuncID,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28LuaModule__disable_func_implEPNS_26BattleObjectModuleAccessorENS_21LuaScriptStatusFuncIDE"]
                    pub fn disable_func(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::LuaScriptStatusFuncID,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29LuaModule__is_valid_func_implEPNS_26BattleObjectModuleAccessorENS_21LuaScriptStatusFuncIDE"]
                    pub fn is_valid_func(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::LuaScriptStatusFuncID,
                    ) -> bool;
                }
            }
            pub mod LinkEventCaptureDriver {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48LinkEventCaptureDriver__load_from_l2c_table_implEPNS_22LinkEventCaptureDriverERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventCaptureDriver,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkEventCaptureDriver__store_l2c_table_implEPKNS_22LinkEventCaptureDriverE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::LinkEventCaptureDriver,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkEventCaptureDriver__store_l2c_table_implEPKNS_22LinkEventCaptureDriverERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventCaptureDriver,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod EffectModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22EffectModule__req_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS3_8Vector3fES7_fjibi"]
                    pub fn req(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::phx::Vector3f,
                        arg4: *const root::phx::Vector3f,
                        arg5: f32,
                        arg6: libc::c_uint,
                        arg7: libc::c_int,
                        arg8: bool,
                        arg9: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25EffectModule__req_2d_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS3_8Vector3fES7_fj"]
                    pub fn req_2d(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::phx::Vector3f,
                        arg4: *const root::phx::Vector3f,
                        arg5: f32,
                        arg6: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31EffectModule__req_on_joint_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_RKNS3_8Vector3fES7_fS7_S7_bjii"]
                    pub fn req_on_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                        arg4: *const root::phx::Vector3f,
                        arg5: *const root::phx::Vector3f,
                        arg6: f32,
                        arg7: *const root::phx::Vector3f,
                        arg8: *const root::phx::Vector3f,
                        arg9: bool,
                        arg10: libc::c_uint,
                        arg11: libc::c_int,
                        arg12: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36EffectModule__req_attach_ground_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS_25GroundCollisionLineHandleERKNS3_8Vector3fESA_fSA_ji"]
                    pub fn req_attach_ground(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::app::GroundCollisionLineHandle,
                        arg4: *const root::phx::Vector3f,
                        arg5: *const root::phx::Vector3f,
                        arg6: f32,
                        arg7: *const root::phx::Vector3f,
                        arg8: libc::c_uint,
                        arg9: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29EffectModule__req_follow_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_RKNS3_8Vector3fES7_fbjiiiibb"]
                    pub fn req_follow(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                        arg4: *const root::phx::Vector3f,
                        arg5: *const root::phx::Vector3f,
                        arg6: f32,
                        arg7: bool,
                        arg8: libc::c_uint,
                        arg9: libc::c_int,
                        arg10: libc::c_int,
                        arg11: libc::c_int,
                        arg12: libc::c_int,
                        arg13: bool,
                        arg14: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32EffectModule__req_continual_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_fji"]
                    pub fn req_continual(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                        arg4: f32,
                        arg5: libc::c_uint,
                        arg6: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35EffectModule__remove_continual_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn remove_continual(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39EffectModule__remove_all_continual_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn remove_all_continual(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27EffectModule__req_time_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40EiRKNS3_8Vector3fES7_fjbb"]
                    pub fn req_time(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                        arg4: *const root::phx::Vector3f,
                        arg5: *const root::phx::Vector3f,
                        arg6: f32,
                        arg7: libc::c_uint,
                        arg8: bool,
                        arg9: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34EffectModule__req_time_follow_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_iRKNS3_8Vector3fES7_fbj"]
                    pub fn req_time_follow(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                        arg4: libc::c_int,
                        arg5: *const root::phx::Vector3f,
                        arg6: *const root::phx::Vector3f,
                        arg7: f32,
                        arg8: bool,
                        arg9: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30EffectModule__remove_time_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn remove_time(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34EffectModule__remove_all_time_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn remove_all_time(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27EffectModule__req_emit_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ej"]
                    pub fn req_emit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25EffectModule__remove_implEPNS_26BattleObjectModuleAccessorEjj"]
                    pub fn remove(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29EffectModule__remove_all_implEPNS_26BattleObjectModuleAccessorEjj"]
                    pub fn remove_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23EffectModule__kill_implEPNS_26BattleObjectModuleAccessorEjbb"]
                    pub fn kill(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28EffectModule__kill_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ebb"]
                    pub fn kill_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32EffectModule__kill_joint_id_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ebb"]
                    pub fn kill_joint_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27EffectModule__kill_all_implEPNS_26BattleObjectModuleAccessorEjbb"]
                    pub fn kill_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29EffectModule__detach_all_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn detach_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30EffectModule__detach_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ei"]
                    pub fn detach_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25EffectModule__detach_implEPNS_26BattleObjectModuleAccessorEji"]
                    pub fn detach(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27EffectModule__end_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ei"]
                    pub fn end_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34EffectModule__req_after_image_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_S4_S4_jRKNS3_8Vector3fES7_jS4_S4_S7_S7_fhhfiii"]
                    pub fn req_after_image(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                        arg4: root::phx::Hash40,
                        arg5: root::phx::Hash40,
                        arg6: libc::c_uint,
                        arg7: *const root::phx::Vector3f,
                        arg8: *const root::phx::Vector3f,
                        arg9: libc::c_uint,
                        arg10: root::phx::Hash40,
                        arg11: root::phx::Hash40,
                        arg12: *const root::phx::Vector3f,
                        arg13: *const root::phx::Vector3f,
                        arg14: f32,
                        arg15: libc::c_uchar,
                        arg16: libc::c_uchar,
                        arg17: f32,
                        arg18: libc::c_int,
                        arg19: libc::c_int,
                        arg20: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44EffectModule__req_after_image_no_parent_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_jRKNS3_8Vector3fES7_jS4_S4_S7_S7_fhhfiii"]
                    pub fn req_after_image_no_parent(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                        arg4: libc::c_uint,
                        arg5: *const root::phx::Vector3f,
                        arg6: *const root::phx::Vector3f,
                        arg7: libc::c_uint,
                        arg8: root::phx::Hash40,
                        arg9: root::phx::Hash40,
                        arg10: *const root::phx::Vector3f,
                        arg11: *const root::phx::Vector3f,
                        arg12: f32,
                        arg13: libc::c_uchar,
                        arg14: libc::c_uchar,
                        arg15: f32,
                        arg16: libc::c_int,
                        arg17: libc::c_int,
                        arg18: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40EffectModule__clear_all_after_image_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn clear_all_after_image(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37EffectModule__remove_after_image_implEPNS_26BattleObjectModuleAccessorEjj"]
                    pub fn remove_after_image(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41EffectModule__remove_all_after_image_implEPNS_26BattleObjectModuleAccessorEjj"]
                    pub fn remove_all_after_image(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35EffectModule__get_local_matrix_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_local_matrix(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26EffectModule__set_pos_implEPNS_26BattleObjectModuleAccessorEjRKN3phx8Vector3fE"]
                    pub fn set_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26EffectModule__set_rot_implEPNS_26BattleObjectModuleAccessorEjRKN3phx8Vector3fE"]
                    pub fn set_rot(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28EffectModule__set_scale_implEPNS_26BattleObjectModuleAccessorEjRKN3phx8Vector3fE"]
                    pub fn set_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34EffectModule__is_exist_effect_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn is_exist_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30EffectModule__set_visible_implEPNS_26BattleObjectModuleAccessorEjb"]
                    pub fn set_visible(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35EffectModule__set_visible_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eb"]
                    pub fn set_visible_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28EffectModule__set_whole_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_whole(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27EffectModule__is_whole_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_whole(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33EffectModule__set_whole_attr_implEPNS_26BattleObjectModuleAccessorEbj"]
                    pub fn set_whole_attr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30EffectModule__fill_screen_implEPNS_26BattleObjectModuleAccessorEiiRKN3phx8Vector4fENS_21EffectScreenBlendTypeENS_17EffectScreenLayerEh"]
                    pub fn fill_screen(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: *const root::phx::Vector4f,
                        arg5: root::app::EffectScreenBlendType,
                        arg6: root::app::EffectScreenLayer,
                        arg7: libc::c_uchar,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32EffectModule__fill_screen_2_implEPNS_26BattleObjectModuleAccessorEiiRKN3phx8Vector4fES6_ffNS_17EffectScreenLayerEh"]
                    pub fn fill_screen_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: *const root::phx::Vector4f,
                        arg5: *const root::phx::Vector4f,
                        arg6: f32,
                        arg7: f32,
                        arg8: root::app::EffectScreenLayer,
                        arg9: libc::c_uchar,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35EffectModule__color_collection_implEPNS_26BattleObjectModuleAccessorEiiRKN3phx8Vector4fES6_fffffNS_21EffectScreenBlendTypeEh"]
                    pub fn color_collection(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: *const root::phx::Vector4f,
                        arg5: *const root::phx::Vector4f,
                        arg6: f32,
                        arg7: f32,
                        arg8: f32,
                        arg9: f32,
                        arg10: f32,
                        arg11: root::app::EffectScreenBlendType,
                        arg12: libc::c_uchar,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31EffectModule__clear_screen_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn clear_screen(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31EffectModule__reset_screen_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn reset_screen(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40EffectModule__get_dead_effect_rot_z_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEfb"]
                    pub fn get_dead_effect_rot_z(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: f32,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40EffectModule__get_dead_effect_scale_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEfb"]
                    pub fn get_dead_effect_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: f32,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39EffectModule__is_dead_effect_slant_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEf"]
                    pub fn is_dead_effect_slant(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: f32,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29EffectModule__req_common_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ef"]
                    pub fn req_common(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32EffectModule__remove_common_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn remove_common(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31EffectModule__reset_common_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_common(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32EffectModule__is_end_common_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_end_common(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34EffectModule__is_exist_common_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn is_exist_common(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29EffectModule__req_screen_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ebbb"]
                    pub fn req_screen(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                        arg4: bool,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36EffectModule__req_screen_system_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ebb"]
                    pub fn req_screen_system(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32EffectModule__remove_screen_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ei"]
                    pub fn remove_screen(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38EffectModule__set_sync_visibility_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_sync_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37EffectModule__is_sync_visibility_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_sync_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33EffectModule__set_sync_scale_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_sync_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32EffectModule__is_sync_scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_sync_scale(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44EffectModule__get_variation_effect_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ei"]
                    pub fn get_variation_effect_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26EffectModule__set_rgb_implEPNS_26BattleObjectModuleAccessorEjfff"]
                    pub fn set_rgb(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: f32,
                        arg4: f32,
                        arg5: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39EffectModule__set_rgb_partial_last_implEPNS_26BattleObjectModuleAccessorEfff"]
                    pub fn set_rgb_partial_last(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28EffectModule__set_alpha_implEPNS_26BattleObjectModuleAccessorEjf"]
                    pub fn set_alpha(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28EffectModule__set_frame_implEPNS_26BattleObjectModuleAccessorEjf"]
                    pub fn set_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32EffectModule__set_billboard_implEPNS_26BattleObjectModuleAccessorEjb"]
                    pub fn set_billboard(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27EffectModule__set_rate_implEPNS_26BattleObjectModuleAccessorEjf"]
                    pub fn set_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32EffectModule__set_rate_last_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_rate_last(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33EffectModule__set_scale_last_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_scale_last(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33EffectModule__set_alpha_last_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_alpha_last(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42EffectModule__set_disable_system_slow_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_disable_system_slow(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36EffectModule__set_slow_rate_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_slow_rate_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44EffectModule__set_slow_rate_no_stop_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_slow_rate_no_stop_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30EffectModule__set_add_vel_implEPNS_26BattleObjectModuleAccessorEjRN3phx8Vector3fE"]
                    pub fn set_add_vel(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: *mut root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41EffectModule__set_material_anim_last_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_material_anim_last(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49EffectModule__set_disable_render_offset_last_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn set_disable_render_offset_last(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34EffectModule__get_last_handle_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_last_handle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42EffectModule__is_enable_ground_effect_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_enable_ground_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37EffectModule__kill_status_effect_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn kill_status_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35EffectModule__unsync_vis_whole_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn unsync_vis_whole(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34EffectModule__sync_visibility_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sync_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37EffectModule__set_offset_to_next_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_offset_to_next(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35EffectModule__make_offset_hash_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ei"]
                    pub fn make_offset_hash(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47EffectModule__preset_lifetime_rate_partial_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn preset_lifetime_rate_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41EffectModule__preset_curtail_emitter_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn preset_curtail_emitter(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35EffectModule__preset_limit_num_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn preset_limit_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44EffectModule__enable_sync_init_pos_last_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn enable_sync_init_pos_last(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39EffectModule__set_custom_uv_offset_implEPNS_26BattleObjectModuleAccessorEjRKN3phx8Vector2fEi"]
                    pub fn set_custom_uv_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: *const root::phx::Vector2f,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42EffectModule__remove_post_effect_line_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn remove_post_effect_line(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50EffectModule__request_post_effect_line_circle_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_NS3_8Vector2fENS3_8Vector3fEbff"]
                    pub fn request_post_effect_line_circle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                        arg4: root::phx::Vector2f,
                        arg5: root::phx::Vector3f,
                        arg6: bool,
                        arg7: f32,
                        arg8: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind53EffectModule__set_post_effect_line_circle_target_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ENS3_8Vector2fENS3_8Vector3fEb"]
                    pub fn set_post_effect_line_circle_target(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Vector2f,
                        arg4: root::phx::Vector3f,
                        arg5: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55EffectModule__request_post_effect_line_parallel_2d_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ENS3_8Vector2fES5_S5_S5_bff"]
                    pub fn request_post_effect_line_parallel_2d(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Vector2f,
                        arg4: root::phx::Vector2f,
                        arg5: root::phx::Vector2f,
                        arg6: root::phx::Vector2f,
                        arg7: bool,
                        arg8: f32,
                        arg9: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33EffectModule__enable_stencil_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn enable_stencil(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45EffectModule__force_update_common_effect_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn force_update_common_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod FighterPikminLinkEventWeaponPikminSyncPos {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind67FighterPikminLinkEventWeaponPikminSyncPos__load_from_l2c_table_implEPNS_41FighterPikminLinkEventWeaponPikminSyncPosERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterPikminLinkEventWeaponPikminSyncPos,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind63FighterPikminLinkEventWeaponPikminSyncPos__store_l2c_table_implEPKNS_41FighterPikminLinkEventWeaponPikminSyncPosE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminSyncPos,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind63FighterPikminLinkEventWeaponPikminSyncPos__store_l2c_table_implEPKNS_41FighterPikminLinkEventWeaponPikminSyncPosERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminSyncPos,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod CancelModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35CancelModule__is_enable_cancel_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_enable_cancel(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32CancelModule__enable_cancel_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn enable_cancel(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod FighterPikminLinkEventWeaponPikminChangeMotion {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind72FighterPikminLinkEventWeaponPikminChangeMotion__load_from_l2c_table_implEPNS_46FighterPikminLinkEventWeaponPikminChangeMotionERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterPikminLinkEventWeaponPikminChangeMotion,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind68FighterPikminLinkEventWeaponPikminChangeMotion__store_l2c_table_implEPKNS_46FighterPikminLinkEventWeaponPikminChangeMotionE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminChangeMotion,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind68FighterPikminLinkEventWeaponPikminChangeMotion__store_l2c_table_implEPKNS_46FighterPikminLinkEventWeaponPikminChangeMotionERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminChangeMotion,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventDrumCheckNeedLock {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55GimmickEventDrumCheckNeedLock__load_from_l2c_table_implEPNS_29GimmickEventDrumCheckNeedLockERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventDrumCheckNeedLock,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51GimmickEventDrumCheckNeedLock__store_l2c_table_implEPKNS_29GimmickEventDrumCheckNeedLockE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventDrumCheckNeedLock,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51GimmickEventDrumCheckNeedLock__store_l2c_table_implEPKNS_29GimmickEventDrumCheckNeedLockERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventDrumCheckNeedLock,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GroundModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31GroundModule__update_force_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_force(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31GroundModule__update_shape_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn update_shape(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30GroundModule__get_rhombus_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn get_rhombus(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33GroundModule__modify_rhombus_implEPNS_26BattleObjectModuleAccessorEfff"]
                    pub fn modify_rhombus(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34GroundModule__set_init_circle_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fEf"]
                    pub fn set_init_circle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__get_circle_radius_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_circle_radius(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31GroundModule__set_offset_x_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_offset_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31GroundModule__set_offset_y_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_offset_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31GroundModule__get_offset_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_offset_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31GroundModule__get_offset_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_offset_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__set_rhombus_offset_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fE"]
                    pub fn set_rhombus_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26GroundModule__correct_implEPNS_26BattleObjectModuleAccessorENS_17GroundCorrectKindE"]
                    pub fn correct(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::GroundCorrectKind,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30GroundModule__set_correct_implEPNS_26BattleObjectModuleAccessorENS_17GroundCorrectKindE"]
                    pub fn set_correct(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::GroundCorrectKind,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30GroundModule__get_correct_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_correct(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33GroundModule__set_collidable_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_collidable(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__set_passable_check_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_passable_check(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__is_passable_check_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_passable_check(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__set_cloud_through_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_cloud_through(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GroundModule__set_ignore_line_type1_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_ignore_line_type1(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34GroundModule__set_ignore_boss_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_ignore_boss(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42GroundModule__is_ignore_fighter_other_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_ignore_fighter_other(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GroundModule__set_ignore_fighter_other_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_ignore_fighter_other(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49GroundModule__is_ignore_fighter_other_wall_l_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_ignore_fighter_other_wall_l(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49GroundModule__is_ignore_fighter_other_wall_r_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_ignore_fighter_other_wall_r(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GroundModule__set_correct_ignore_slope_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_correct_ignore_slope(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34GroundModule__set_cliff_check_implEPNS_26BattleObjectModuleAccessorENS_20GroundCliffCheckKindE"]
                    pub fn set_cliff_check(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::GroundCliffCheckKind,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30GroundModule__cliff_check_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn cliff_check(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GroundModule__select_cliff_hangdata_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn select_cliff_hangdata(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34GroundModule__is_status_cliff_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_status_cliff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30GroundModule__correct_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn correct_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30GroundModule__entry_cliff_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn entry_cliff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32GroundModule__reentry_cliff_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reentry_cliff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34GroundModule__can_entry_cliff_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn can_entry_cliff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39GroundModule__can_entry_cliff_same_implEPNS_26BattleObjectModuleAccessorERN3phx8Vector2fE"]
                    pub fn can_entry_cliff_same(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44GroundModule__can_entry_cliff_hang_data_implEPNS_26BattleObjectModuleAccessorEjNS_20GroundCliffCheckKindE"]
                    pub fn can_entry_cliff_hang_data(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: root::app::GroundCliffCheckKind,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30GroundModule__leave_cliff_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn leave_cliff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33GroundModule__hang_cliff_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn hang_cliff_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__hang_cliff_pos_3f_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn hang_cliff_pos_3f(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GroundModule__hang_can_entry_cliff_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn hang_can_entry_cliff_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33GroundModule__hang_cliff_dir_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn hang_cliff_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GroundModule__hang_can_entry_cliff_dir_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn hang_can_entry_cliff_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GroundModule__get_cliff_movement_speed_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_cliff_movement_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42GroundModule__is_cliff_move_exception_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_cliff_move_exception(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__clear_cliff_point_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_cliff_point(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__set_test_coll_stop_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_test_coll_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44GroundModule__set_test_coll_stop_status_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_test_coll_stop_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48GroundModule__set_coll_stop_slidable_length_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_coll_stop_slidable_length(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38GroundModule__set_ignore_slide_up_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_ignore_slide_up(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29GroundModule__is_ottotto_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn is_ottotto(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32GroundModule__is_ottotto_lr_implEPNS_26BattleObjectModuleAccessorEff"]
                    pub fn is_ottotto_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GroundModule__is_myground_nearcliff_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn is_myground_nearcliff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32GroundModule__is_near_cliff_implEPNS_26BattleObjectModuleAccessorEff"]
                    pub fn is_near_cliff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31GroundModule__is_miss_foot_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_miss_foot(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33GroundModule__set_shape_flag_implEPNS_26BattleObjectModuleAccessorEtb"]
                    pub fn set_shape_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_ushort,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__set_shape_safe_pos_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fE"]
                    pub fn set_shape_safe_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__get_shape_safe_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_shape_safe_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__set_status_ground_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn set_status_ground(arg1: *mut root::app::BattleObjectModuleAccessor);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38GroundModule__set_init_shape_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn set_init_shape_kind(arg1: *mut root::app::BattleObjectModuleAccessor);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33GroundModule__get_shape_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_shape_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24GroundModule__set_z_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_z(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24GroundModule__get_z_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_z(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32GroundModule__attach_ground_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn attach_ground(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__set_attach_ground_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_attach_ground(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32GroundModule__is_attachable_implEPNS_26BattleObjectModuleAccessorENS_15GroundTouchFlagE"]
                    pub fn is_attachable(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::GroundTouchFlag,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25GroundModule__attach_implEPNS_26BattleObjectModuleAccessorENS_15GroundTouchFlagE"]
                    pub fn attach(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::GroundTouchFlag,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28GroundModule__is_attach_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_attach(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42GroundModule__get_line_movement_speed_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_line_movement_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25GroundModule__detach_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn detach(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23GroundModule__test_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn test(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35GroundModule__get_touch_normal_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_touch_normal(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__get_touch_normal_x_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_touch_normal_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__get_touch_normal_y_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_touch_normal_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52GroundModule__get_touch_normal_consider_gravity_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_touch_normal_consider_gravity(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54GroundModule__get_touch_normal_x_consider_gravity_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_touch_normal_x_consider_gravity(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54GroundModule__get_touch_normal_y_consider_gravity_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_touch_normal_y_consider_gravity(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57GroundModule__get_touch_normal_for_touch_attack_data_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_touch_normal_for_touch_attack_data(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__ground_touch_flag_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn ground_touch_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39GroundModule__ground_touch_flag_ex_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn ground_touch_flag_ex(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33GroundModule__get_touch_flag_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_touch_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GroundModule__get_touch_moment_flag_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_touch_moment_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42GroundModule__get_touch_material_type_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_touch_material_type(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32GroundModule__get_touch_pos_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_touch_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27GroundModule__is_touch_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn is_touch(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__get_touch_line_raw_implEPNS_26BattleObjectModuleAccessorENS_13GroundTouchIDE"]
                    pub fn get_touch_line_raw(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::GroundTouchID,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GroundModule__get_touch_wall_cliff_pos_implEPNS_26BattleObjectModuleAccessorEjRN3phx8Vector2fE"]
                    pub fn get_touch_wall_cliff_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: *mut root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38GroundModule__is_floor_touch_line_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn is_floor_touch_line(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__is_wall_touch_line_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn is_wall_touch_line(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__is_passable_ground_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_passable_ground(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__is_floor_vanishing_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_floor_vanishing(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38GroundModule__get_cliff_id_uint32_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_cliff_id_uint32(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29GroundModule__get_up_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_up_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31GroundModule__get_down_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_down_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31GroundModule__get_left_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_left_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32GroundModule__get_right_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_right_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33GroundModule__get_center_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_center_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29GroundModule__center_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn center_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28GroundModule__get_width_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_width(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42GroundModule__get_down_movement_speed_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_down_movement_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41GroundModule__check_down_correct_pos_implEPNS_26BattleObjectModuleAccessorEN3phx8Vector2fE"]
                    pub fn check_down_correct_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46GroundModule__get_latest_down_correct_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_latest_down_correct_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44GroundModule__get_down_correct_edge_pos_implEPNS_26BattleObjectModuleAccessorERN3phx8Vector2fERKS4_"]
                    pub fn get_down_correct_edge_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__get_down_friction_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_down_friction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GroundModule__get_distance_to_floor_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEfb"]
                    pub fn get_distance_to_floor(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: f32,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__is_still_on_floor_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn is_still_on_floor(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28GroundModule__ray_check_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_b"]
                    pub fn ray_check(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36GroundModule__ray_check_hit_pos_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_RS4_b"]
                    pub fn ray_check_hit_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *mut root::phx::Vector2f,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39GroundModule__ray_check_hit_normal_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_RS4_b"]
                    pub fn ray_check_hit_normal(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *mut root::phx::Vector2f,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GroundModule__ray_check_hit_pos_normal_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_RS4_S7_b"]
                    pub fn ray_check_hit_pos_normal(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *mut root::phx::Vector2f,
                        arg5: *mut root::phx::Vector2f,
                        arg6: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54GroundModule__ray_check_hit_pos_normal_no_culling_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_RS4_S7_b"]
                    pub fn ray_check_hit_pos_normal_no_culling(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *mut root::phx::Vector2f,
                        arg5: *mut root::phx::Vector2f,
                        arg6: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GroundModule__ray_check_hit_pos_target_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_RS4_jb"]
                    pub fn ray_check_hit_pos_target(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *mut root::phx::Vector2f,
                        arg5: libc::c_uint,
                        arg6: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__ray_check_get_line_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_b"]
                    pub fn ray_check_get_line(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48GroundModule__ray_check_get_line_no_culling_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_b"]
                    pub fn ray_check_get_line_no_culling(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45GroundModule__ray_check_get_line_hit_pos_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_RS4_b"]
                    pub fn ray_check_get_line_hit_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *mut root::phx::Vector2f,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind56GroundModule__ray_check_get_line_hit_pos_no_culling_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_RS4_b"]
                    pub fn ray_check_get_line_hit_pos_no_culling(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *mut root::phx::Vector2f,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48GroundModule__ray_check_get_line_target_any_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_jb"]
                    pub fn ray_check_get_line_target_any(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: libc::c_uint,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59GroundModule__ray_check_get_line_target_any_no_culling_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_jb"]
                    pub fn ray_check_get_line_target_any_no_culling(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: libc::c_uint,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48GroundModule__ray_check_get_line_ignore_any_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_j"]
                    pub fn ray_check_get_line_ignore_any(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59GroundModule__ray_check_get_line_ignore_any_no_culling_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_j"]
                    pub fn ray_check_get_line_ignore_any_no_culling(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind56GroundModule__ray_check_get_line_hit_pos_ignore_any_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_RS4_j"]
                    pub fn ray_check_get_line_hit_pos_ignore_any(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *mut root::phx::Vector2f,
                        arg5: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind67GroundModule__ray_check_get_line_hit_pos_ignore_any_no_culling_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_RS4_j"]
                    pub fn ray_check_get_line_hit_pos_ignore_any_no_culling(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *mut root::phx::Vector2f,
                        arg5: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__line_segment_check_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_S6_RS4_b"]
                    pub fn line_segment_check(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *const root::phx::Vector2f,
                        arg5: *mut root::phx::Vector2f,
                        arg6: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30GroundModule__test_ground_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn test_ground(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38GroundModule__set_ignore_friction_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_ignore_friction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34GroundModule__get_correct_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_correct_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GroundModule__get_correct_pos_local_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_correct_pos_local(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35GroundModule__set_update_shape_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_update_shape(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34GroundModule__is_attach_cliff_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_attach_cliff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29GroundModule__pass_floor_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn pass_floor(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35GroundModule__clear_pass_floor_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_pass_floor(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34GroundModule__set_auto_detach_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_auto_detach(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GroundModule__set_no_cliff_stop_energy_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_no_cliff_stop_energy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GroundModule__set_gr_collision_mode_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_gr_collision_mode(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind60GroundModule__set_shape_data_rhombus_modify_node_offset_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS3_8Vector3fE"]
                    pub fn set_shape_data_rhombus_modify_node_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41GroundModule__set_keep_distant_cliff_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_keep_distant_cliff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GroundModule__set_reverse_direction_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn set_reverse_direction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47GroundModule__set_rhombus_modify_air_lasso_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_rhombus_modify_air_lasso(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GroundModule__set_rhombus_modify_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_rhombus_modify(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
            }
            pub mod AbsorberModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26AbsorberModule__clean_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clean(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AbsorberModule__is_shield_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn is_shield(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29AbsorberModule__set_size_implEPNS_26BattleObjectModuleAccessorEifi"]
                    pub fn set_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AbsorberModule__set_status_implEPNS_26BattleObjectModuleAccessorEiNS_12ShieldStatusEi"]
                    pub fn set_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::ShieldStatus,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AbsorberModule__set_status_all_implEPNS_26BattleObjectModuleAccessorENS_12ShieldStatusEi"]
                    pub fn set_status_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ShieldStatus,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AbsorberModule__is_turn_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_turn(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29AbsorberModule__is_front_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_front(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27AbsorberModule__is_hop_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_hop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AbsorberModule__get_hop_angle_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_hop_angle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AbsorberModule__is_no_hop_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_no_hop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29AbsorberModule__set_turn_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_turn(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AbsorberModule__set_front_implEPNS_26BattleObjectModuleAccessorENS_11ShieldFrontEi"]
                    pub fn set_front(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ShieldFront,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AbsorberModule__set_hop_implEPNS_26BattleObjectModuleAccessorEbfi"]
                    pub fn set_hop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AbsorberModule__set_attack_mul_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_attack_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AbsorberModule__get_attack_mul_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_attack_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AbsorberModule__set_speed_mul_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_speed_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AbsorberModule__get_speed_mul_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_speed_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33AbsorberModule__set_life_mul_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_life_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33AbsorberModule__get_life_mul_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_life_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AbsorberModule__set_attack_limit_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_attack_limit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AbsorberModule__get_attack_limit_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_attack_limit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AbsorberModule__set_hit_stop_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_hit_stop_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33AbsorberModule__is_no_m_ball_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_no_m_ball(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AbsorberModule__get_part_size_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_part_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AbsorberModule__get_team_no_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_team_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AbsorberModule__set_no_team_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_team(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AbsorberModule__set_shield_type_implEPNS_26BattleObjectModuleAccessorENS_10ShieldTypeEii"]
                    pub fn set_shield_type(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ShieldType,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AbsorberModule__clear_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_all(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AbsorberModule__clear_all_2_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn clear_all_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AbsorberModule__get_center_pos_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_center_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27AbsorberModule__get_lr_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AbsorberModule__get_group_num_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_group_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AbsorberModule__get_pos_x_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_pos_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40AbsorberModule__set_target_property_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_target_property(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40AbsorberModule__set_target_category_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_target_category(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26AbsorberModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
            }
            pub mod LinkEventCaptureItem {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46LinkEventCaptureItem__load_from_l2c_table_implEPNS_20LinkEventCaptureItemERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventCaptureItem,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkEventCaptureItem__store_l2c_table_implEPKNS_20LinkEventCaptureItemE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::LinkEventCaptureItem,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkEventCaptureItem__store_l2c_table_implEPKNS_20LinkEventCaptureItemERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventCaptureItem,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod LinkEventCaptureFishingrodDamage {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58LinkEventCaptureFishingrodDamage__load_from_l2c_table_implEPNS_32LinkEventCaptureFishingrodDamageERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventCaptureFishingrodDamage,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54LinkEventCaptureFishingrodDamage__store_l2c_table_implEPKNS_32LinkEventCaptureFishingrodDamageE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::LinkEventCaptureFishingrodDamage,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54LinkEventCaptureFishingrodDamage__store_l2c_table_implEPKNS_32LinkEventCaptureFishingrodDamageERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventCaptureFishingrodDamage,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod AttackModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AttackModule__clear_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_all(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24AttackModule__clear_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn clear(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33AttackModule__sleep_partialy_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn sleep_partialy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29AttackModule__set_attack_implEPNS_26BattleObjectModuleAccessorEiiRKNS_10AttackDataE"]
                    pub fn set_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: *const root::app::AttackData,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AttackModule__set_attack_2_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_attack_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AttackModule__set_absolute_implEPNS_26BattleObjectModuleAccessorEiiRKNS_18AttackAbsoluteDataE"]
                    pub fn set_absolute(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: *const root::app::AttackAbsoluteData,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AttackModule__hit_absolute_implEPNS_26BattleObjectModuleAccessorEijRKN3phx8Vector3fEii"]
                    pub fn hit_absolute(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                        arg4: *const root::phx::Vector3f,
                        arg5: libc::c_int,
                        arg6: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__hit_absolute_joint_implEPNS_26BattleObjectModuleAccessorEijN3phx6Hash40Eii"]
                    pub fn hit_absolute_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                        arg4: root::phx::Hash40,
                        arg5: libc::c_int,
                        arg6: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AttackModule__set_absolute_lr_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_absolute_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AttackModule__set_whole_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_whole(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24AttackModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AttackModule__is_attack_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn is_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__set_invalid_invincible_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_invalid_invincible(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40AttackModule__is_invalid_invincible_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn is_invalid_invincible(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AttackModule__set_invalid_xlu_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_invalid_xlu(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33AttackModule__is_invalid_xlu_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn is_invalid_xlu(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29AttackModule__is_hit_abs_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_hit_abs(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AttackModule__set_power_implEPNS_26BattleObjectModuleAccessorEifb"]
                    pub fn set_power(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AttackModule__add_power_implEPNS_26BattleObjectModuleAccessorEifb"]
                    pub fn add_power(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29AttackModule__set_vector_implEPNS_26BattleObjectModuleAccessorEiib"]
                    pub fn set_vector(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23AttackModule__size_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27AttackModule__set_size_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38AttackModule__set_target_category_implEPNS_26BattleObjectModuleAccessorEij"]
                    pub fn set_target_category(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AttackModule__off_target_kind_implEPNS_26BattleObjectModuleAccessorEij"]
                    pub fn off_target_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29AttackModule__set_offset_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fE"]
                    pub fn set_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AttackModule__set_offset2_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fE"]
                    pub fn set_offset2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AttackModule__get_offset2_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn get_offset2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27AttackModule__set_node_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40E"]
                    pub fn set_node(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__set_serial_hit_frame_implEPNS_26BattleObjectModuleAccessorEij"]
                    pub fn set_serial_hit_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AttackModule__get_power_implEPNS_26BattleObjectModuleAccessorEibfb"]
                    pub fn get_power(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: f32,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24AttackModule__group_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AttackModule__reaction_effect_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn reaction_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38AttackModule__set_reaction_effect_implEPNS_26BattleObjectModuleAccessorEiib"]
                    pub fn set_reaction_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AttackModule__reaction_fix_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn reaction_fix(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__set_reaction_fix_implEPNS_26BattleObjectModuleAccessorEiib"]
                    pub fn set_reaction_fix(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AttackModule__reaction_add_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn reaction_add(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__set_reaction_add_implEPNS_26BattleObjectModuleAccessorEiib"]
                    pub fn set_reaction_add(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AttackModule__reaction_mul_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reaction_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AttackModule__set_pos_x_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_pos_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24AttackModule__pos_x_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn pos_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26AttackModule__pos_x_2_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn pos_x_2(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24AttackModule__pos_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn pos_y(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29AttackModule__center_pos_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn center_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26AttackModule__speed_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn speed_x(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24AttackModule__speed_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn speed(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AttackModule__set_speed_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fE"]
                    pub fn set_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AttackModule__attack_data_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn attack_data(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__set_power_mul_status_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_mul_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__power_mul_status_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn power_mul_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__set_power_add_status_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_add_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__power_add_status_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn power_add_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__set_power_speed_status_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_speed_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__power_speed_status_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn power_speed_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40AttackModule__set_power_speed_limit_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_speed_limit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__power_speed_limit_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn power_speed_limit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackModule__set_power_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AttackModule__power_mul_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn power_mul(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__set_power_mul_2nd_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_mul_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackModule__power_mul_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn power_mul_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__set_power_mul_3rd_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_mul_3rd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackModule__power_mul_3rd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn power_mul_3rd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__set_power_mul_4th_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_mul_4th(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackModule__power_mul_4th_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn power_mul_4th(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__set_power_mul_5th_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_mul_5th(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackModule__power_mul_5th_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn power_mul_5th(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45AttackModule__set_customize_attack_ratio_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_customize_attack_ratio(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__customize_attack_ratio_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn customize_attack_ratio(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__set_reaction_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_reaction_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__set_reaction_mul_2nd_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_reaction_mul_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__reaction_mul_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reaction_mul_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__set_reaction_mul_3rd_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_reaction_mul_3rd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__reaction_mul_3rd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reaction_mul_3rd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__set_reaction_mul_4th_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_reaction_mul_4th(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__reaction_mul_4th_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reaction_mul_4th(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42AttackModule__set_damage_reaction_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_damage_reaction_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42AttackModule__get_damage_reaction_mul_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_damage_reaction_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__set_shield_stiff_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_shield_stiff_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__shield_stiff_mul_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn shield_stiff_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__set_ignore_just_shield_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_ignore_just_shield(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25AttackModule__get_lr_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn get_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AttackModule__part_size_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn part_size(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackModule__ref_log_group_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn ref_log_group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__un_ref_log_group_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn un_ref_log_group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AttackModule__get_inflict_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_inflict(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackModule__is_infliction_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn is_infliction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__get_inflict_status_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_inflict_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__is_infliction_status_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn is_infliction_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__set_indirect_info_implEPNS_26BattleObjectModuleAccessorEjibb"]
                    pub fn set_indirect_info(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: libc::c_int,
                        arg4: bool,
                        arg5: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__indirect_object_id_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn indirect_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__indirect_team_no_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn indirect_team_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AttackModule__set_restrict_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_restrict(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38AttackModule__set_no_attacker_log_implEPNS_26BattleObjectModuleAccessorEibb"]
                    pub fn set_no_attacker_log(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33AttackModule__set_catch_only_implEPNS_26BattleObjectModuleAccessorEibb"]
                    pub fn set_catch_only(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__set_catch_only_all_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn set_catch_only_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__set_attack_keep_rumble_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_attack_keep_rumble(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AttackModule__get_power_up_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_power_up(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AttackModule__set_power_up_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_up(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__get_power_up_attr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_power_up_attr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__set_power_up_attr_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_up_attr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__get_attacker_attribute_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_attacker_attribute(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__set_attacker_attribute_implEPNS_26BattleObjectModuleAccessorENS_17AttackerAttributeE"]
                    pub fn set_attacker_attribute(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::AttackerAttribute,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42AttackModule__get_power_apply_defense_implEPNS_26BattleObjectModuleAccessorEffRKS1_"]
                    pub fn get_power_apply_defense(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: *const root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__attack_part_speed_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn attack_part_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__attack_reference_pos_implEPNS_26BattleObjectModuleAccessorERN3phx8Vector3fE"]
                    pub fn attack_reference_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__attack_direction_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn attack_direction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48AttackModule__set_attack_reference_joint_id_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ENS_19AttackDirectionAxisES5_S5_"]
                    pub fn set_attack_reference_joint_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::app::AttackDirectionAxis,
                        arg4: root::app::AttackDirectionAxis,
                        arg5: root::app::AttackDirectionAxis,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AttackModule__set_overlap_hit_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_overlap_hit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AttackModule__set_no_team_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_team(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AttackModule__disable_tip_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn disable_tip(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27AttackModule__relocate_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fE"]
                    pub fn relocate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27AttackModule__set_lerp_implEPNS_26BattleObjectModuleAccessorEiii"]
                    pub fn set_lerp(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29AttackModule__clear_lerp_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn clear_lerp(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33AttackModule__set_lerp_ratio_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_lerp_ratio(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47AttackModule__set_attack_power_mul_pattern_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_attack_power_mul_pattern(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47AttackModule__get_attack_power_mul_pattern_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_attack_power_mul_pattern(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45AttackModule__set_attack_power_mul_scale_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_attack_power_mul_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45AttackModule__get_attack_power_mul_scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_attack_power_mul_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__set_lr_check_default_implEPNS_26BattleObjectModuleAccessorEh"]
                    pub fn set_lr_check_default(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__lr_check_default_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn lr_check_default(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__set_lr_check_front_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_lr_check_front(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__set_lr_check_back_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_lr_check_back(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40AttackModule__set_lr_check_front_lr_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_lr_check_front_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52AttackModule__set_disable_power_add_status_zero_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_disable_power_add_status_zero(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38AttackModule__reset_status_attack_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn reset_status_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__damage_shake_scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn damage_shake_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__set_damage_shake_scale_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_damage_shake_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackModule__set_latest_no_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_latest_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38AttackModule__set_latest_absolute_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_latest_absolute(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__set_reflect_attack_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_reflect_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__is_power_up_reaction_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_power_up_reaction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40AttackModule__set_power_up_reaction_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_power_up_reaction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__set_attack_scale_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_attack_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__set_attack_scale_2nd_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_attack_scale_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AttackModule__set_base_offset_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fE"]
                    pub fn set_base_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AttackModule__is_attack_occur_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_attack_occur(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__set_constraint_pos_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_constraint_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__is_constraint_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_constraint_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48AttackModule__set_no_dead_damage_fly_effect_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_dead_damage_fly_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47AttackModule__is_no_dead_damage_fly_effect_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_no_dead_damage_fly_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46AttackModule__set_damage_effect_mul_scale_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_damage_effect_mul_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42AttackModule__damage_effect_mul_scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn damage_effect_mul_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__set_attack_level_implEPNS_26BattleObjectModuleAccessorEih"]
                    pub fn set_attack_level(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uchar,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackModule__set_ink_value_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_ink_value(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__set_special_paint_implEPNS_26BattleObjectModuleAccessorEiNS_16SpecialPaintKindE"]
                    pub fn set_special_paint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::SpecialPaintKind,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__set_paralyze_frame_implEPNS_26BattleObjectModuleAccessorEiib"]
                    pub fn set_paralyze_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__set_poison_param_implEPNS_26BattleObjectModuleAccessorEiiifb"]
                    pub fn set_poison_param(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                        arg5: f32,
                        arg6: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42AttackModule__set_optional_hit_effect_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40E"]
                    pub fn set_optional_hit_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__set_optional_hit_sound_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40E"]
                    pub fn set_optional_hit_sound(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44AttackModule__set_no_comp_damage_motion_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_no_comp_damage_motion(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AttackModule__set_no_finish_camera_implEPNS_26BattleObjectModuleAccessorEibb"]
                    pub fn set_no_finish_camera(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42AttackModule__set_no_finish_camera_ex_implEPNS_26BattleObjectModuleAccessorEibb"]
                    pub fn set_no_finish_camera_ex(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42AttackModule__set_final_finish_cut_in_implEPNS_26BattleObjectModuleAccessorEibbfb"]
                    pub fn set_final_finish_cut_in(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: bool,
                        arg5: f32,
                        arg6: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AttackModule__set_no_dead_all_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn set_no_dead_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42AttackModule__set_no_damage_orbit_all_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn set_no_damage_orbit_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48AttackModule__set_captured_same_time_attack_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_captured_same_time_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59AttackModule__set_captured_same_time_attack_damage_mul_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_captured_same_time_attack_damage_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47AttackModule__set_attack_composition_speed_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_attack_composition_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42AttackModule__set_attack_camera_quake_implEPNS_26BattleObjectModuleAccessorEiib"]
                    pub fn set_attack_camera_quake(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48AttackModule__set_attack_no_weight_reaction_implEPNS_26BattleObjectModuleAccessorEihb"]
                    pub fn set_attack_no_weight_reaction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uchar,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52AttackModule__set_attack_no_weight_reaction_all_implEPNS_26BattleObjectModuleAccessorEhb"]
                    pub fn set_attack_no_weight_reaction_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48AttackModule__set_attack_no_reaction_search_implEPNS_26BattleObjectModuleAccessorEihb"]
                    pub fn set_attack_no_reaction_search(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uchar,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44AttackModule__clear_inflict_kind_status_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_inflict_kind_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__set_force_reaction_implEPNS_26BattleObjectModuleAccessorEibb"]
                    pub fn set_force_reaction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AttackModule__set_accept_no_lr_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_accept_no_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AttackModule__set_nearest_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_nearest(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__set_vec_target_pos_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40ERKNS3_8Vector2fEjb"]
                    pub fn set_vec_target_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: *const root::phx::Vector2f,
                        arg5: libc::c_uint,
                        arg6: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AttackModule__enable_safe_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn enable_safe_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__is_critical_attack_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_critical_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49AttackModule__get_critical_attack_damage_mul_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_critical_attack_damage_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51AttackModule__get_critical_attack_reaction_mul_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_critical_attack_reaction_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__set_is_critical_attack_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_is_critical_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49AttackModule__set_critical_attack_damage_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_critical_attack_damage_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51AttackModule__set_critical_attack_reaction_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_critical_attack_reaction_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58AttackModule__enable_attack_r_fix_damage_speed_up_all_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn enable_attack_r_fix_damage_speed_up_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__set_add_reaction_frame_implEPNS_26BattleObjectModuleAccessorEifb"]
                    pub fn set_add_reaction_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AttackModule__set_set_off_implEPNS_26BattleObjectModuleAccessorEiNS_16AttackSetOffKindE"]
                    pub fn set_set_off(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::AttackSetOffKind,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51AttackModule__set_no_squat_damage_reaction_mul_implEPNS_26BattleObjectModuleAccessorEibb"]
                    pub fn set_no_squat_damage_reaction_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46AttackModule__set_no_damage_fly_smoke_all_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn set_no_damage_fly_smoke_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41AttackModule__set_no_uniq_effect_all_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn set_no_uniq_effect_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AttackModule__set_no_world_scale_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_world_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__set_attack_height_implEPNS_26BattleObjectModuleAccessorEiNS_12AttackHeightEb"]
                    pub fn set_attack_height(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::AttackHeight,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40AttackModule__set_attack_height_all_implEPNS_26BattleObjectModuleAccessorENS_12AttackHeightEb"]
                    pub fn set_attack_height_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::AttackHeight,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38AttackModule__set_no_hop_opponent_implEPNS_26BattleObjectModuleAccessorEibb"]
                    pub fn set_no_hop_opponent(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42AttackModule__set_no_hop_opponent_all_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn set_no_hop_opponent_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackModule__set_ice_frame_mul_implEPNS_26BattleObjectModuleAccessorEifb"]
                    pub fn set_ice_frame_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AttackModule__init_attack_pos_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn init_attack_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
            }
            pub mod FighterCutInManager {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39FighterCutInManager__request_start_implEPNS_19FighterCutInManagerERNS_26BattleObjectModuleAccessorEPNS_15CutInTransactorENS_9CutInTypeEPKNS_9CutInDataENS_13CutInPriorityE"]
                    pub fn request_start(
                        arg1: *mut root::app::FighterCutInManager,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                        arg3: *mut root::app::CutInTransactor,
                        arg4: root::app::CutInType,
                        arg5: *const root::app::CutInData,
                        arg6: root::app::CutInPriority,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37FighterCutInManager__request_end_implEPNS_19FighterCutInManagerE"]
                    pub fn request_end(arg1: *mut root::app::FighterCutInManager) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34FighterCutInManager__is_owner_implEPNS_19FighterCutInManagerERKNS_26BattleObjectModuleAccessorE"]
                    pub fn is_owner(
                        arg1: *mut root::app::FighterCutInManager,
                        arg2: *const root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33FighterCutInManager__is_play_implEPNS_19FighterCutInManagerE"]
                    pub fn is_play(arg1: *mut root::app::FighterCutInManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40FighterCutInManager__is_play_status_implEPNS_19FighterCutInManagerE"]
                    pub fn is_play_status(arg1: *mut root::app::FighterCutInManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34FighterCutInManager__add_task_implEPNS_19FighterCutInManagerEj"]
                    pub fn add_task(
                        arg1: *mut root::app::FighterCutInManager,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterCutInManager__set_throw_finish_zoom_rate_implEPNS_19FighterCutInManagerEf"]
                    pub fn set_throw_finish_zoom_rate(
                        arg1: *mut root::app::FighterCutInManager,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49FighterCutInManager__set_throw_finish_offset_implEPNS_19FighterCutInManagerEN3phx8Vector3fE"]
                    pub fn set_throw_finish_offset(
                        arg1: *mut root::app::FighterCutInManager,
                        arg2: root::phx::Vector3f,
                    );
                }
            }
            pub mod GimmickEventWarp {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42GimmickEventWarp__load_from_l2c_table_implEPNS_16GimmickEventWarpERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventWarp,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38GimmickEventWarp__store_l2c_table_implEPKNS_16GimmickEventWarpE"]
                    pub fn store_l2c_table(arg1: *const root::app::GimmickEventWarp) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38GimmickEventWarp__store_l2c_table_implEPKNS_16GimmickEventWarpERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventWarp,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventDrumCheckNeedHide {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55GimmickEventDrumCheckNeedHide__load_from_l2c_table_implEPNS_29GimmickEventDrumCheckNeedHideERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventDrumCheckNeedHide,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51GimmickEventDrumCheckNeedHide__store_l2c_table_implEPKNS_29GimmickEventDrumCheckNeedHideE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventDrumCheckNeedHide,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51GimmickEventDrumCheckNeedHide__store_l2c_table_implEPKNS_29GimmickEventDrumCheckNeedHideERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventDrumCheckNeedHide,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod Circle {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32Circle__load_from_l2c_table_implEPNS_6CircleERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::Circle,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28Circle__store_l2c_table_implEPKNS_6CircleE"]
                    pub fn store_l2c_table(arg1: *const root::app::Circle) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28Circle__store_l2c_table_implEPKNS_6CircleERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::Circle,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterInklingLinkEventPaint {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54FighterInklingLinkEventPaint__load_from_l2c_table_implEPNS_28FighterInklingLinkEventPaintERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterInklingLinkEventPaint,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterInklingLinkEventPaint__store_l2c_table_implEPKNS_28FighterInklingLinkEventPaintE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterInklingLinkEventPaint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterInklingLinkEventPaint__store_l2c_table_implEPKNS_28FighterInklingLinkEventPaintERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterInklingLinkEventPaint,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterControlModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55FighterControlModuleImpl__reserve_on_attack_button_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reserve_on_attack_button(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind53FighterControlModuleImpl__update_attack_air_kind_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn update_attack_air_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54FighterControlModuleImpl__get_param_dash_s4_frame_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_param_dash_s4_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59FighterControlModuleImpl__get_param_attack_hi4_flick_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_param_attack_hi4_flick_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59FighterControlModuleImpl__get_param_attack_lw4_flick_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_param_attack_lw4_flick_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58FighterControlModuleImpl__special_command_236236_step_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn special_command_236236_step(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58FighterControlModuleImpl__special_command_214214_step_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn special_command_214214_step(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57FighterControlModuleImpl__special_command_21416_step_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn special_command_21416_step(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57FighterControlModuleImpl__special_command_23634_step_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn special_command_23634_step(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59FighterControlModuleImpl__check_hit_stop_delay_command_implEPNS_26BattleObjectModuleAccessorERN3phx8Vector2fE"]
                    pub fn check_hit_stop_delay_command(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55FighterControlModuleImpl__is_enable_hit_stop_delay_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_enable_hit_stop_delay(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind60FighterControlModuleImpl__is_enable_hit_stop_delay_life_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_enable_hit_stop_delay_life(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55FighterControlModuleImpl__get_stick_button_trigger_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_stick_button_trigger(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54FighterControlModuleImpl__get_stick_button_repeat_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_stick_button_repeat(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
            }
            pub mod FighterRyuLinkEventFinalDeadDamage {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind60FighterRyuLinkEventFinalDeadDamage__load_from_l2c_table_implEPNS_34FighterRyuLinkEventFinalDeadDamageERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterRyuLinkEventFinalDeadDamage,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind56FighterRyuLinkEventFinalDeadDamage__store_l2c_table_implEPKNS_34FighterRyuLinkEventFinalDeadDamageE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterRyuLinkEventFinalDeadDamage,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind56FighterRyuLinkEventFinalDeadDamage__store_l2c_table_implEPKNS_34FighterRyuLinkEventFinalDeadDamageERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterRyuLinkEventFinalDeadDamage,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterMotionModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterMotionModuleImpl__add_body_type_hash_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ei"]
                    pub fn add_body_type_hash(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46FighterMotionModuleImpl__get_cancel_frame_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eb"]
                    pub fn get_cancel_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51FighterMotionModuleImpl__is_valid_cancel_frame_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn is_valid_cancel_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterMotionModuleImpl__get_hit_normal_frame_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eb"]
                    pub fn get_hit_normal_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47FighterMotionModuleImpl__get_hit_xlu_frame_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eb"]
                    pub fn get_hit_xlu_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind61FighterMotionModuleImpl__motion_kind_kirby_copy_original_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn motion_kind_kirby_copy_original(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54FighterMotionModuleImpl__change_motion_kirby_copy_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Effbfbb"]
                    pub fn change_motion_kirby_copy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: f32,
                        arg5: bool,
                        arg6: f32,
                        arg7: bool,
                        arg8: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind68FighterMotionModuleImpl__change_motion_inherit_frame_kirby_copy_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Efffbb"]
                    pub fn change_motion_inherit_frame_kirby_copy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: f32,
                        arg5: f32,
                        arg6: bool,
                        arg7: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind78FighterMotionModuleImpl__change_motion_inherit_frame_keep_rate_kirby_copy_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Efff"]
                    pub fn change_motion_inherit_frame_keep_rate_kirby_copy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: f32,
                        arg5: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind74FighterMotionModuleImpl__change_motion_force_inherit_frame_kirby_copy_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Efff"]
                    pub fn change_motion_force_inherit_frame_kirby_copy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: f32,
                        arg5: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind60FighterMotionModuleImpl__end_frame_from_hash_kirby_copy_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn end_frame_from_hash_kirby_copy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind64FighterMotionModuleImpl__set_frame_sync_anim_cmd_kirby_copy_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_frame_sync_anim_cmd_kirby_copy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57FighterMotionModuleImpl__get_cancel_frame_kirby_copy_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eb"]
                    pub fn get_cancel_frame_kirby_copy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59FighterMotionModuleImpl__add_motion_partial_kirby_copy_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40Effbbfbbb"]
                    pub fn add_motion_partial_kirby_copy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: f32,
                        arg5: f32,
                        arg6: bool,
                        arg7: bool,
                        arg8: f32,
                        arg9: bool,
                        arg10: bool,
                        arg11: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45FighterMotionModuleImpl__set_blend_waist_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_blend_waist(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind61FighterMotionModuleImpl__start_damage_stop_interpolation_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn start_damage_stop_interpolation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind65FighterMotionModuleImpl__set_pause_motion_interpolation_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn set_pause_motion_interpolation_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind62FighterMotionModuleImpl__set_update_finger_and_face_joint_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_update_finger_and_face_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
            }
            pub mod FighterStopModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42FighterStopModuleImpl__is_damage_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_damage_stop(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49FighterStopModuleImpl__get_damage_stop_frame_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_damage_stop_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod WeaponShizueFishingrodLinkEventReel {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind61WeaponShizueFishingrodLinkEventReel__load_from_l2c_table_implEPNS_35WeaponShizueFishingrodLinkEventReelERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::WeaponShizueFishingrodLinkEventReel,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57WeaponShizueFishingrodLinkEventReel__store_l2c_table_implEPKNS_35WeaponShizueFishingrodLinkEventReelE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::WeaponShizueFishingrodLinkEventReel,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57WeaponShizueFishingrodLinkEventReel__store_l2c_table_implEPKNS_35WeaponShizueFishingrodLinkEventReelERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::WeaponShizueFishingrodLinkEventReel,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventBarrel {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44GimmickEventBarrel__load_from_l2c_table_implEPNS_18GimmickEventBarrelERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventBarrel,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GimmickEventBarrel__store_l2c_table_implEPKNS_18GimmickEventBarrelE"]
                    pub fn store_l2c_table(arg1: *const root::app::GimmickEventBarrel)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GimmickEventBarrel__store_l2c_table_implEPKNS_18GimmickEventBarrelERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventBarrel,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod ArticleModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ArticleModule__generate_article_implEPNS_26BattleObjectModuleAccessorEibi"]
                    pub fn generate_article(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ArticleModule__generate_article_enable_implEPNS_26BattleObjectModuleAccessorEibi"]
                    pub fn generate_article_enable(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46ArticleModule__generate_article_have_item_implEPNS_26BattleObjectModuleAccessorEiiN3phx6Hash40E"]
                    pub fn generate_article_have_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24ArticleModule__have_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40ENS_22ArticleOperationTargetEjb"]
                    pub fn have(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: root::app::ArticleOperationTarget,
                        arg5: libc::c_uint,
                        arg6: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25ArticleModule__shoot_implEPNS_26BattleObjectModuleAccessorEiNS_22ArticleOperationTargetEb"]
                    pub fn shoot(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::ArticleOperationTarget,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ArticleModule__shoot_exist_implEPNS_26BattleObjectModuleAccessorEiNS_22ArticleOperationTargetEb"]
                    pub fn shoot_exist(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::ArticleOperationTarget,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ArticleModule__set_pos_implEPNS_26BattleObjectModuleAccessorEiN3phx8Vector3fE"]
                    pub fn set_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ArticleModule__motion_kind_implEPNS_26BattleObjectModuleAccessorEiNS_22ArticleOperationTargetE"]
                    pub fn motion_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::ArticleOperationTarget,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ArticleModule__change_motion_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40Ebf"]
                    pub fn change_motion(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: bool,
                        arg5: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ArticleModule__change_motion_from_no_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40Eibf"]
                    pub fn change_motion_from_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: libc::c_int,
                        arg5: bool,
                        arg6: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ArticleModule__add_motion_2nd_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40Effbf"]
                    pub fn add_motion_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: f32,
                        arg5: f32,
                        arg6: bool,
                        arg7: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ArticleModule__motion_kind_2nd_implEPNS_26BattleObjectModuleAccessorEiNS_22ArticleOperationTargetE"]
                    pub fn motion_kind_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::ArticleOperationTarget,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ArticleModule__set_weight_implEPNS_26BattleObjectModuleAccessorEifb"]
                    pub fn set_weight(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ArticleModule__add_motion_partial_implEPNS_26BattleObjectModuleAccessorEiiN3phx6Hash40Effbbfbbb"]
                    pub fn add_motion_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: root::phx::Hash40,
                        arg5: f32,
                        arg6: f32,
                        arg7: bool,
                        arg8: bool,
                        arg9: f32,
                        arg10: bool,
                        arg11: bool,
                        arg12: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ArticleModule__set_frame_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ArticleModule__set_frame_2nd_implEPNS_26BattleObjectModuleAccessorEifb"]
                    pub fn set_frame_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ArticleModule__set_rate_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ArticleModule__change_status_implEPNS_26BattleObjectModuleAccessorEiiNS_22ArticleOperationTargetE"]
                    pub fn change_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: root::app::ArticleOperationTarget,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ArticleModule__change_status_exist_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn change_status_exist(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ArticleModule__set_visibility_whole_implEPNS_26BattleObjectModuleAccessorEibNS_22ArticleOperationTargetE"]
                    pub fn set_visibility_whole(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: root::app::ArticleOperationTarget,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ArticleModule__set_visibility_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40ES4_NS_22ArticleOperationTargetE"]
                    pub fn set_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: root::phx::Hash40,
                        arg5: root::app::ArticleOperationTarget,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ArticleModule__set_default_visibility_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40ENS_22ArticleOperationTargetE"]
                    pub fn set_default_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: root::app::ArticleOperationTarget,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ArticleModule__set_situation_kind_implEPNS_26BattleObjectModuleAccessorEih"]
                    pub fn set_situation_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uchar,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ArticleModule__set_flag_implEPNS_26BattleObjectModuleAccessorEibi"]
                    pub fn set_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ArticleModule__is_flag_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn is_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ArticleModule__is_flag_from_no_implEPNS_26BattleObjectModuleAccessorEiii"]
                    pub fn is_flag_from_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ArticleModule__set_int_implEPNS_26BattleObjectModuleAccessorEiii"]
                    pub fn set_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ArticleModule__get_int_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ArticleModule__set_float_implEPNS_26BattleObjectModuleAccessorEifi"]
                    pub fn set_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ArticleModule__get_float_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ArticleModule__set_item_action_implEPNS_26BattleObjectModuleAccessorEiif"]
                    pub fn set_item_action(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26ArticleModule__remove_implEPNS_26BattleObjectModuleAccessorEiNS_22ArticleOperationTargetE"]
                    pub fn remove(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::ArticleOperationTarget,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ArticleModule__remove_exist_implEPNS_26BattleObjectModuleAccessorEiNS_22ArticleOperationTargetE"]
                    pub fn remove_exist(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::ArticleOperationTarget,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ArticleModule__remove_exist_object_id_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn remove_exist_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ArticleModule__is_exist_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_exist(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ArticleModule__get_num_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ArticleModule__is_generatable_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_generatable(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ArticleModule__get_active_num_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_active_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ArticleModule__get_article_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_article(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ArticleModule__get_joint_pos_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40ENS_22ArticleOperationTargetE"]
                    pub fn get_joint_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: root::app::ArticleOperationTarget,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ArticleModule__get_joint_rotate_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40ENS_22ArticleOperationTargetE"]
                    pub fn get_joint_rotate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: root::app::ArticleOperationTarget,
                    ) -> u64;
                }
            }
            pub mod LinkEventThrow {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkEventThrow__load_from_l2c_table_implEPNS_14LinkEventThrowERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventThrow,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36LinkEventThrow__store_l2c_table_implEPKNS_14LinkEventThrowE"]
                    pub fn store_l2c_table(arg1: *const root::app::LinkEventThrow) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36LinkEventThrow__store_l2c_table_implEPKNS_14LinkEventThrowERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventThrow,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod CatchModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27CatchModule__set_catch_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn set_catch(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26CatchModule__is_catch_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_catch(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27CatchModule__catch_cut_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn catch_cut(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34CatchModule__update_pos_cling_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_pos_cling(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27CatchModule__cling_cut_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn cling_cut(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30CatchModule__check_damage_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn check_damage(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36CatchModule__set_send_cut_event_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_send_cut_event(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35CatchModule__capture_object_id_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn capture_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36CatchModule__capture_pos_x_diff_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn capture_pos_x_diff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod DamageLog {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35DamageLog__load_from_l2c_table_implEPNS_9DamageLogERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::DamageLog,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31DamageLog__store_l2c_table_implEPKNS_9DamageLogE"]
                    pub fn store_l2c_table(arg1: *const root::app::DamageLog) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31DamageLog__store_l2c_table_implEPKNS_9DamageLogERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::DamageLog,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod ShieldModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24ShieldModule__clean_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clean(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ShieldModule__is_shield_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn is_shield(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ShieldModule__set_size_implEPNS_26BattleObjectModuleAccessorEifi"]
                    pub fn set_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ShieldModule__set_status_implEPNS_26BattleObjectModuleAccessorEiNS_12ShieldStatusEi"]
                    pub fn set_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::ShieldStatus,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ShieldModule__set_status_all_implEPNS_26BattleObjectModuleAccessorENS_12ShieldStatusEi"]
                    pub fn set_status_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ShieldStatus,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26ShieldModule__is_turn_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_turn(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ShieldModule__is_front_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_front(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25ShieldModule__is_hop_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_hop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ShieldModule__get_hop_angle_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_hop_angle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ShieldModule__is_no_hop_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_no_hop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ShieldModule__set_turn_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_turn(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ShieldModule__set_front_implEPNS_26BattleObjectModuleAccessorENS_11ShieldFrontEi"]
                    pub fn set_front(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ShieldFront,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26ShieldModule__set_hop_implEPNS_26BattleObjectModuleAccessorEbfi"]
                    pub fn set_hop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ShieldModule__set_attack_mul_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_attack_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ShieldModule__get_attack_mul_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_attack_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ShieldModule__set_speed_mul_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_speed_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ShieldModule__get_speed_mul_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_speed_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ShieldModule__set_life_mul_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_life_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ShieldModule__get_life_mul_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_life_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ShieldModule__set_attack_limit_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_attack_limit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ShieldModule__get_attack_limit_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_attack_limit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ShieldModule__set_hit_stop_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_hit_stop_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ShieldModule__is_no_m_ball_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_no_m_ball(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ShieldModule__get_part_size_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_part_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ShieldModule__get_team_no_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_team_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ShieldModule__set_no_team_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_team(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ShieldModule__set_shield_type_implEPNS_26BattleObjectModuleAccessorENS_10ShieldTypeEii"]
                    pub fn set_shield_type(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ShieldType,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ShieldModule__clear_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_all(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ShieldModule__clear_all_2_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn clear_all_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ShieldModule__get_center_pos_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_center_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25ShieldModule__get_lr_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ShieldModule__get_group_num_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_group_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ShieldModule__get_pos_x_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_pos_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ShieldModule__set_target_property_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_target_property(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ShieldModule__set_target_category_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_target_category(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24ShieldModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
            }
            pub mod FighterRyuLinkEventFinalMoveTarget {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind60FighterRyuLinkEventFinalMoveTarget__load_from_l2c_table_implEPNS_34FighterRyuLinkEventFinalMoveTargetERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterRyuLinkEventFinalMoveTarget,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind56FighterRyuLinkEventFinalMoveTarget__store_l2c_table_implEPKNS_34FighterRyuLinkEventFinalMoveTargetE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterRyuLinkEventFinalMoveTarget,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind56FighterRyuLinkEventFinalMoveTarget__store_l2c_table_implEPKNS_34FighterRyuLinkEventFinalMoveTargetERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterRyuLinkEventFinalMoveTarget,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod DamageInfo {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36DamageInfo__load_from_l2c_table_implEPNS_10DamageInfoERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::DamageInfo,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32DamageInfo__store_l2c_table_implEPKNS_10DamageInfoE"]
                    pub fn store_l2c_table(arg1: *const root::app::DamageInfo) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32DamageInfo__store_l2c_table_implEPKNS_10DamageInfoERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::DamageInfo,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod PostureModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28PostureModule__init_pos_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEbb"]
                    pub fn init_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23PostureModule__pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn pos(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26PostureModule__pos_2d_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn pos_2d(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25PostureModule__pos_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn pos_x(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25PostureModule__pos_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn pos_y(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25PostureModule__pos_z_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn pos_z(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27PostureModule__set_pos_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30PostureModule__set_pos_2d_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fE"]
                    pub fn set_pos_2d(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27PostureModule__add_pos_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn add_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30PostureModule__add_pos_2d_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fE"]
                    pub fn add_pos_2d(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28PostureModule__prev_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn prev_pos(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31PostureModule__prev_pos_2d_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn prev_pos_2d(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22PostureModule__lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn lr(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26PostureModule__set_lr_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_lr(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30PostureModule__reverse_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reverse_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28PostureModule__init_rot_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn init_rot(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30PostureModule__init_rot_2_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn init_rot_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23PostureModule__rot_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn rot(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25PostureModule__rot_x_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn rot_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25PostureModule__rot_y_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn rot_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25PostureModule__rot_z_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn rot_z(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27PostureModule__set_rot_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEi"]
                    pub fn set_rot(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33PostureModule__init_rot_y_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn init_rot_y_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50PostureModule__is_rot_y_lr_different_inner_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_rot_y_lr_different_inner_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28PostureModule__rot_y_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn rot_y_lr(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35PostureModule__update_rot_y_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_rot_y_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36PostureModule__reverse_rot_y_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reverse_rot_y_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30PostureModule__base_scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn base_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25PostureModule__scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn scale(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29PostureModule__set_scale_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30PostureModule__init_scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn init_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31PostureModule__owner_scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn owner_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35PostureModule__set_owner_scale_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_owner_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34PostureModule__set_link_scale_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_link_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32PostureModule__set_stick_lr_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_stick_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45PostureModule__set_sync_constraint_joint_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn set_sync_constraint_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    );
                }
            }
            pub mod LinkEventTouchItem {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkEventTouchItem__load_from_l2c_table_implEPNS_18LinkEventTouchItemERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventTouchItem,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkEventTouchItem__store_l2c_table_implEPKNS_18LinkEventTouchItemE"]
                    pub fn store_l2c_table(arg1: *const root::app::LinkEventTouchItem)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkEventTouchItem__store_l2c_table_implEPKNS_18LinkEventTouchItemERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventTouchItem,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventCatch {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GimmickEventCatch__load_from_l2c_table_implEPNS_17GimmickEventCatchERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventCatch,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39GimmickEventCatch__store_l2c_table_implEPKNS_17GimmickEventCatchE"]
                    pub fn store_l2c_table(arg1: *const root::app::GimmickEventCatch) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39GimmickEventCatch__store_l2c_table_implEPKNS_17GimmickEventCatchERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventCatch,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod MotionModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32MotionModule__change_motion_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Effbfbb"]
                    pub fn change_motion(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: f32,
                        arg5: bool,
                        arg6: f32,
                        arg7: bool,
                        arg8: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46MotionModule__change_motion_inherit_frame_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Efffbb"]
                    pub fn change_motion_inherit_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: f32,
                        arg5: f32,
                        arg6: bool,
                        arg7: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind56MotionModule__change_motion_inherit_frame_keep_rate_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Efff"]
                    pub fn change_motion_inherit_frame_keep_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: f32,
                        arg5: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52MotionModule__change_motion_force_inherit_frame_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Efff"]
                    pub fn change_motion_force_inherit_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: f32,
                        arg5: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37MotionModule__change_motion_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn change_motion_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33MotionModule__add_motion_2nd_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Effbf"]
                    pub fn add_motion_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                        arg4: f32,
                        arg5: bool,
                        arg6: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29MotionModule__set_weight_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_weight(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34MotionModule__set_weight_rate_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_weight_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27MotionModule__is_blend_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_blend(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30MotionModule__motion_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn motion_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23MotionModule__rate_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn rate(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27MotionModule__set_rate_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_rate(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27MotionModule__rate_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn rate_2nd(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31MotionModule__set_rate_2nd_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_rate_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24MotionModule__frame_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn frame(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29MotionModule__prev_frame_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn prev_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28MotionModule__set_frame_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42MotionModule__set_frame_sync_anim_cmd_implEPNS_26BattleObjectModuleAccessorEfbbb"]
                    pub fn set_frame_sync_anim_cmd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                        arg4: bool,
                        arg5: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28MotionModule__end_frame_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn end_frame(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38MotionModule__end_frame_from_hash_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn end_frame_from_hash(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32MotionModule__set_frame_2nd_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_frame_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28MotionModule__frame_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn frame_2nd(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28MotionModule__trans_tra_implEPNS_26BattleObjectModuleAccessorERN3phx8Vector3fEbb"]
                    pub fn trans_tra(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::phx::Vector3f,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32MotionModule__trans_tra_2nd_implEPNS_26BattleObjectModuleAccessorERN3phx8Vector3fEbb"]
                    pub fn trans_tra_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::phx::Vector3f,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34MotionModule__joint_local_tra_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40EbRNS3_8Vector3fE"]
                    pub fn joint_local_tra(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                        arg4: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38MotionModule__trans_tra_end_frame_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERNS3_8Vector3fE"]
                    pub fn trans_tra_end_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25MotionModule__is_end_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_end(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28MotionModule__is_looped_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_looped(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31MotionModule__is_loop_flag_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_loop_flag(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42MotionModule__update_trans_move_speed_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_trans_move_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35MotionModule__trans_move_speed_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn trans_move_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39MotionModule__trans_move_speed_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn trans_move_speed_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48MotionModule__set_trans_move_speed_no_scale_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_trans_move_speed_no_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35MotionModule__is_anim_resource_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn is_anim_resource(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30MotionModule__resource_id_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn resource_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36MotionModule__animcmd_name_hash_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn animcmd_name_hash(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25MotionModule__weight_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn weight(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30MotionModule__prev_weight_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn prev_weight(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43MotionModule__set_weight_change_motion_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_weight_change_motion(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29MotionModule__calc_joint_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_RNS3_8Vector3fE"]
                    pub fn calc_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                        arg4: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind66MotionModule__update_dynamic_skeleton_without_complete_matrix_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_dynamic_skeleton_without_complete_matrix(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39MotionModule__joint_local_rotation_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERNS3_8Vector3fE"]
                    pub fn joint_local_rotation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37MotionModule__set_trans_joint_id_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn set_trans_joint_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32MotionModule__end_frame_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn end_frame_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29MotionModule__is_end_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_end_2nd(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34MotionModule__motion_kind_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn motion_kind_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31MotionModule__is_flag_link_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn is_flag_link(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57MotionModule__is_flag_start_1_frame_from_motion_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn is_flag_start_1_frame_from_motion_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40MotionModule__is_flag_start_1_frame_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_flag_start_1_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44MotionModule__is_flag_start_1_frame_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_flag_start_1_frame_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31MotionModule__joint_rotate_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERNS3_8Vector3fE"]
                    pub fn joint_rotate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37MotionModule__add_motion_partial_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40Effbbfbbb"]
                    pub fn add_motion_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: f32,
                        arg5: f32,
                        arg6: bool,
                        arg7: bool,
                        arg8: f32,
                        arg9: bool,
                        arg10: bool,
                        arg11: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40MotionModule__remove_motion_partial_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn remove_motion_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45MotionModule__remove_motion_partial_comp_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn remove_motion_partial_comp(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38MotionModule__motion_kind_partial_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn motion_kind_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33MotionModule__is_end_partial_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_end_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36MotionModule__end_frame_partial_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn end_frame_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35MotionModule__set_rate_partial_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_rate_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31MotionModule__rate_partial_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn rate_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32MotionModule__frame_partial_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn frame_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37MotionModule__prev_frame_partial_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn prev_frame_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36MotionModule__set_frame_partial_implEPNS_26BattleObjectModuleAccessorEifb"]
                    pub fn set_frame_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50MotionModule__set_frame_partial_sync_anim_cmd_implEPNS_26BattleObjectModuleAccessorEifb"]
                    pub fn set_frame_partial_sync_anim_cmd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48MotionModule__is_flag_start_1_frame_partial_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_flag_start_1_frame_partial(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26MotionModule__is_flip_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_flip(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27MotionModule__set_flip_implEPNS_26BattleObjectModuleAccessorEbbb"]
                    pub fn set_flip(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45MotionModule__set_link_flip_target_joint_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_link_flip_target_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37MotionModule__set_frame_material_implEPNS_26BattleObjectModuleAccessorEfNS_17MaterialAnimeKindE"]
                    pub fn set_frame_material(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: root::app::MaterialAnimeKind,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36MotionModule__set_rate_material_implEPNS_26BattleObjectModuleAccessorEfNS_17MaterialAnimeKindE"]
                    pub fn set_rate_material(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: root::app::MaterialAnimeKind,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41MotionModule__set_loop_flag_material_implEPNS_26BattleObjectModuleAccessorENS_21MaterialAnimeLoopFlagENS_17MaterialAnimeKindE"]
                    pub fn set_loop_flag_material(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::MaterialAnimeLoopFlag,
                        arg3: root::app::MaterialAnimeKind,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37MotionModule__get_frame_material_implEPNS_26BattleObjectModuleAccessorENS_17MaterialAnimeKindE"]
                    pub fn get_frame_material(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::MaterialAnimeKind,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41MotionModule__set_helper_calculation_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_helper_calculation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32MotionModule__set_skip_rate_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_skip_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29MotionModule__whole_rate_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn whole_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33MotionModule__set_whole_rate_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_whole_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30MotionModule__update_rate_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32MotionModule__set_recalc_ik_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_recalc_ik(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30MotionModule__set_no_comp_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_comp(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29MotionModule__is_no_comp_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_no_comp(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34MotionModule__set_kind_offset_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_kind_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50MotionModule__enable_shift_material_animation_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn enable_shift_material_animation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36MotionModule__trans_joint_scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn trans_joint_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41MotionModule__set_stop_interpolation_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_stop_interpolation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35MotionModule__is_flip_resource_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_flip_resource(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30MotionModule__set_reverse_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_reverse(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48MotionModule__set_force_progress_2nd_weight_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_force_progress_2nd_weight(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34MotionModule__clear_joint_srt_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn clear_joint_srt(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43MotionModule__start_flip_interpolation_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn start_flip_interpolation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    ) -> u64;
                }
            }
            pub mod WorkModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26WorkModule__get_float_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26WorkModule__set_float_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26WorkModule__rnd_float_implEPNS_26BattleObjectModuleAccessorEffi"]
                    pub fn rnd_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26WorkModule__add_float_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn add_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26WorkModule__sub_float_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn sub_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26WorkModule__mul_float_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn mul_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26WorkModule__div_float_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn div_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__get_int_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__set_int_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26WorkModule__get_int64_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_int64(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26WorkModule__set_int64_implEPNS_26BattleObjectModuleAccessorEli"]
                    pub fn set_int64(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_long,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__rnd_int_implEPNS_26BattleObjectModuleAccessorEiii"]
                    pub fn rnd_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__inc_int_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn inc_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__dec_int_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn dec_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__add_int_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn add_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__sub_int_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn sub_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__mul_int_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn mul_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__div_int_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn div_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31WorkModule__count_down_int_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn count_down_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__is_flag_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24WorkModule__on_flag_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn on_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25WorkModule__off_flag_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn off_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25WorkModule__set_flag_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30WorkModule__turn_off_flag_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn turn_off_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45WorkModule__enable_transition_term_group_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn enable_transition_term_group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45WorkModule__unable_transition_term_group_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn unable_transition_term_group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44WorkModule__clear_transition_term_group_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn clear_transition_term_group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48WorkModule__is_enable_transition_term_group_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_enable_transition_term_group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48WorkModule__enable_transition_term_group_ex_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn enable_transition_term_group_ex(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52WorkModule__enable_transition_term_group_ex_all_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn enable_transition_term_group_ex_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48WorkModule__unable_transition_term_group_ex_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn unable_transition_term_group_ex(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52WorkModule__unable_transition_term_group_ex_all_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn unable_transition_term_group_ex_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42WorkModule__is_enable_transition_term_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_enable_transition_term(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39WorkModule__enable_transition_term_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn enable_transition_term(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39WorkModule__unable_transition_term_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn unable_transition_term(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38WorkModule__clear_transition_term_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_transition_term(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49WorkModule__is_enable_transition_term_forbid_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_enable_transition_term_forbid(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46WorkModule__enable_transition_term_forbid_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn enable_transition_term_forbid(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46WorkModule__unable_transition_term_forbid_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn unable_transition_term_forbid(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52WorkModule__enable_transition_term_forbid_group_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn enable_transition_term_forbid_group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52WorkModule__unable_transition_term_forbid_group_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn unable_transition_term_forbid_group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45WorkModule__clear_transition_term_forbid_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_transition_term_forbid(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26WorkModule__clear_all_implEPNS_26BattleObjectModuleAccessorENS_8WorkKindE"]
                    pub fn clear_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::WorkKind,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30WorkModule__get_param_int_implEPNS_26BattleObjectModuleAccessorEmm"]
                    pub fn get_param_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_ulong,
                        arg3: libc::c_ulong,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32WorkModule__get_param_int64_implEPNS_26BattleObjectModuleAccessorEmm"]
                    pub fn get_param_int64(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_ulong,
                        arg3: libc::c_ulong,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32WorkModule__get_param_float_implEPNS_26BattleObjectModuleAccessorEmm"]
                    pub fn get_param_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_ulong,
                        arg3: libc::c_ulong,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33WorkModule__set_customize_no_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_customize_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
            }
            pub mod Weapon {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27Weapon__get_founder_id_implEPNS_6WeaponE"]
                    pub fn get_founder_id(arg1: *mut root::app::Weapon) -> u64;
                }
            }
            pub mod AttackAbsoluteData {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44AttackAbsoluteData__load_from_l2c_table_implEPNS_18AttackAbsoluteDataERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::AttackAbsoluteData,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40AttackAbsoluteData__store_l2c_table_implEPKNS_18AttackAbsoluteDataE"]
                    pub fn store_l2c_table(arg1: *const root::app::AttackAbsoluteData)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40AttackAbsoluteData__store_l2c_table_implEPKNS_18AttackAbsoluteDataERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::AttackAbsoluteData,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod SlopeModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40SlopeModule__update_model_top_angle_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_model_top_angle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30SlopeModule__floor_diff_l_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn floor_diff_l(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30SlopeModule__floor_diff_r_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn floor_diff_r(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod StopModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32StopModule__cancel_hit_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn cancel_hit_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31StopModule__set_other_stop_implEPNS_26BattleObjectModuleAccessorEiNS_13StopOtherKindE"]
                    pub fn set_other_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::StopOtherKind,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31StopModule__get_other_stop_implEPNS_26BattleObjectModuleAccessorENS_13StopOtherKindE"]
                    pub fn get_other_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::StopOtherKind,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34StopModule__cancel_other_stop_implEPNS_26BattleObjectModuleAccessorENS_13StopOtherKindE"]
                    pub fn cancel_other_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::StopOtherKind,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30StopModule__set_item_stop_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_item_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30StopModule__get_item_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_item_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33StopModule__cancel_item_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn cancel_item_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30StopModule__set_link_stop_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn set_link_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24StopModule__is_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_stop(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32StopModule__is_special_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_special_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23StopModule__is_hit_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_hit(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26StopModule__is_damage_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_damage(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24StopModule__is_item_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_item(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25StopModule__is_other_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_other(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40StopModule__get_hit_stop_real_frame_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_hit_stop_real_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35StopModule__set_hit_stop_frame_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_hit_stop_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39StopModule__set_hit_stop_frame_fix_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_hit_stop_frame_fix(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33StopModule__set_special_stop_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_special_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25StopModule__end_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn end_stop(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
            }
            pub mod OnCalcParamEvent {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42OnCalcParamEvent__load_from_l2c_table_implEPNS_16OnCalcParamEventERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::OnCalcParamEvent,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38OnCalcParamEvent__store_l2c_table_implEPKNS_16OnCalcParamEventE"]
                    pub fn store_l2c_table(arg1: *const root::app::OnCalcParamEvent) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38OnCalcParamEvent__store_l2c_table_implEPKNS_16OnCalcParamEventERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::OnCalcParamEvent,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod ShakeModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind21ShakeModule__req_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40EibRKNS3_8Vector2fEffbb"]
                    pub fn req(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                        arg4: bool,
                        arg5: *const root::phx::Vector2f,
                        arg6: f32,
                        arg7: f32,
                        arg8: bool,
                        arg9: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ShakeModule__req_time_scale_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40EibRKNS3_8Vector2fEffbbif"]
                    pub fn req_time_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                        arg4: bool,
                        arg5: *const root::phx::Vector2f,
                        arg6: f32,
                        arg7: f32,
                        arg8: bool,
                        arg9: bool,
                        arg10: libc::c_int,
                        arg11: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24ShakeModule__extend_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ei"]
                    pub fn extend(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22ShakeModule__stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn stop(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ShakeModule__stop_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn stop_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26ShakeModule__is_shake_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_shake(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24ShakeModule__offset_implEPNS_26BattleObjectModuleAccessorERN3phx8Vector3fE"]
                    pub fn offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ShakeModule__enable_offset_implEPNS_26BattleObjectModuleAccessorERN3phx8Vector3fE"]
                    pub fn enable_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ShakeModule__disable_offset_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn disable_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ShakeModule__set_scale_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ef"]
                    pub fn set_scale_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ShakeModule__set_axis_xy_kind_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eb"]
                    pub fn set_axis_xy_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ShakeModule__set_ignore_slow_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_ignore_slow(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
            }
            pub mod GimmickEventSlashEscape {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49GimmickEventSlashEscape__load_from_l2c_table_implEPNS_23GimmickEventSlashEscapeERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventSlashEscape,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45GimmickEventSlashEscape__store_l2c_table_implEPKNS_23GimmickEventSlashEscapeE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventSlashEscape,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45GimmickEventSlashEscape__store_l2c_table_implEPKNS_23GimmickEventSlashEscapeERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventSlashEscape,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod ShadowModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ShadowModule__set_draw_implEPNS_26BattleObjectModuleAccessorENS_14ShadowDrawFlagEb"]
                    pub fn set_draw(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ShadowDrawFlag,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ShadowModule__set_draw_status_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_draw_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ShadowModule__set_size_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_size(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ShadowModule__set_offset_y_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_offset_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
            }
            pub mod SoundModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34SoundModule__set_position_sub_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_position_sub(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25SoundModule__play_se_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40EbbbbNS_11SoundModule8enSETypeE"]
                    pub fn play_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                        arg4: bool,
                        arg5: bool,
                        arg6: bool,
                        arg7: root::app::SoundModule::enSEType,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30SoundModule__play_se_no3d_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ebb"]
                    pub fn play_se_no3d(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29SoundModule__play_se_pos_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS3_8Vector3fEbb"]
                    pub fn play_se_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::phx::Vector3f,
                        arg4: bool,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SoundModule__play_status_se_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ebbb"]
                    pub fn play_status_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                        arg4: bool,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SoundModule__stop_status_se_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn stop_status_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31SoundModule__play_sequence_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ebb"]
                    pub fn play_sequence(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38SoundModule__set_play_hit_se_flag_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_play_hit_se_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38SoundModule__get_play_hit_se_flag_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_play_hit_se_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31SoundModule__set_no_hit_se_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_hit_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31SoundModule__get_no_hit_se_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_no_hit_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29SoundModule__play_hit_se_implEPNS_26BattleObjectModuleAccessorEfRKNS_10AttackDataEi"]
                    pub fn play_hit_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: *const root::app::AttackData,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SoundModule__play_damage_se_implEPNS_26BattleObjectModuleAccessorEiiN3phx6Hash40ES4_"]
                    pub fn play_damage_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: root::phx::Hash40,
                        arg5: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27SoundModule__play_step_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn play_step(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37SoundModule__play_step_flippable_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_"]
                    pub fn play_step_flippable(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33SoundModule__play_landing_se_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn play_landing_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30SoundModule__play_down_se_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn play_down_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SoundModule__play_fly_voice_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_"]
                    pub fn play_fly_voice(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28SoundModule__set_se_vol_implEPNS_26BattleObjectModuleAccessorEifi"]
                    pub fn set_se_vol(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28SoundModule__get_se_vol_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_se_vol(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31SoundModule__set_se_vol_db_implEPNS_26BattleObjectModuleAccessorEifi"]
                    pub fn set_se_vol_db(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31SoundModule__get_se_vol_db_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_se_vol_db(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35SoundModule__set_auto_se_pitch_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_auto_se_pitch(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35SoundModule__get_auto_se_pitch_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_auto_se_pitch(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35SoundModule__set_se_pitch_cent_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ef"]
                    pub fn set_se_pitch_cent(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36SoundModule__set_se_pitch_ratio_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ef"]
                    pub fn set_se_pitch_ratio(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37SoundModule__set_se_pitch_status_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_se_pitch_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44SoundModule__set_se_pitch_status_handle_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_se_pitch_status_handle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48SoundModule__set_continue_se_at_game_finish_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_continue_se_at_game_finish(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25SoundModule__stop_se_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ej"]
                    pub fn stop_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29SoundModule__stop_se_all_implEPNS_26BattleObjectModuleAccessorEjbb"]
                    pub fn stop_se_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34SoundModule__stop_loop_se_all_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn stop_loop_se_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SoundModule__stop_se_handle_implEPNS_26BattleObjectModuleAccessorEij"]
                    pub fn stop_se_handle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SoundModule__stop_all_sound_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn stop_all_sound(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30SoundModule__pause_se_all_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn pause_se_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30SoundModule__set_se_speed_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_se_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SoundModule__set_landing_se_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn set_landing_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SoundModule__get_landing_se_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_landing_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44SoundModule__play_landing_se_registered_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn play_landing_se_registered(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SoundModule__set_takeout_se_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn set_takeout_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39SoundModule__set_takeout_se_status_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn set_takeout_se_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34SoundModule__reset_takeout_se_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_takeout_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33SoundModule__play_takeout_se_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn play_takeout_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SoundModule__get_takeout_se_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_takeout_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44SoundModule__get_takeout_se_status_flag_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_takeout_se_status_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34SoundModule__set_play_inhivit_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ej"]
                    pub fn set_play_inhivit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28SoundModule__is_playing_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn is_playing(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35SoundModule__is_playing_status_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn is_playing_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34SoundModule__is_playing_voice_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_playing_voice(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40SoundModule__get_common_sound_label_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_common_sound_label(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33SoundModule__play_status_bgm_implEPNS_26BattleObjectModuleAccessorENS_15enStatusBGMTypeE"]
                    pub fn play_status_bgm(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::enStatusBGMType,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46SoundModule__set_gamespeed_se_calibration_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_gamespeed_se_calibration(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31SoundModule__set_remain_se_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_remain_se(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
            }
            pub mod Article {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34Article__get_battle_object_id_implEPNS_7ArticleE"]
                    pub fn get_battle_object_id(arg1: *mut root::app::Article) -> u64;
                }
            }
            pub mod GimmickEventDrumPos {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45GimmickEventDrumPos__load_from_l2c_table_implEPNS_19GimmickEventDrumPosERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventDrumPos,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41GimmickEventDrumPos__store_l2c_table_implEPKNS_19GimmickEventDrumPosE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventDrumPos,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41GimmickEventDrumPos__store_l2c_table_implEPKNS_19GimmickEventDrumPosERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventDrumPos,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod LinkEventYoshiTamagoDamageEffect {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58LinkEventYoshiTamagoDamageEffect__load_from_l2c_table_implEPNS_32LinkEventYoshiTamagoDamageEffectERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventYoshiTamagoDamageEffect,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54LinkEventYoshiTamagoDamageEffect__store_l2c_table_implEPKNS_32LinkEventYoshiTamagoDamageEffectE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::LinkEventYoshiTamagoDamageEffect,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54LinkEventYoshiTamagoDamageEffect__store_l2c_table_implEPKNS_32LinkEventYoshiTamagoDamageEffectERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventYoshiTamagoDamageEffect,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterPikminLinkEventWeaponPikminSetFloat {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind68FighterPikminLinkEventWeaponPikminSetFloat__load_from_l2c_table_implEPNS_42FighterPikminLinkEventWeaponPikminSetFloatERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterPikminLinkEventWeaponPikminSetFloat,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind64FighterPikminLinkEventWeaponPikminSetFloat__store_l2c_table_implEPKNS_42FighterPikminLinkEventWeaponPikminSetFloatE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminSetFloat,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind64FighterPikminLinkEventWeaponPikminSetFloat__store_l2c_table_implEPKNS_42FighterPikminLinkEventWeaponPikminSetFloatERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminSetFloat,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod ItemInkPaintModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ItemInkPaintModuleImpl__apply_link_ink_paint_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn apply_link_ink_paint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod FighterPitBFinalModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33FighterPitBFinalModule__init_implEPNS_22FighterPitBFinalModuleE"]
                    pub fn init(arg1: *mut root::app::FighterPitBFinalModule) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40FighterPitBFinalModule__get_hit_num_implEPNS_22FighterPitBFinalModuleEh"]
                    pub fn get_hit_num(
                        arg1: *mut root::app::FighterPitBFinalModule,
                        arg2: libc::c_uchar,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46FighterPitBFinalModule__get_hit_object_id_implEPNS_22FighterPitBFinalModuleEhi"]
                    pub fn get_hit_object_id(
                        arg1: *mut root::app::FighterPitBFinalModule,
                        arg2: libc::c_uchar,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42FighterPitBFinalModule__get_hit_group_implEPNS_22FighterPitBFinalModuleEhi"]
                    pub fn get_hit_group(
                        arg1: *mut root::app::FighterPitBFinalModule,
                        arg2: libc::c_uchar,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39FighterPitBFinalModule__get_hit_no_implEPNS_22FighterPitBFinalModuleEhi"]
                    pub fn get_hit_no(
                        arg1: *mut root::app::FighterPitBFinalModule,
                        arg2: libc::c_uchar,
                        arg3: libc::c_int,
                    ) -> u64;
                }
            }
            pub mod BattleObjectWorld {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49BattleObjectWorld__gravity_speed_coefficient_implEPNS_17BattleObjectWorldE"]
                    pub fn gravity_speed_coefficient(
                        arg1: *mut root::app::BattleObjectWorld,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31BattleObjectWorld__scale_z_implEPNS_17BattleObjectWorldE"]
                    pub fn scale_z(arg1: *mut root::app::BattleObjectWorld) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35BattleObjectWorld__gravity_pos_implEPNS_17BattleObjectWorldE"]
                    pub fn gravity_pos(arg1: *mut root::app::BattleObjectWorld) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41BattleObjectWorld__is_gravity_normal_implEPNS_17BattleObjectWorldE"]
                    pub fn is_gravity_normal(arg1: *mut root::app::BattleObjectWorld) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42BattleObjectWorld__is_disable_reverse_implEPNS_17BattleObjectWorldE"]
                    pub fn is_disable_reverse(arg1: *mut root::app::BattleObjectWorld) -> bool;
                }
            }
            pub mod JostleModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29JostleModule__set_status_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_status(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28JostleModule__set_layer_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_layer(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26JostleModule__set_fix_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_fix(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37JostleModule__set_ignore_speed_x_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_ignore_speed_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24JostleModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27JostleModule__is_sleep_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_sleep(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33JostleModule__jostle_speed_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn jostle_speed_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41JostleModule__speed_attenuation_rate_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn speed_attenuation_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32JostleModule__target_weight_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn target_weight(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24JostleModule__pos_z_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn pos_z(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28JostleModule__set_refer_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_refer(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35JostleModule__set_push_speed_x_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_push_speed_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37JostleModule__set_push_speed_x_2_implEPNS_26BattleObjectModuleAccessorEPKfb"]
                    pub fn set_push_speed_x_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31JostleModule__set_priority_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_priority(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27JostleModule__priority_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn priority(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32JostleModule__set_force_gap_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_force_gap(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38JostleModule__set_ignore_owner_id_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_ignore_owner_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34JostleModule__ignore_owner_id_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn ignore_owner_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29JostleModule__reset_area_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_area(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28JostleModule__overlap_x_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn overlap_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33JostleModule__set_ignore_pri_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_ignore_pri(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48JostleModule__set_push_speed_x_overlap_rate_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_push_speed_x_overlap_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28JostleModule__area_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn area_kind(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25JostleModule__weight_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn weight(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29JostleModule__set_weight_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_weight(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48JostleModule__set_influence_opponent_weight_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_influence_opponent_weight(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43JostleModule__set_propagate_push_speed_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_propagate_push_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39JostleModule__set_overlap_rate_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_overlap_rate_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27JostleModule__set_team_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_team(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
            }
            pub mod InkPaintModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24InkPaintModule__ink_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn ink(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28InkPaintModule__ink_max_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn ink_max(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28InkPaintModule__add_ink_implEPNS_26BattleObjectModuleAccessorEfj"]
                    pub fn add_ink(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28InkPaintModule__set_ink_implEPNS_26BattleObjectModuleAccessorEfj"]
                    pub fn set_ink(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30InkPaintModule__reset_ink_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_ink(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34InkPaintModule__get_ink_color_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_ink_color(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38InkPaintModule__set_special_paint_implEPNS_26BattleObjectModuleAccessorENS_16SpecialPaintKindE"]
                    pub fn set_special_paint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::SpecialPaintKind,
                    );
                }
            }
            pub mod CaptureModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29CaptureModule__set_nodes_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_f"]
                    pub fn set_nodes(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                        arg4: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36CaptureModule__is_thrown_finish_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_thrown_finish(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40CaptureModule__set_ignore_object_id_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn set_ignore_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30CaptureModule__is_capture_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_capture(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35CaptureModule__catch_object_id_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn catch_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27CaptureModule__capture_implEPNS_26BattleObjectModuleAccessorEjibi"]
                    pub fn capture(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: libc::c_int,
                        arg4: bool,
                        arg5: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29CaptureModule__capture_2_implEPNS_26BattleObjectModuleAccessorEjiibi"]
                    pub fn capture_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                        arg5: bool,
                        arg6: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37CaptureModule__is_catch_hit_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_catch_hit_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31CaptureModule__node_offset_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn node_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31CaptureModule__catch_pos_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn catch_pos_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31CaptureModule__capture_cut_implEPNS_26BattleObjectModuleAccessorEbbb"]
                    pub fn capture_cut(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32CaptureModule__check_damage_implEPNS_26BattleObjectModuleAccessorEiff"]
                    pub fn check_damage(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39CaptureModule__check_damage_thrown_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn check_damage_thrown(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26CaptureModule__thrown_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn thrown(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29CaptureModule__is_thrown_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_thrown(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37CaptureModule__update_pos_thrown_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_pos_thrown(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36CaptureModule__update_lr_thrown_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_lr_thrown(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30CaptureModule__thrown_cut_implEPNS_26BattleObjectModuleAccessorEbb"]
                    pub fn thrown_cut(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38CaptureModule__set_send_cut_event_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_send_cut_event(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34CaptureModule__set_update_pos_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_update_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31CaptureModule__is_reaction_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_reaction(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33CaptureModule__motion_offset_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn motion_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36CaptureModule__motion_offset_lw_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn motion_offset_lw(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26CaptureModule__motion_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ei"]
                    pub fn motion(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29CaptureModule__motion_lw_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ei"]
                    pub fn motion_lw(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38CaptureModule__motion_offset_lw_2_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn motion_offset_lw_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39CaptureModule__set_ignore_catching_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_ignore_catching(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38CaptureModule__is_ignore_catching_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_ignore_catching(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35CaptureModule__is_motion_hi_lw_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_motion_hi_lw(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38CaptureModule__is_ignore_distance_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_ignore_distance(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32CaptureModule__capture_node_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn capture_node(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43CaptureModule__set_capture_node_offset_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_capture_node_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38CaptureModule__capture_node_value_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn capture_node_value(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35CaptureModule__update_node_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_node_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36CaptureModule__catch_node_pos_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn catch_node_pos_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50CaptureModule__capture_to_catch_node_pos_diff_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn capture_to_catch_node_pos_diff(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod FighterAreaModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterAreaModuleImpl__enable_fix_jostle_area_implEPNS_26BattleObjectModuleAccessorEff"]
                    pub fn enable_fix_jostle_area(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind53FighterAreaModuleImpl__enable_fix_jostle_area_xy_implEPNS_26BattleObjectModuleAccessorEffff"]
                    pub fn enable_fix_jostle_area_xy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: f32,
                        arg5: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51FighterAreaModuleImpl__disable_fix_jostle_area_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn disable_fix_jostle_area(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod GrabModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26GrabModule__clear_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_all(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22GrabModule__clear_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn clear(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31GrabModule__set_constraint_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_constraint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24GrabModule__is_grab_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_grab(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind21GrabModule__size_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25GrabModule__set_size_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22GrabModule__pos_x_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn pos_x(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27GrabModule__center_pos_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn center_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind21GrabModule__node_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn node(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29GrabModule__set_power_up_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_power_up(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29GrabModule__set_size_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_size_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30GrabModule__set_scale_2nd_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_scale_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22GrabModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25GrabModule__relocate_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fE"]
                    pub fn relocate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32GrabModule__set_check_front_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_check_front(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28GrabModule__set_rebound_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_rebound(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27GrabModule__is_rebound_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_rebound(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30GrabModule__check_rebound_implEPNS_26BattleObjectModuleAccessorERKS1_"]
                    pub fn check_rebound(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod FighterBayonettaFinalModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44FighterBayonettaFinalModule__final_init_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_init(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44FighterBayonettaFinalModule__final_exec_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_exec(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44FighterBayonettaFinalModule__final_exit_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_exit(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterBayonettaFinalModule__final_start_init_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_start_init(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterBayonettaFinalModule__final_start_exec_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_start_exec(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterBayonettaFinalModule__final_start_exit_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_start_exit(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterBayonettaFinalModule__final_scene01_init_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_scene01_init(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterBayonettaFinalModule__final_scene01_exec_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_scene01_exec(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterBayonettaFinalModule__final_scene01_exit_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_scene01_exit(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterBayonettaFinalModule__final_end_init_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_end_init(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterBayonettaFinalModule__final_end_exec_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_end_exec(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterBayonettaFinalModule__final_end_exit_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn final_end_exit(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55FighterBayonettaFinalModule__restart_other_fighter_implEPNS_27FighterBayonettaFinalModuleERNS_26BattleObjectModuleAccessorE"]
                    pub fn restart_other_fighter(
                        arg1: *mut root::app::FighterBayonettaFinalModule,
                        arg2: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod ItemParamAccessor {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45ItemParamAccessor__boss_common_param_int_implEPNS_17ItemParamAccessorENS_8ItemKindENS_18BossCommonParamIntE"]
                    pub fn boss_common_param_int(
                        arg1: *mut root::app::ItemParamAccessor,
                        arg2: root::app::ItemKind,
                        arg3: root::app::BossCommonParamInt,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ItemParamAccessor__is_valid_self_param_implEPNS_17ItemParamAccessorENS_8ItemKindEN3phx6Hash40E"]
                    pub fn is_valid_self_param(
                        arg1: *mut root::app::ItemParamAccessor,
                        arg2: root::app::ItemKind,
                        arg3: root::phx::Hash40,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ItemParamAccessor__get_self_param_float_implEPNS_17ItemParamAccessorENS_8ItemKindEN3phx6Hash40E"]
                    pub fn get_self_param_float(
                        arg1: *mut root::app::ItemParamAccessor,
                        arg2: root::app::ItemKind,
                        arg3: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ItemParamAccessor__get_self_param_int_implEPNS_17ItemParamAccessorENS_8ItemKindEN3phx6Hash40E"]
                    pub fn get_self_param_int(
                        arg1: *mut root::app::ItemParamAccessor,
                        arg2: root::app::ItemKind,
                        arg3: root::phx::Hash40,
                    ) -> u64;
                }
            }
            pub mod Item {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24Item__start_inhaled_implEPNS_4ItemE"]
                    pub fn start_inhaled(arg1: *mut root::app::Item) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind21Item__end_hooked_implEPNS_4ItemE"]
                    pub fn end_hooked(arg1: *mut root::app::Item) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31Item__get_battle_object_id_implEPNS_4ItemE"]
                    pub fn get_battle_object_id(arg1: *mut root::app::Item) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind17Item__action_implEPNS_4ItemEif"]
                    pub fn action(
                        arg1: *mut root::app::Item,
                        arg2: libc::c_int,
                        arg3: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31Item__item_module_accessor_implEPNS_4ItemE"]
                    pub fn item_module_accessor(arg1: *mut root::app::Item) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29Item__send_touch_message_implEPNS_4ItemEjRKN3phx8Vector3fEf"]
                    pub fn send_touch_message(
                        arg1: *mut root::app::Item,
                        arg2: libc::c_uint,
                        arg3: *const root::phx::Vector3f,
                        arg4: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29Item__common_param_float_implEPNS_4ItemENS_20ItemCommonParamFloatE"]
                    pub fn common_param_float(
                        arg1: *mut root::app::Item,
                        arg2: root::app::ItemCommonParamFloat,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27Item__common_param_int_implEPNS_4ItemENS_18ItemCommonParamIntE"]
                    pub fn common_param_int(
                        arg1: *mut root::app::Item,
                        arg2: root::app::ItemCommonParamInt,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34Item__specialized_param_float_implEPNS_4ItemENS_25ItemSpecializedParamFloatE"]
                    pub fn specialized_param_float(
                        arg1: *mut root::app::Item,
                        arg2: root::app::ItemSpecializedParamFloat,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32Item__specialized_param_int_implEPNS_4ItemENS_23ItemSpecializedParamIntE"]
                    pub fn specialized_param_int(
                        arg1: *mut root::app::Item,
                        arg2: root::app::ItemSpecializedParamInt,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind19Item__owner_id_implEPNS_4ItemE"]
                    pub fn owner_id(arg1: *mut root::app::Item) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind17Item__is_had_implEPNS_4ItemEb"]
                    pub fn is_had(arg1: *mut root::app::Item, arg2: bool) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind21Item__is_eatable_implEPNS_4ItemEj"]
                    pub fn is_eatable(arg1: *mut root::app::Item, arg2: libc::c_uint) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23Item__throw_attack_implEPNS_4ItemEfRKN3phx8Vector3fEf"]
                    pub fn throw_attack(
                        arg1: *mut root::app::Item,
                        arg2: f32,
                        arg3: *const root::phx::Vector3f,
                        arg4: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind15Item__fall_implEPNS_4ItemEfRKN3phx8Vector3fE"]
                    pub fn fall(
                        arg1: *mut root::app::Item,
                        arg2: f32,
                        arg3: *const root::phx::Vector3f,
                    ) -> u64;
                }
            }
            pub mod FighterPokemonLinkEventChange {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55FighterPokemonLinkEventChange__load_from_l2c_table_implEPNS_29FighterPokemonLinkEventChangeERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterPokemonLinkEventChange,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51FighterPokemonLinkEventChange__store_l2c_table_implEPKNS_29FighterPokemonLinkEventChangeE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterPokemonLinkEventChange,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51FighterPokemonLinkEventChange__store_l2c_table_implEPKNS_29FighterPokemonLinkEventChangeERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterPokemonLinkEventChange,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod ReflectorModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ReflectorModule__clean_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clean(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ReflectorModule__is_shield_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn is_shield(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ReflectorModule__set_size_implEPNS_26BattleObjectModuleAccessorEifi"]
                    pub fn set_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ReflectorModule__set_status_implEPNS_26BattleObjectModuleAccessorEiNS_12ShieldStatusEi"]
                    pub fn set_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::ShieldStatus,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ReflectorModule__set_status_all_implEPNS_26BattleObjectModuleAccessorENS_12ShieldStatusEi"]
                    pub fn set_status_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ShieldStatus,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ReflectorModule__is_turn_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_turn(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ReflectorModule__is_front_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_front(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ReflectorModule__is_hop_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_hop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ReflectorModule__get_hop_angle_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_hop_angle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ReflectorModule__is_no_hop_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_no_hop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ReflectorModule__set_turn_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_turn(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ReflectorModule__set_front_implEPNS_26BattleObjectModuleAccessorENS_11ShieldFrontEi"]
                    pub fn set_front(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ShieldFront,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ReflectorModule__set_hop_implEPNS_26BattleObjectModuleAccessorEbfi"]
                    pub fn set_hop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ReflectorModule__set_attack_mul_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_attack_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ReflectorModule__get_attack_mul_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_attack_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ReflectorModule__set_speed_mul_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_speed_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ReflectorModule__get_speed_mul_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_speed_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ReflectorModule__set_life_mul_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_life_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ReflectorModule__get_life_mul_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_life_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ReflectorModule__set_attack_limit_implEPNS_26BattleObjectModuleAccessorEfi"]
                    pub fn set_attack_limit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ReflectorModule__get_attack_limit_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_attack_limit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ReflectorModule__set_hit_stop_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_hit_stop_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ReflectorModule__is_no_m_ball_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_no_m_ball(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ReflectorModule__get_part_size_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_part_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ReflectorModule__get_team_no_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_team_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ReflectorModule__set_no_team_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_team(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ReflectorModule__set_shield_type_implEPNS_26BattleObjectModuleAccessorENS_10ShieldTypeEii"]
                    pub fn set_shield_type(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ShieldType,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ReflectorModule__clear_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_all(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ReflectorModule__clear_all_2_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn clear_all_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ReflectorModule__get_center_pos_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_center_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ReflectorModule__get_lr_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ReflectorModule__get_group_num_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_group_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ReflectorModule__get_pos_x_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_pos_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ReflectorModule__set_target_property_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_target_property(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ReflectorModule__set_target_category_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_target_category(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ReflectorModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
            }
            pub mod SearchModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28SearchModule__clear_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_all(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24SearchModule__clear_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn clear(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29SearchModule__set_offset_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fE"]
                    pub fn set_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34SearchModule__active_part_num_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn active_part_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28SearchModule__is_search_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_search(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27SearchModule__get_size_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27SearchModule__set_size_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38SearchModule__set_target_opponent_implEPNS_26BattleObjectModuleAccessorEiiij"]
                    pub fn set_target_opponent(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                        arg5: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26SearchModule__set_pos_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fES6_"]
                    pub fn set_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                        arg4: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29SearchModule__is_inflict_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_inflict(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37SearchModule__set_check_interval_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_check_interval(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40SearchModule__set_remove_log_attack_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_remove_log_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36SearchModule__remove_log_attack_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn remove_log_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24SearchModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27SearchModule__relocate_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fE"]
                    pub fn relocate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38SearchModule__invalid_attack_mask_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn invalid_attack_mask(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42SearchModule__set_invalid_attack_mask_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn set_invalid_attack_mask(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37SearchModule__set_sync_situation_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_sync_situation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30SearchModule__set_sync_lr_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_sync_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28SearchModule__situation_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn situation(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34SearchModule__enable_safe_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn enable_safe_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod PhysicsModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31PhysicsModule__reset_swing_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_swing(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39PhysicsModule__set_swing_only_anim_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_swing_only_anim(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40PhysicsModule__set_swing_joint_name_implEPNS_26BattleObjectModuleAccessorEbN3phx6Hash40Eb"]
                    pub fn set_swing_joint_name(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: root::phx::Hash40,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34PhysicsModule__set_swing_rate_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_swing_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37PhysicsModule__set_swing_rebirth_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_swing_rebirth(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35PhysicsModule__set_2nd_gravity_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_2nd_gravity(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34PhysicsModule__set_2nd_status_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_2nd_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34PhysicsModule__get_2nd_status_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_2nd_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35PhysicsModule__set_2nd_end_pos_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fES6_"]
                    pub fn set_2nd_end_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39PhysicsModule__get_2nd_line_length_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_2nd_line_length(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43PhysicsModule__set_2nd_line_length_all_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_2nd_line_length_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36PhysicsModule__get_2nd_node_num_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_2nd_node_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43PhysicsModule__get_2nd_active_node_num_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_2nd_active_node_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41PhysicsModule__get_2nd_active_length_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_2nd_active_length(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43PhysicsModule__set_2nd_active_node_num_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_2nd_active_node_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34PhysicsModule__is_2nd_precede_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_2nd_precede(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35PhysicsModule__set_2nd_precede_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_2nd_precede(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31PhysicsModule__is_2nd_flip_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_2nd_flip(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32PhysicsModule__set_2nd_flip_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_2nd_flip(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38PhysicsModule__set_2nd_back_speed_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_2nd_back_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26PhysicsModule__set_ik_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_ik(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37PhysicsModule__set_ik_target_pos_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fES6_"]
                    pub fn set_ik_target_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                        arg4: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37PhysicsModule__set_ik_target_dir_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fES6_"]
                    pub fn set_ik_target_dir(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                        arg4: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39PhysicsModule__get_ik_end_joint_id_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_ik_end_joint_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31PhysicsModule__stop_charge_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn stop_charge(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42PhysicsModule__set_2nd_air_resistance_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_2nd_air_resistance(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44PhysicsModule__set_2nd_air_resistance_2_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_2nd_air_resistance_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44PhysicsModule__set_2nd_water_resistance_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_2nd_water_resistance(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35PhysicsModule__get_2nd_tension_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_2nd_tension(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37PhysicsModule__get_2nd_joint_num_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_2nd_joint_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36PhysicsModule__get_2nd_joint_id_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_2nd_joint_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42PhysicsModule__set_2nd_collision_size_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_2nd_collision_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32PhysicsModule__set_2nd_mass_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_2nd_mass(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45PhysicsModule__set_2nd_disable_collision_implEPNS_26BattleObjectModuleAccessorEjb"]
                    pub fn set_2nd_disable_collision(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36PhysicsModule__set_2nd_fix_flag_implEPNS_26BattleObjectModuleAccessorEjb"]
                    pub fn set_2nd_fix_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42PhysicsModule__set_reflect_param_wall_implEPNS_26BattleObjectModuleAccessorEfff"]
                    pub fn set_reflect_param_wall(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42PhysicsModule__set_reflect_param_ceil_implEPNS_26BattleObjectModuleAccessorEfff"]
                    pub fn set_reflect_param_ceil(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43PhysicsModule__set_reflect_param_floor_implEPNS_26BattleObjectModuleAccessorEfff"]
                    pub fn set_reflect_param_floor(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34PhysicsModule__set_2nd_length_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_2nd_length(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31PhysicsModule__get_2nd_pos_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_2nd_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31PhysicsModule__set_2nd_pos_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fE"]
                    pub fn set_2nd_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33PhysicsModule__get_2nd_speed_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_2nd_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33PhysicsModule__set_2nd_speed_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fE"]
                    pub fn set_2nd_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40PhysicsModule__set_2nd_node_num_max_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_2nd_node_num_max(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35PhysicsModule__clear_2nd_speed_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_2nd_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44PhysicsModule__set_2nd_collision_object_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_2nd_collision_object(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40PhysicsModule__set_2nd_sync_gravity_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_2nd_sync_gravity(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45PhysicsModule__set_2nd_restitution_range_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_2nd_restitution_range(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44PhysicsModule__set_2nd_restitution_rate_implEPNS_26BattleObjectModuleAccessorEff"]
                    pub fn set_2nd_restitution_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46PhysicsModule__set_2nd_restitution_rate_2_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_2nd_restitution_rate_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41PhysicsModule__set_2nd_friction_rate_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_2nd_friction_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41PhysicsModule__set_2nd_fixed_tip_num_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_2nd_fixed_tip_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35PhysicsModule__set_2nd_z_range_implEPNS_26BattleObjectModuleAccessorEff"]
                    pub fn set_2nd_z_range(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49PhysicsModule__get_2nd_touch_ground_line_num_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_2nd_touch_ground_line_num(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51PhysicsModule__set_enable_floor_collision_line_implEPNS_26BattleObjectModuleAccessorEPNS_19GroundCollisionLineE"]
                    pub fn set_enable_floor_collision_line(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::app::GroundCollisionLine,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50PhysicsModule__set_swing_ground_collision_all_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_swing_ground_collision_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43PhysicsModule__set_swing_special_state_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_swing_special_state(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
            }
            pub mod SlowModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24SlowModule__is_slow_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_slow(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind20SlowModule__set_implEPNS_26BattleObjectModuleAccessorEiiibj"]
                    pub fn set(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                        arg5: bool,
                        arg6: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind20SlowModule__mag_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn mag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35SlowModule__rate_ignore_effect_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn rate_ignore_effect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22SlowModule__frame_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22SlowModule__clear_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24SlowModule__clear_2_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn clear_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind21SlowModule__rate_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn rate(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24SlowModule__is_skip_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_skip(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29SlowModule__is_prev_skip_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_prev_skip(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26SlowModule__set_whole_implEPNS_26BattleObjectModuleAccessorEhi"]
                    pub fn set_whole(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28SlowModule__clear_whole_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_whole(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26SlowModule__whole_mag_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn whole_mag(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32SlowModule__set_whole_frame_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_whole_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28SlowModule__whole_frame_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn whole_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod CameraModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28CameraModule__reset_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_all(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31CameraModule__update_force_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fES6_"]
                    pub fn update_force(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                        arg4: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36CameraModule__set_enable_camera_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_enable_camera(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28CameraModule__set_whole_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_whole(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40CameraModule__set_enable_update_pos_implEPNS_26BattleObjectModuleAccessorEhi"]
                    pub fn set_enable_update_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45CameraModule__set_enable_interpolate_pos_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_enable_interpolate_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37CameraModule__reset_camera_range_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn reset_camera_range(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42CameraModule__set_camera_range_offset_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEi"]
                    pub fn set_camera_range_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42CameraModule__add_camera_range_offset_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEi"]
                    pub fn add_camera_range_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40CameraModule__add_camera_range_rect_implEPNS_26BattleObjectModuleAccessorERKN3lib4RectEi"]
                    pub fn add_camera_range_rect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::lib::Rect,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35CameraModule__un_regist_camera_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn un_regist_camera(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26CameraModule__zoom_in_implEPNS_26BattleObjectModuleAccessorEiifRKN3phx8Vector2fEb"]
                    pub fn zoom_in(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: f32,
                        arg5: *const root::phx::Vector2f,
                        arg6: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27CameraModule__zoom_out_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn zoom_out(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29CameraModule__set_status_implEPNS_26BattleObjectModuleAccessorENS_12CameraStatusEi"]
                    pub fn set_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::CameraStatus,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31CameraModule__set_priority_implEPNS_26BattleObjectModuleAccessorEhi"]
                    pub fn set_priority(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31CameraModule__get_priority_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_priority(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32CameraModule__set_player_no_implEPNS_26BattleObjectModuleAccessorEhi"]
                    pub fn set_player_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32CameraModule__get_player_no_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_player_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33CameraModule__set_damage_fly_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_damage_fly(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34CameraModule__exit_damage_fly_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn exit_damage_fly(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26CameraModule__set_run_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_run(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27CameraModule__exit_run_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn exit_run(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36CameraModule__set_being_carried_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_being_carried(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37CameraModule__exit_being_carried_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn exit_being_carried(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29CameraModule__is_clip_in_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn is_clip_in(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33CameraModule__is_clip_in_all_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn is_clip_in_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47CameraModule__set_camera_range_global_rect_implEPNS_26BattleObjectModuleAccessorERKN3lib4RectEi"]
                    pub fn set_camera_range_global_rect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::lib::Rect,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45CameraModule__get_main_camera_target_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_main_camera_target_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40CameraModule__get_main_camera_range_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_main_camera_range(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49CameraModule__get_internal_camera_target_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_internal_camera_target_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34CameraModule__get_camera_type_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_camera_type(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43CameraModule__get_camera_type_for_save_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_camera_type_for_save(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34CameraModule__set_camera_type_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_camera_type(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28CameraModule__req_quake_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn req_quake(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32CameraModule__req_quake_pos_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fE"]
                    pub fn req_quake_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29CameraModule__stop_quake_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn stop_quake(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32CameraModule__get_quakeKind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_quakeKind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39CameraModule__start_final_zoom_out_implEPNS_26BattleObjectModuleAccessorEiRKN3lib4RectERKN3phx8Vector3fE"]
                    pub fn start_final_zoom_out(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::lib::Rect,
                        arg4: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37CameraModule__end_final_zoom_out_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn end_final_zoom_out(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49CameraModule__get_camera_view_volume_z0_rect_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_camera_view_volume_z0_rect(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40CameraModule__reset_main_camera_fov_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_main_camera_fov(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod FighterPikminLinkEventWeaponPikminConstraint {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind70FighterPikminLinkEventWeaponPikminConstraint__load_from_l2c_table_implEPNS_44FighterPikminLinkEventWeaponPikminConstraintERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterPikminLinkEventWeaponPikminConstraint,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind66FighterPikminLinkEventWeaponPikminConstraint__store_l2c_table_implEPKNS_44FighterPikminLinkEventWeaponPikminConstraintE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminConstraint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind66FighterPikminLinkEventWeaponPikminConstraint__store_l2c_table_implEPKNS_44FighterPikminLinkEventWeaponPikminConstraintERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminConstraint,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod KineticEnergyNormal {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35KineticEnergyNormal__get_accel_implEPNS_19KineticEnergyNormalE"]
                    pub fn get_accel(arg1: *mut root::app::KineticEnergyNormal) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42KineticEnergyNormal__get_stable_speed_implEPNS_19KineticEnergyNormalE"]
                    pub fn get_stable_speed(arg1: *mut root::app::KineticEnergyNormal)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35KineticEnergyNormal__get_brake_implEPNS_19KineticEnergyNormalE"]
                    pub fn get_brake(arg1: *mut root::app::KineticEnergyNormal) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41KineticEnergyNormal__get_limit_speed_implEPNS_19KineticEnergyNormalE"]
                    pub fn get_limit_speed(arg1: *mut root::app::KineticEnergyNormal) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35KineticEnergyNormal__set_speed_implEPNS_19KineticEnergyNormalERKN3phx8Vector2fE"]
                    pub fn set_speed(
                        arg1: *mut root::app::KineticEnergyNormal,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38KineticEnergyNormal__set_speed_3d_implEPNS_19KineticEnergyNormalERKN3phx8Vector3fE"]
                    pub fn set_speed_3d(
                        arg1: *mut root::app::KineticEnergyNormal,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35KineticEnergyNormal__set_accel_implEPNS_19KineticEnergyNormalERKN3phx8Vector2fE"]
                    pub fn set_accel(
                        arg1: *mut root::app::KineticEnergyNormal,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42KineticEnergyNormal__set_stable_speed_implEPNS_19KineticEnergyNormalERKN3phx8Vector2fE"]
                    pub fn set_stable_speed(
                        arg1: *mut root::app::KineticEnergyNormal,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35KineticEnergyNormal__set_brake_implEPNS_19KineticEnergyNormalERKN3phx8Vector2fE"]
                    pub fn set_brake(
                        arg1: *mut root::app::KineticEnergyNormal,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41KineticEnergyNormal__set_limit_speed_implEPNS_19KineticEnergyNormalERKN3phx8Vector2fE"]
                    pub fn set_limit_speed(
                        arg1: *mut root::app::KineticEnergyNormal,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51KineticEnergyNormal__on_consider_ground_normal_implEPNS_19KineticEnergyNormalE"]
                    pub fn on_consider_ground_normal(
                        arg1: *mut root::app::KineticEnergyNormal,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52KineticEnergyNormal__off_consider_ground_normal_implEPNS_19KineticEnergyNormalE"]
                    pub fn off_consider_ground_normal(
                        arg1: *mut root::app::KineticEnergyNormal,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51KineticEnergyNormal__is_consider_ground_normal_implEPNS_19KineticEnergyNormalE"]
                    pub fn is_consider_ground_normal(
                        arg1: *mut root::app::KineticEnergyNormal,
                    ) -> bool;
                }
            }
            pub mod KineticEnergy {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29KineticEnergy__get_speed_implEPNS_13KineticEnergyE"]
                    pub fn get_speed(arg1: *mut root::app::KineticEnergy) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31KineticEnergy__get_speed_x_implEPNS_13KineticEnergyE"]
                    pub fn get_speed_x(arg1: *mut root::app::KineticEnergy) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31KineticEnergy__get_speed_y_implEPNS_13KineticEnergyE"]
                    pub fn get_speed_y(arg1: *mut root::app::KineticEnergy) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31KineticEnergy__get_speed3f_implEPNS_13KineticEnergyE"]
                    pub fn get_speed3f(arg1: *mut root::app::KineticEnergy) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32KineticEnergy__get_rotation_implEPNS_13KineticEnergyE"]
                    pub fn get_rotation(arg1: *mut root::app::KineticEnergy) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32KineticEnergy__reset_energy_implEPNS_13KineticEnergyEiRKN3phx8Vector2fERKNS3_8Vector3fERNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_energy(
                        arg1: *mut root::app::KineticEnergy,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector2f,
                        arg4: *const root::phx::Vector3f,
                        arg5: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31KineticEnergy__clear_speed_implEPNS_13KineticEnergyE"]
                    pub fn clear_speed(arg1: *mut root::app::KineticEnergy) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35KineticEnergy__clear_rot_speed_implEPNS_13KineticEnergyE"]
                    pub fn clear_rot_speed(arg1: *mut root::app::KineticEnergy) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29KineticEnergy__mul_speed_implEPNS_13KineticEnergyERKN3phx8Vector3fE"]
                    pub fn mul_speed(
                        arg1: *mut root::app::KineticEnergy,
                        arg2: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29KineticEnergy__mul_accel_implEPNS_13KineticEnergyERKN3phx8Vector3fE"]
                    pub fn mul_accel(
                        arg1: *mut root::app::KineticEnergy,
                        arg2: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33KineticEnergy__reflect_speed_implEPNS_13KineticEnergyERKN3phx8Vector3fE"]
                    pub fn reflect_speed(
                        arg1: *mut root::app::KineticEnergy,
                        arg2: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33KineticEnergy__reflect_accel_implEPNS_13KineticEnergyERKN3phx8Vector3fE"]
                    pub fn reflect_accel(
                        arg1: *mut root::app::KineticEnergy,
                        arg2: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47KineticEnergy__on_consider_ground_friction_implEPNS_13KineticEnergyE"]
                    pub fn on_consider_ground_friction(
                        arg1: *mut root::app::KineticEnergy,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48KineticEnergy__off_consider_ground_friction_implEPNS_13KineticEnergyE"]
                    pub fn off_consider_ground_friction(
                        arg1: *mut root::app::KineticEnergy,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26KineticEnergy__enable_implEPNS_13KineticEnergyE"]
                    pub fn enable(arg1: *mut root::app::KineticEnergy) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26KineticEnergy__unable_implEPNS_13KineticEnergyE"]
                    pub fn unable(arg1: *mut root::app::KineticEnergy) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29KineticEnergy__is_enable_implEPNS_13KineticEnergyE"]
                    pub fn is_enable(arg1: *mut root::app::KineticEnergy) -> bool;
                }
            }
            pub mod FighterParamAccessor2 {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41FighterParamAccessor2__thrown_offset_implEPNS_21FighterParamAccessor2Eiii"]
                    pub fn thrown_offset(
                        arg1: *mut root::app::FighterParamAccessor2,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterParamAccessor2__donkey_thrown_offset_implEPNS_21FighterParamAccessor2Eii"]
                    pub fn donkey_thrown_offset(
                        arg1: *mut root::app::FighterParamAccessor2,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49FighterParamAccessor2__ridley_dragged_offset_implEPNS_21FighterParamAccessor2Eii"]
                    pub fn ridley_dragged_offset(
                        arg1: *mut root::app::FighterParamAccessor2,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterParamAccessor2__diddy_special_s_offset_implEPNS_21FighterParamAccessor2Ei"]
                    pub fn diddy_special_s_offset(
                        arg1: *mut root::app::FighterParamAccessor2,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterParamAccessor2__miifighter_suplex_offset_implEPNS_21FighterParamAccessor2Ei"]
                    pub fn miifighter_suplex_offset(
                        arg1: *mut root::app::FighterParamAccessor2,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterParamAccessor2__gaogaen_final_offset_implEPNS_21FighterParamAccessor2Eii"]
                    pub fn gaogaen_final_offset(
                        arg1: *mut root::app::FighterParamAccessor2,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41FighterParamAccessor2__hit_target_no_implEPNS_21FighterParamAccessor2Eii"]
                    pub fn hit_target_no(
                        arg1: *mut root::app::FighterParamAccessor2,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
            }
            pub mod ReflectModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ReflectModule__reset_info_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_info(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ReflectModule__object_id_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn object_id(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ReflectModule__set_object_id_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn set_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ReflectModule__team_no_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn team_no(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ReflectModule__set_team_no_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_team_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ReflectModule__attack_mul_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn attack_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ReflectModule__set_attack_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_attack_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ReflectModule__speed_mul_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn speed_mul(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ReflectModule__set_speed_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_speed_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ReflectModule__life_mul_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn life_mul(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ReflectModule__set_life_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_life_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ReflectModule__is_reflect_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_reflect(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ReflectModule__set_no_speed_mul_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_speed_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ReflectModule__is_count_max_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_count_max(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25ReflectModule__count_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn count(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ReflectModule__get_reverse_lr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_reverse_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ReflectModule__set_collision_no_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_collision_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
            }
            pub mod GimmickEventNotify {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44GimmickEventNotify__load_from_l2c_table_implEPNS_18GimmickEventNotifyERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventNotify,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GimmickEventNotify__store_l2c_table_implEPKNS_18GimmickEventNotifyE"]
                    pub fn store_l2c_table(arg1: *const root::app::GimmickEventNotify)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GimmickEventNotify__store_l2c_table_implEPKNS_18GimmickEventNotifyERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventNotify,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterPikminLinkEventWeaponPikminSetPowerMulStatus {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind77FighterPikminLinkEventWeaponPikminSetPowerMulStatus__load_from_l2c_table_implEPNS_51FighterPikminLinkEventWeaponPikminSetPowerMulStatusERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterPikminLinkEventWeaponPikminSetPowerMulStatus,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind73FighterPikminLinkEventWeaponPikminSetPowerMulStatus__store_l2c_table_implEPKNS_51FighterPikminLinkEventWeaponPikminSetPowerMulStatusE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminSetPowerMulStatus,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind73FighterPikminLinkEventWeaponPikminSetPowerMulStatus__store_l2c_table_implEPKNS_51FighterPikminLinkEventWeaponPikminSetPowerMulStatusERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminSetPowerMulStatus,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod WeaponKineticEnergyGravity {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42WeaponKineticEnergyGravity__set_accel_implEPNS_26WeaponKineticEnergyGravityEf"]
                    pub fn set_accel(arg1: *mut root::app::WeaponKineticEnergyGravity, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42WeaponKineticEnergyGravity__set_speed_implEPNS_26WeaponKineticEnergyGravityEf"]
                    pub fn set_speed(arg1: *mut root::app::WeaponKineticEnergyGravity, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48WeaponKineticEnergyGravity__get_limit_speed_implEPNS_26WeaponKineticEnergyGravityE"]
                    pub fn get_limit_speed(
                        arg1: *mut root::app::WeaponKineticEnergyGravity,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48WeaponKineticEnergyGravity__set_limit_speed_implEPNS_26WeaponKineticEnergyGravityEf"]
                    pub fn set_limit_speed(
                        arg1: *mut root::app::WeaponKineticEnergyGravity,
                        arg2: f32,
                    );
                }
            }
            pub mod WeaponShizueFishingrodLinkEventCliff {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind62WeaponShizueFishingrodLinkEventCliff__load_from_l2c_table_implEPNS_36WeaponShizueFishingrodLinkEventCliffERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::WeaponShizueFishingrodLinkEventCliff,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58WeaponShizueFishingrodLinkEventCliff__store_l2c_table_implEPKNS_36WeaponShizueFishingrodLinkEventCliffE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::WeaponShizueFishingrodLinkEventCliff,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58WeaponShizueFishingrodLinkEventCliff__store_l2c_table_implEPKNS_36WeaponShizueFishingrodLinkEventCliffERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::WeaponShizueFishingrodLinkEventCliff,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod LinkEventFinal {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkEventFinal__load_from_l2c_table_implEPNS_14LinkEventFinalERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventFinal,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36LinkEventFinal__store_l2c_table_implEPKNS_14LinkEventFinalE"]
                    pub fn store_l2c_table(arg1: *const root::app::LinkEventFinal) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36LinkEventFinal__store_l2c_table_implEPKNS_14LinkEventFinalERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventFinal,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod LinkEvent {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkEvent__load_from_l2c_table_implEPNS_9LinkEventERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEvent,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31LinkEvent__store_l2c_table_implEPKNS_9LinkEventE"]
                    pub fn store_l2c_table(arg1: *const root::app::LinkEvent) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31LinkEvent__store_l2c_table_implEPKNS_9LinkEventERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEvent,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod LinkEventCaptureMimikkyu {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50LinkEventCaptureMimikkyu__load_from_l2c_table_implEPNS_24LinkEventCaptureMimikkyuERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventCaptureMimikkyu,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46LinkEventCaptureMimikkyu__store_l2c_table_implEPKNS_24LinkEventCaptureMimikkyuE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::LinkEventCaptureMimikkyu,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46LinkEventCaptureMimikkyu__store_l2c_table_implEPKNS_24LinkEventCaptureMimikkyuERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventCaptureMimikkyu,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod LinkEventCapture {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkEventCapture__load_from_l2c_table_implEPNS_16LinkEventCaptureERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventCapture,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38LinkEventCapture__store_l2c_table_implEPKNS_16LinkEventCaptureE"]
                    pub fn store_l2c_table(arg1: *const root::app::LinkEventCapture) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38LinkEventCapture__store_l2c_table_implEPKNS_16LinkEventCaptureERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventCapture,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventDrumEscape {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48GimmickEventDrumEscape__load_from_l2c_table_implEPNS_22GimmickEventDrumEscapeERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventDrumEscape,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44GimmickEventDrumEscape__store_l2c_table_implEPKNS_22GimmickEventDrumEscapeE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventDrumEscape,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44GimmickEventDrumEscape__store_l2c_table_implEPKNS_22GimmickEventDrumEscapeERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventDrumEscape,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventPos {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41GimmickEventPos__load_from_l2c_table_implEPNS_15GimmickEventPosERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventPos,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GimmickEventPos__store_l2c_table_implEPKNS_15GimmickEventPosE"]
                    pub fn store_l2c_table(arg1: *const root::app::GimmickEventPos) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37GimmickEventPos__store_l2c_table_implEPKNS_15GimmickEventPosERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventPos,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventTornadoEscape {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51GimmickEventTornadoEscape__load_from_l2c_table_implEPNS_25GimmickEventTornadoEscapeERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventTornadoEscape,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47GimmickEventTornadoEscape__store_l2c_table_implEPKNS_25GimmickEventTornadoEscapeE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventTornadoEscape,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47GimmickEventTornadoEscape__store_l2c_table_implEPKNS_25GimmickEventTornadoEscapeERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventTornadoEscape,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterKineticEnergyGravity {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43FighterKineticEnergyGravity__set_accel_implEPNS_27FighterKineticEnergyGravityEf"]
                    pub fn set_accel(arg1: *mut root::app::FighterKineticEnergyGravity, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43FighterKineticEnergyGravity__set_speed_implEPNS_27FighterKineticEnergyGravityEf"]
                    pub fn set_speed(arg1: *mut root::app::FighterKineticEnergyGravity, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterKineticEnergyGravity__set_stable_speed_implEPNS_27FighterKineticEnergyGravityEf"]
                    pub fn set_stable_speed(
                        arg1: *mut root::app::FighterKineticEnergyGravity,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49FighterKineticEnergyGravity__set_limit_speed_implEPNS_27FighterKineticEnergyGravityEf"]
                    pub fn set_limit_speed(
                        arg1: *mut root::app::FighterKineticEnergyGravity,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43FighterKineticEnergyGravity__set_brake_implEPNS_27FighterKineticEnergyGravityEf"]
                    pub fn set_brake(arg1: *mut root::app::FighterKineticEnergyGravity, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43FighterKineticEnergyGravity__get_accel_implEPNS_27FighterKineticEnergyGravityE"]
                    pub fn get_accel(
                        arg1: *mut root::app::FighterKineticEnergyGravity,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterKineticEnergyGravity__get_stable_speed_implEPNS_27FighterKineticEnergyGravityE"]
                    pub fn get_stable_speed(
                        arg1: *mut root::app::FighterKineticEnergyGravity,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49FighterKineticEnergyGravity__get_limit_speed_implEPNS_27FighterKineticEnergyGravityE"]
                    pub fn get_limit_speed(
                        arg1: *mut root::app::FighterKineticEnergyGravity,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43FighterKineticEnergyGravity__get_brake_implEPNS_27FighterKineticEnergyGravityE"]
                    pub fn get_brake(
                        arg1: *mut root::app::FighterKineticEnergyGravity,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57FighterKineticEnergyGravity__set_gravity_coefficient_implEPNS_27FighterKineticEnergyGravityEf"]
                    pub fn set_gravity_coefficient(
                        arg1: *mut root::app::FighterKineticEnergyGravity,
                        arg2: f32,
                    );
                }
            }
            pub mod ItemManager {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ItemManager__get_num_of_ownered_item_implEPNS_11ItemManagerEjNS_8ItemKindE"]
                    pub fn get_num_of_ownered_item(
                        arg1: *mut root::app::ItemManager,
                        arg2: libc::c_uint,
                        arg3: root::app::ItemKind,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ItemManager__get_num_of_active_item_all_implEPNS_11ItemManagerE"]
                    pub fn get_num_of_active_item_all(
                        arg1: *mut root::app::ItemManager,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ItemManager__get_active_item_implEPNS_11ItemManagerEm"]
                    pub fn get_active_item(
                        arg1: *mut root::app::ItemManager,
                        arg2: libc::c_ulong,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ItemManager__find_active_item_from_id_implEPNS_11ItemManagerEj"]
                    pub fn find_active_item_from_id(
                        arg1: *mut root::app::ItemManager,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47ItemManager__find_active_item_from_area_id_implEPNS_11ItemManagerEj"]
                    pub fn find_active_item_from_area_id(
                        arg1: *mut root::app::ItemManager,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ItemManager__remove_item_from_id_implEPNS_11ItemManagerEj"]
                    pub fn remove_item_from_id(
                        arg1: *mut root::app::ItemManager,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52ItemManager__is_change_fighter_restart_position_implEPNS_11ItemManagerE"]
                    pub fn is_change_fighter_restart_position(
                        arg1: *mut root::app::ItemManager,
                    ) -> bool;
                }
            }
            pub mod AreaModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29AreaModule__force_update_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn force_update(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38AreaModule__set_auto_layer_update_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_auto_layer_update(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22AreaModule__clean_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clean(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26AreaModule__set_layer_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_layer(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22AreaModule__layer_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn layer(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26AreaModule__set_whole_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_whole(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26AreaModule__get_whole_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_whole(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26AreaModule__get_group_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35AreaModule__area_instance_size_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn area_instance_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AreaModule__enable_area_implEPNS_26BattleObjectModuleAccessorEibi"]
                    pub fn enable_area(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31AreaModule__is_enable_area_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_enable_area(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27AreaModule__reset_area_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn reset_area(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43AreaModule__set_area_target_group_mask_implEPNS_26BattleObjectModuleAccessorEij"]
                    pub fn set_area_target_group_mask(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49AreaModule__set_area_target_local_group_mask_implEPNS_26BattleObjectModuleAccessorEij"]
                    pub fn set_area_target_local_group_mask(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AreaModule__set_area_shape_aabb_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector2fES6_"]
                    pub fn set_area_shape_aabb(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector2f,
                        arg4: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38AreaModule__set_area_shape_circle_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector2fEf"]
                    pub fn set_area_shape_circle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector2f,
                        arg4: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AreaModule__set_area_shape_type_implEPNS_26BattleObjectModuleAccessorEih"]
                    pub fn set_area_shape_type(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uchar,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30AreaModule__set_center_x0_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_center_x0(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28AreaModule__get_area_id_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_area_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AreaModule__is_exist_area_instance_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_exist_area_instance(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AreaModule__get_area_index_from_id_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn get_area_index_from_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39AreaModule__get_area_contact_count_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_area_contact_count(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37AreaModule__get_area_contact_log_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_area_contact_log(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43AreaModule__get_area_contact_target_id_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_area_contact_target_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27AreaModule__erase_wind_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn erase_wind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AreaModule__add_wind_area_2nd_implEPNS_26BattleObjectModuleAccessorEiffffRKN3phx8Vector2fES6_i"]
                    pub fn add_wind_area_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: f32,
                        arg5: f32,
                        arg6: f32,
                        arg7: *const root::phx::Vector2f,
                        arg8: *const root::phx::Vector2f,
                        arg9: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38AreaModule__add_wind_area_2nd_rad_implEPNS_26BattleObjectModuleAccessorEiffffRKN3phx8Vector2fEfi"]
                    pub fn add_wind_area_2nd_rad(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: f32,
                        arg5: f32,
                        arg6: f32,
                        arg7: *const root::phx::Vector2f,
                        arg8: f32,
                        arg9: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind22AreaModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25AreaModule__is_sleep_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_sleep(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25AreaModule__is_water_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_water(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34AreaModule__get_water_task_id_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_water_task_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AreaModule__get_water_surface_y_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_water_surface_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27AreaModule__test_water_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fERf"]
                    pub fn test_water(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: *mut f32,
                    ) -> u64;
                }
            }
            pub mod ItemCameraModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47ItemCameraModuleImpl__start_camera_subject_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn start_camera_subject(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45ItemCameraModuleImpl__end_camera_subject_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn end_camera_subject(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58ItemCameraModuleImpl__set_camera_subject_pos_4_points_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector4fE"]
                    pub fn set_camera_subject_pos_4_points(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector4f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51ItemCameraModuleImpl__clamp_camera_subject_pos_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector4fE"]
                    pub fn clamp_camera_subject_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector4f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52ItemCameraModuleImpl__set_camera_subject_enable_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_camera_subject_enable(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ItemCameraModuleImpl__set_camera_subject_pos_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fE"]
                    pub fn set_camera_subject_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ItemCameraModuleImpl__get_camera_subject_pos_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_camera_subject_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51ItemCameraModuleImpl__set_camera_subject_range_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector4fE"]
                    pub fn set_camera_subject_range(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector4f,
                    );
                }
            }
            pub mod ItemDamageModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ItemDamageModuleImpl__is_smash_damage_implEPNS_26BattleObjectModuleAccessorEff"]
                    pub fn is_smash_damage(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ItemDamageModuleImpl__damage_log_value_float_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn damage_log_value_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47ItemDamageModuleImpl__damage_log_value_int_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn damage_log_value_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
            }
            pub mod FighterManager {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32FighterManager__entry_count_implEPNS_14FighterManagerE"]
                    pub fn entry_count(arg1: *mut root::app::FighterManager) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38FighterManager__total_fighter_num_implEPNS_14FighterManagerE"]
                    pub fn total_fighter_num(arg1: *mut root::app::FighterManager) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33FighterManager__get_entry_id_implEPNS_14FighterManagerEi"]
                    pub fn get_entry_id(
                        arg1: *mut root::app::FighterManager,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33FighterManager__get_entry_no_implEPNS_14FighterManagerENS_14FighterEntryIDE"]
                    pub fn get_entry_no(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::app::FighterEntryID,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38FighterManager__get_fighter_entry_implEPNS_14FighterManagerENS_14FighterEntryIDE"]
                    pub fn get_fighter_entry(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::app::FighterEntryID,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44FighterManager__get_fighter_information_implEPNS_14FighterManagerENS_14FighterEntryIDE"]
                    pub fn get_fighter_information(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::app::FighterEntryID,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42FighterManager__is_melee_mode_homerun_implEPNS_14FighterManagerE"]
                    pub fn is_melee_mode_homerun(arg1: *mut root::app::FighterManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38FighterManager__is_homerun_versus_implEPNS_14FighterManagerE"]
                    pub fn is_homerun_versus(arg1: *mut root::app::FighterManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterManager__is_melee_mode_online_tournament_implEPNS_14FighterManagerE"]
                    pub fn is_melee_mode_online_tournament(
                        arg1: *mut root::app::FighterManager,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37FighterManager__one_on_one_ratio_implEPNS_14FighterManagerE"]
                    pub fn one_on_one_ratio(arg1: *mut root::app::FighterManager) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterManager__is_discretion_final_enabled_implEPNS_14FighterManagerE"]
                    pub fn is_discretion_final_enabled(
                        arg1: *mut root::app::FighterManager,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44FighterManager__get_top_rank_player_num_implEPNS_14FighterManagerE"]
                    pub fn get_top_rank_player_num(
                        arg1: *mut root::app::FighterManager,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40FighterManager__get_top_rank_player_implEPNS_14FighterManagerEi"]
                    pub fn get_top_rank_player(
                        arg1: *mut root::app::FighterManager,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32FighterManager__is_ready_go_implEPNS_14FighterManagerE"]
                    pub fn is_ready_go(arg1: *mut root::app::FighterManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37FighterManager__set_cursor_whole_implEPNS_14FighterManagerEb"]
                    pub fn set_cursor_whole(arg1: *mut root::app::FighterManager, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36FighterManager__get_fighter_pos_implEPNS_14FighterManagerENS_14FighterEntryIDEi"]
                    pub fn get_fighter_pos(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::app::FighterEntryID,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterManager__is_available_discretion_final_implEPNS_14FighterManagerE"]
                    pub fn is_available_discretion_final(
                        arg1: *mut root::app::FighterManager,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45FighterManager__get_final_actor_entry_id_implEPNS_14FighterManagerE"]
                    pub fn get_final_actor_entry_id(
                        arg1: *mut root::app::FighterManager,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29FighterManager__is_final_implEPNS_14FighterManagerE"]
                    pub fn is_final(arg1: *mut root::app::FighterManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30FighterManager__set_final_implEPNS_14FighterManagerENS_14FighterEntryIDENS_21FighterAvailableFinalEj"]
                    pub fn set_final(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::app::FighterEntryID,
                        arg3: root::app::FighterAvailableFinal,
                        arg4: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55FighterManager__get_no_discretion_final_beat_count_implEPNS_14FighterManagerE"]
                    pub fn get_no_discretion_final_beat_count(
                        arg1: *mut root::app::FighterManager,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49FighterManager__get_beat_point_diff_from_top_implEPNS_14FighterManagerENS_14FighterEntryIDE"]
                    pub fn get_beat_point_diff_from_top(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::app::FighterEntryID,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40FighterManager__set_final_fear_face_implEPNS_14FighterManagerENS_14FighterEntryIDEi"]
                    pub fn set_final_fear_face(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::app::FighterEntryID,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34FighterManager__start_finalbg_implEPNS_14FighterManagerEif"]
                    pub fn start_finalbg(
                        arg1: *mut root::app::FighterManager,
                        arg2: libc::c_int,
                        arg3: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33FighterManager__exit_finalbg_implEPNS_14FighterManagerE"]
                    pub fn exit_finalbg(arg1: *mut root::app::FighterManager) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40FighterManager__set_visible_finalbg_implEPNS_14FighterManagerEb"]
                    pub fn set_visible_finalbg(arg1: *mut root::app::FighterManager, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51FighterManager__notify_log_event_collision_hit_implEPNS_14FighterManagerEjjfib"]
                    pub fn notify_log_event_collision_hit(
                        arg1: *mut root::app::FighterManager,
                        arg2: libc::c_uint,
                        arg3: libc::c_uint,
                        arg4: f32,
                        arg5: libc::c_int,
                        arg6: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41FighterManager__is_process_technique_implEPNS_14FighterManagerE"]
                    pub fn is_process_technique(arg1: *mut root::app::FighterManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35FighterManager__is_result_mode_implEPNS_14FighterManagerE"]
                    pub fn is_result_mode(arg1: *mut root::app::FighterManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41FighterManager__is_disable_ko_camera_implEPNS_14FighterManagerE"]
                    pub fn is_disable_ko_camera(arg1: *mut root::app::FighterManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37FighterManager__enable_ko_camera_implEPNS_14FighterManagerE"]
                    pub fn enable_ko_camera(arg1: *mut root::app::FighterManager) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38FighterManager__disable_ko_camera_implEPNS_14FighterManagerE"]
                    pub fn disable_ko_camera(arg1: *mut root::app::FighterManager) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57FighterManager__set_dead_up_camera_hit_cursor_status_implEPNS_14FighterManagerEb"]
                    pub fn set_dead_up_camera_hit_cursor_status(
                        arg1: *mut root::app::FighterManager,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46FighterManager__set_controller_rumble_all_implEPNS_14FighterManagerEN3phx6Hash40Eibj"]
                    pub fn set_controller_rumble_all(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                        arg4: bool,
                        arg5: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42FighterManager__is_rebirth_plate_line_implEPNS_14FighterManagerENS_14FighterEntryIDE"]
                    pub fn is_rebirth_plate_line(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::app::FighterEntryID,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38FighterManager__set_position_lock_implEPNS_14FighterManagerENS_14FighterEntryIDEb"]
                    pub fn set_position_lock(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::app::FighterEntryID,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34FighterManager__reset_fighter_implEPNS_14FighterManagerEb"]
                    pub fn reset_fighter(
                        arg1: *mut root::app::FighterManager,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34FighterManager__prepare_movie_implEPNS_14FighterManagerEN3phx6Hash40E"]
                    pub fn prepare_movie(
                        arg1: *mut root::app::FighterManager,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38FighterManager__is_prepared_movie_implEPNS_14FighterManagerE"]
                    pub fn is_prepared_movie(arg1: *mut root::app::FighterManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31FighterManager__exit_movie_implEPNS_14FighterManagerE"]
                    pub fn exit_movie(arg1: *mut root::app::FighterManager) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37FighterManager__is_process_movie_implEPNS_14FighterManagerE"]
                    pub fn is_process_movie(arg1: *mut root::app::FighterManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32FighterManager__start_movie_implEPNS_14FighterManagerEf"]
                    pub fn start_movie(
                        arg1: *mut root::app::FighterManager,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33FighterManager__is_end_movie_implEPNS_14FighterManagerE"]
                    pub fn is_end_movie(arg1: *mut root::app::FighterManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42FighterManager__get_jack_final_cut_in_implEPNS_14FighterManagerE"]
                    pub fn get_jack_final_cut_in(arg1: *mut root::app::FighterManager)
                        -> u64;
                }
            }
            pub mod FighterStatusModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind53FighterStatusModuleImpl__set_fighter_status_data_implEPNS_26BattleObjectModuleAccessorEbibbbmjjj"]
                    pub fn set_fighter_status_data(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                        arg4: bool,
                        arg5: bool,
                        arg6: bool,
                        arg7: libc::c_ulong,
                        arg8: libc::c_uint,
                        arg9: libc::c_uint,
                        arg10: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51FighterStatusModuleImpl__reset_log_action_info_implEPNS_26BattleObjectModuleAccessorEm"]
                    pub fn reset_log_action_info(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_ulong,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55FighterStatusModuleImpl__off_disable_intrrupt_warp_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn off_disable_intrrupt_warp(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod KineticEnergyRotNormal {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38KineticEnergyRotNormal__get_accel_implEPNS_22KineticEnergyRotNormalE"]
                    pub fn get_accel(arg1: *mut root::app::KineticEnergyRotNormal) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45KineticEnergyRotNormal__get_stable_speed_implEPNS_22KineticEnergyRotNormalE"]
                    pub fn get_stable_speed(
                        arg1: *mut root::app::KineticEnergyRotNormal,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38KineticEnergyRotNormal__get_brake_implEPNS_22KineticEnergyRotNormalE"]
                    pub fn get_brake(arg1: *mut root::app::KineticEnergyRotNormal) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44KineticEnergyRotNormal__get_limit_speed_implEPNS_22KineticEnergyRotNormalE"]
                    pub fn get_limit_speed(
                        arg1: *mut root::app::KineticEnergyRotNormal,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42KineticEnergyRotNormal__get_rot_speed_implEPNS_22KineticEnergyRotNormalE"]
                    pub fn get_rot_speed(arg1: *mut root::app::KineticEnergyRotNormal)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38KineticEnergyRotNormal__set_speed_implEPNS_22KineticEnergyRotNormalERKN3phx8Vector3fE"]
                    pub fn set_speed(
                        arg1: *mut root::app::KineticEnergyRotNormal,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38KineticEnergyRotNormal__set_accel_implEPNS_22KineticEnergyRotNormalERKN3phx8Vector3fE"]
                    pub fn set_accel(
                        arg1: *mut root::app::KineticEnergyRotNormal,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45KineticEnergyRotNormal__set_stable_speed_implEPNS_22KineticEnergyRotNormalERKN3phx8Vector3fE"]
                    pub fn set_stable_speed(
                        arg1: *mut root::app::KineticEnergyRotNormal,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38KineticEnergyRotNormal__set_brake_implEPNS_22KineticEnergyRotNormalERKN3phx8Vector3fE"]
                    pub fn set_brake(
                        arg1: *mut root::app::KineticEnergyRotNormal,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44KineticEnergyRotNormal__set_limit_speed_implEPNS_22KineticEnergyRotNormalERKN3phx8Vector3fE"]
                    pub fn set_limit_speed(
                        arg1: *mut root::app::KineticEnergyRotNormal,
                        arg2: *const root::phx::Vector3f,
                    );
                }
            }
            pub mod TeamModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24TeamModule__team_no_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn team_no(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31TeamModule__team_second_no_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn team_second_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25TeamModule__set_team_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_team(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32TeamModule__set_team_second_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_team_second(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28TeamModule__hit_team_no_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn hit_team_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35TeamModule__hit_team_second_no_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn hit_team_second_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29TeamModule__set_hit_team_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_hit_team(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36TeamModule__set_hit_team_second_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_hit_team_second(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34TeamModule__set_team_owner_id_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn set_team_owner_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30TeamModule__team_owner_id_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn team_owner_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47TeamModule__metamon_owner_fighter_entry_id_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn metamon_owner_fighter_entry_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod ComboModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind21ComboModule__set_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: libc::c_int);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23ComboModule__reset_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23ComboModule__count_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn count(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
            }
            pub mod BossManager {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33BossManager__is_stoppable_se_implEPNS_11BossManagerE"]
                    pub fn is_stoppable_se(arg1: *mut root::app::BossManager) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39BossManager__notify_on_boss_defeat_implEPNS_11BossManagerENS_11FighterKindE"]
                    pub fn notify_on_boss_defeat(
                        arg1: *mut root::app::BossManager,
                        arg2: root::app::FighterKind,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43BossManager__notify_on_boss_keyoff_bgm_implEPNS_11BossManagerENS_11FighterKindE"]
                    pub fn notify_on_boss_keyoff_bgm(
                        arg1: *mut root::app::BossManager,
                        arg2: root::app::FighterKind,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37BossManager__notify_on_boss_dead_implEPNS_11BossManagerENS_11FighterKindE"]
                    pub fn notify_on_boss_dead(
                        arg1: *mut root::app::BossManager,
                        arg2: root::app::FighterKind,
                    ) -> u64;
                }
            }
            pub mod AttackData {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36AttackData__load_from_l2c_table_implEPNS_10AttackDataERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::AttackData,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackData__store_l2c_table_implEPKNS_10AttackDataE"]
                    pub fn store_l2c_table(arg1: *const root::app::AttackData) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32AttackData__store_l2c_table_implEPKNS_10AttackDataERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::AttackData,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterInformation {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34FighterInformation__hit_point_implEPNS_18FighterInformationE"]
                    pub fn hit_point(arg1: *mut root::app::FighterInformation) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38FighterInformation__fighter_color_implEPNS_18FighterInformationE"]
                    pub fn fighter_color(arg1: *mut root::app::FighterInformation) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41FighterInformation__is_operation_cpu_implEPNS_18FighterInformationE"]
                    pub fn is_operation_cpu(arg1: *mut root::app::FighterInformation) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41FighterInformation__get_no_change_hp_implEPNS_18FighterInformationE"]
                    pub fn get_no_change_hp(arg1: *mut root::app::FighterInformation) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35FighterInformation__dead_count_implEPNS_18FighterInformationEi"]
                    pub fn dead_count(
                        arg1: *mut root::app::FighterInformation,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36FighterInformation__stock_count_implEPNS_18FighterInformationE"]
                    pub fn stock_count(arg1: *mut root::app::FighterInformation) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38FighterInformation__suicide_count_implEPNS_18FighterInformationEi"]
                    pub fn suicide_count(
                        arg1: *mut root::app::FighterInformation,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41FighterInformation__total_beat_count_implEPNS_18FighterInformationEi"]
                    pub fn total_beat_count(
                        arg1: *mut root::app::FighterInformation,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45FighterInformation__is_last_dead_suicide_implEPNS_18FighterInformationE"]
                    pub fn is_last_dead_suicide(arg1: *mut root::app::FighterInformation) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51FighterInformation__set_add_rebirth_wait_frame_implEPNS_18FighterInformationEf"]
                    pub fn set_add_rebirth_wait_frame(
                        arg1: *mut root::app::FighterInformation,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38FighterInformation__is_on_rebirth_implEPNS_18FighterInformationE"]
                    pub fn is_on_rebirth(arg1: *mut root::app::FighterInformation) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41FighterInformation__fighter_category_implEPNS_18FighterInformationE"]
                    pub fn fighter_category(arg1: *mut root::app::FighterInformation) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32FighterInformation__gravity_implEPNS_18FighterInformationE"]
                    pub fn gravity(arg1: *mut root::app::FighterInformation) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39FighterInformation__summon_boss_id_implEPNS_18FighterInformationE"]
                    pub fn summon_boss_id(arg1: *mut root::app::FighterInformation) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterInformation__summon_bomb_ready_frame_implEPNS_18FighterInformationE"]
                    pub fn summon_bomb_ready_frame(
                        arg1: *mut root::app::FighterInformation,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind53FighterInformation__summon_pre_bomb_effect_frame_implEPNS_18FighterInformationE"]
                    pub fn summon_pre_bomb_effect_frame(
                        arg1: *mut root::app::FighterInformation,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55FighterInformation__summon_suicide_bomb_attack_mul_implEPNS_18FighterInformationE"]
                    pub fn summon_suicide_bomb_attack_mul(
                        arg1: *mut root::app::FighterInformation,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57FighterInformation__summon_suicide_bomb_reaction_mul_implEPNS_18FighterInformationE"]
                    pub fn summon_suicide_bomb_reaction_mul(
                        arg1: *mut root::app::FighterInformation,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54FighterInformation__is_battle_event_stick_reverse_implEPNS_18FighterInformationE"]
                    pub fn is_battle_event_stick_reverse(
                        arg1: *mut root::app::FighterInformation,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36FighterInformation__get_log_int_implEPNS_18FighterInformationEiii"]
                    pub fn get_log_int(
                        arg1: *mut root::app::FighterInformation,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                    ) -> u64;
                }
            }
            pub mod FighterPikminLinkEventWeaponPikminOnFlag {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind66FighterPikminLinkEventWeaponPikminOnFlag__load_from_l2c_table_implEPNS_40FighterPikminLinkEventWeaponPikminOnFlagERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterPikminLinkEventWeaponPikminOnFlag,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind62FighterPikminLinkEventWeaponPikminOnFlag__store_l2c_table_implEPKNS_40FighterPikminLinkEventWeaponPikminOnFlagE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminOnFlag,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind62FighterPikminLinkEventWeaponPikminOnFlag__store_l2c_table_implEPKNS_40FighterPikminLinkEventWeaponPikminOnFlagERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminOnFlag,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterKineticEnergyController {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__mul_x_speed_max_implEPNS_30FighterKineticEnergyControllerEf"]
                    pub fn mul_x_speed_max(
                        arg1: *mut root::app::FighterKineticEnergyController,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__set_accel_x_mul_implEPNS_30FighterKineticEnergyControllerEf"]
                    pub fn set_accel_x_mul(
                        arg1: *mut root::app::FighterKineticEnergyController,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__set_accel_x_add_implEPNS_30FighterKineticEnergyControllerEf"]
                    pub fn set_accel_x_add(
                        arg1: *mut root::app::FighterKineticEnergyController,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__mul_x_accel_mul_implEPNS_30FighterKineticEnergyControllerEf"]
                    pub fn mul_x_accel_mul(
                        arg1: *mut root::app::FighterKineticEnergyController,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__mul_x_accel_add_implEPNS_30FighterKineticEnergyControllerEf"]
                    pub fn mul_x_accel_add(
                        arg1: *mut root::app::FighterKineticEnergyController,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__set_accel_y_mul_implEPNS_30FighterKineticEnergyControllerEf"]
                    pub fn set_accel_y_mul(
                        arg1: *mut root::app::FighterKineticEnergyController,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__set_accel_y_add_implEPNS_30FighterKineticEnergyControllerEf"]
                    pub fn set_accel_y_add(
                        arg1: *mut root::app::FighterKineticEnergyController,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__get_accel_x_mul_implEPNS_30FighterKineticEnergyControllerE"]
                    pub fn get_accel_x_mul(
                        arg1: *mut root::app::FighterKineticEnergyController,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__get_accel_x_add_implEPNS_30FighterKineticEnergyControllerE"]
                    pub fn get_accel_x_add(
                        arg1: *mut root::app::FighterKineticEnergyController,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__get_accel_y_mul_implEPNS_30FighterKineticEnergyControllerE"]
                    pub fn get_accel_y_mul(
                        arg1: *mut root::app::FighterKineticEnergyController,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterKineticEnergyController__get_accel_y_add_implEPNS_30FighterKineticEnergyControllerE"]
                    pub fn get_accel_y_add(
                        arg1: *mut root::app::FighterKineticEnergyController,
                    ) -> u64;
                }
            }
            pub mod FighterPikminLinkEventWeaponPikminSyncLR {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind66FighterPikminLinkEventWeaponPikminSyncLR__load_from_l2c_table_implEPNS_40FighterPikminLinkEventWeaponPikminSyncLRERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterPikminLinkEventWeaponPikminSyncLR,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind62FighterPikminLinkEventWeaponPikminSyncLR__store_l2c_table_implEPKNS_40FighterPikminLinkEventWeaponPikminSyncLRE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminSyncLR,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind62FighterPikminLinkEventWeaponPikminSyncLR__store_l2c_table_implEPKNS_40FighterPikminLinkEventWeaponPikminSyncLRERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminSyncLR,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod WeaponRobotHominglaserLinkEventSearch {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind63WeaponRobotHominglaserLinkEventSearch__load_from_l2c_table_implEPNS_37WeaponRobotHominglaserLinkEventSearchERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::WeaponRobotHominglaserLinkEventSearch,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59WeaponRobotHominglaserLinkEventSearch__store_l2c_table_implEPKNS_37WeaponRobotHominglaserLinkEventSearchE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::WeaponRobotHominglaserLinkEventSearch,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59WeaponRobotHominglaserLinkEventSearch__store_l2c_table_implEPKNS_37WeaponRobotHominglaserLinkEventSearchERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::WeaponRobotHominglaserLinkEventSearch,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventDrumShake {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47GimmickEventDrumShake__load_from_l2c_table_implEPNS_21GimmickEventDrumShakeERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventDrumShake,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GimmickEventDrumShake__store_l2c_table_implEPKNS_21GimmickEventDrumShakeE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventDrumShake,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43GimmickEventDrumShake__store_l2c_table_implEPKNS_21GimmickEventDrumShakeERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventDrumShake,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterSpiritsSupportSkill {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59FighterSpiritsSupportSkill__is_unsync_vis_whole_effect_implEPNS_26FighterSpiritsSupportSkillE"]
                    pub fn is_unsync_vis_whole_effect(
                        arg1: *mut root::app::FighterSpiritsSupportSkill,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterSpiritsSupportSkill__is_visible_effect_implEPNS_26FighterSpiritsSupportSkillE"]
                    pub fn is_visible_effect(
                        arg1: *mut root::app::FighterSpiritsSupportSkill,
                    ) -> bool;
                }
            }
            pub mod StageManager {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33StageManager__stage_all_stop_implEPNS_12StageManagerEb"]
                    pub fn stage_all_stop(
                        arg1: *mut root::app::StageManager,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46StageManager__is_discretion_final_enabled_implEPNS_12StageManagerE"]
                    pub fn is_discretion_final_enabled(arg1: *mut root::app::StageManager) -> bool;
                }
            }
            pub mod GimmickEventPresenter {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55GimmickEventPresenter__dispatch_event_from_fighter_implEPNS_21GimmickEventPresenterERNS_12GimmickEventE"]
                    pub fn dispatch_event_from_fighter(
                        arg1: *mut root::app::GimmickEventPresenter,
                        arg2: *mut root::app::GimmickEvent,
                    ) -> u64;
                }
            }
            pub mod GimmickEventDrumRelease {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49GimmickEventDrumRelease__load_from_l2c_table_implEPNS_23GimmickEventDrumReleaseERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventDrumRelease,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45GimmickEventDrumRelease__store_l2c_table_implEPKNS_23GimmickEventDrumReleaseE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventDrumRelease,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45GimmickEventDrumRelease__store_l2c_table_implEPKNS_23GimmickEventDrumReleaseERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventDrumRelease,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterPikminLinkEventWeaponPikminSetInt {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind66FighterPikminLinkEventWeaponPikminSetInt__load_from_l2c_table_implEPNS_40FighterPikminLinkEventWeaponPikminSetIntERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterPikminLinkEventWeaponPikminSetInt,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind62FighterPikminLinkEventWeaponPikminSetInt__store_l2c_table_implEPKNS_40FighterPikminLinkEventWeaponPikminSetIntE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminSetInt,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind62FighterPikminLinkEventWeaponPikminSetInt__store_l2c_table_implEPKNS_40FighterPikminLinkEventWeaponPikminSetIntERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminSetInt,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventTornadoShootInfo {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54GimmickEventTornadoShootInfo__load_from_l2c_table_implEPNS_28GimmickEventTornadoShootInfoERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventTornadoShootInfo,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50GimmickEventTornadoShootInfo__store_l2c_table_implEPKNS_28GimmickEventTornadoShootInfoE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventTornadoShootInfo,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50GimmickEventTornadoShootInfo__store_l2c_table_implEPKNS_28GimmickEventTornadoShootInfoERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventTornadoShootInfo,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterKineticEnergyMotion {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42FighterKineticEnergyMotion__set_angle_implEPNS_26FighterKineticEnergyMotionEf"]
                    pub fn set_angle(arg1: *mut root::app::FighterKineticEnergyMotion, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterKineticEnergyMotion__set_angle_whole_implEPNS_26FighterKineticEnergyMotionEfi"]
                    pub fn set_angle_whole(
                        arg1: *mut root::app::FighterKineticEnergyMotion,
                        arg2: f32,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46FighterKineticEnergyMotion__set_speed_mul_implEPNS_26FighterKineticEnergyMotionEf"]
                    pub fn set_speed_mul(
                        arg1: *mut root::app::FighterKineticEnergyMotion,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46FighterKineticEnergyMotion__set_chara_dir_implEPNS_26FighterKineticEnergyMotionEf"]
                    pub fn set_chara_dir(
                        arg1: *mut root::app::FighterKineticEnergyMotion,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterKineticEnergyMotion__reverse_chara_dir_implEPNS_26FighterKineticEnergyMotionE"]
                    pub fn reverse_chara_dir(
                        arg1: *mut root::app::FighterKineticEnergyMotion,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterKineticEnergyMotion__set_update_flag_implEPNS_26FighterKineticEnergyMotionEb"]
                    pub fn set_update_flag(
                        arg1: *mut root::app::FighterKineticEnergyMotion,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50FighterKineticEnergyMotion__set_speed_mul_2nd_implEPNS_26FighterKineticEnergyMotionERKN3phx8Vector2fE"]
                    pub fn set_speed_mul_2nd(
                        arg1: *mut root::app::FighterKineticEnergyMotion,
                        arg2: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42FighterKineticEnergyMotion__get_angle_implEPNS_26FighterKineticEnergyMotionE"]
                    pub fn get_angle(arg1: *mut root::app::FighterKineticEnergyMotion)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterKineticEnergyMotion__get_angle_whole_implEPNS_26FighterKineticEnergyMotionE"]
                    pub fn get_angle_whole(
                        arg1: *mut root::app::FighterKineticEnergyMotion,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46FighterKineticEnergyMotion__get_chara_dir_implEPNS_26FighterKineticEnergyMotionE"]
                    pub fn get_chara_dir(
                        arg1: *mut root::app::FighterKineticEnergyMotion,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46FighterKineticEnergyMotion__get_speed_mul_implEPNS_26FighterKineticEnergyMotionE"]
                    pub fn get_speed_mul(
                        arg1: *mut root::app::FighterKineticEnergyMotion,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54FighterKineticEnergyMotion__is_cliff_ground_trans_implEPNS_26FighterKineticEnergyMotionE"]
                    pub fn is_cliff_ground_trans(
                        arg1: *mut root::app::FighterKineticEnergyMotion,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49FighterKineticEnergyMotion__set_ground_trans_implEPNS_26FighterKineticEnergyMotionE"]
                    pub fn set_ground_trans(arg1: *mut root::app::FighterKineticEnergyMotion);
                }
            }
            pub mod ModelModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ModelModule__set_rotation_order_implEPNS_26BattleObjectModuleAccessorENS_21MotionNodeRotateOrderE"]
                    pub fn set_rotation_order(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::MotionNodeRotateOrder,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ModelModule__rotation_order_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn rotation_order(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23ModelModule__scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn scale(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ModelModule__set_scale_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_scale(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25ModelModule__scale_z_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn scale_z(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ModelModule__set_scale_z_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_scale_z(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ModelModule__set_temporary_scale_z_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_temporary_scale_z(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ModelModule__joint_global_position_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERNS3_8Vector3fEb"]
                    pub fn joint_global_position(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *mut root::phx::Vector3f,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51ModelModule__joint_global_position_with_offset_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS3_8Vector3fERS5_b"]
                    pub fn joint_global_position_with_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::phx::Vector3f,
                        arg4: *mut root::phx::Vector3f,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46ModelModule__joint_global_offset_from_top_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERNS3_8Vector3fE"]
                    pub fn joint_global_offset_from_top(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54ModelModule__top_joint_global_position_from_joint_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS3_8Vector3fERS5_"]
                    pub fn top_joint_global_position_from_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::phx::Vector3f,
                        arg4: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ModelModule__joint_global_rotation_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERNS3_8Vector3fEb"]
                    pub fn joint_global_rotation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *mut root::phx::Vector3f,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ModelModule__joint_global_axis_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eib"]
                    pub fn joint_global_axis(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ModelModule__set_joint_srt_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS3_8Vector3fES7_S7_"]
                    pub fn set_joint_srt(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::phx::Vector3f,
                        arg4: *const root::phx::Vector3f,
                        arg5: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ModelModule__set_joint_scale_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS3_8Vector3fE"]
                    pub fn set_joint_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ModelModule__set_joint_rotate_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS3_8Vector3fENS_23MotionNodeRotateComposeENS_21MotionNodeRotateOrderE"]
                    pub fn set_joint_rotate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::phx::Vector3f,
                        arg4: root::app::MotionNodeRotateCompose,
                        arg5: root::app::MotionNodeRotateOrder,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ModelModule__set_joint_translate_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERKNS3_8Vector3fEbb"]
                    pub fn set_joint_translate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *const root::phx::Vector3f,
                        arg4: bool,
                        arg5: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ModelModule__clear_joint_srt_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn clear_joint_srt(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ModelModule__joint_rotate_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ERNS3_8Vector3fE"]
                    pub fn joint_rotate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ModelModule__set_visibility_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ModelModule__is_visible_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_visible(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ModelModule__set_mesh_visibility_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eb"]
                    pub fn set_mesh_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ModelModule__set_alpha_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_alpha(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: f32);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ModelModule__set_color_rgb_implEPNS_26BattleObjectModuleAccessorEfffNS_16MODEL_COLOR_TYPEE"]
                    pub fn set_color_rgb(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: f32,
                        arg5: root::app::MODEL_COLOR_TYPE,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ModelModule__set_emmisive_scale_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_emmisive_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ModelModule__set_render_offset_position_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_render_offset_position(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ModelModule__set_depth_offset_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_depth_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ModelModule__set_depth_stencil_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_depth_stencil(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ModelModule__virtual_joint_tra_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn virtual_joint_tra(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ModelModule__enable_gold_eye_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn enable_gold_eye(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ModelModule__disable_gold_eye_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn disable_gold_eye(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
            }
            pub mod GimmickEventTornadoMoveInfo {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind53GimmickEventTornadoMoveInfo__load_from_l2c_table_implEPNS_27GimmickEventTornadoMoveInfoERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventTornadoMoveInfo,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49GimmickEventTornadoMoveInfo__store_l2c_table_implEPKNS_27GimmickEventTornadoMoveInfoE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventTornadoMoveInfo,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49GimmickEventTornadoMoveInfo__store_l2c_table_implEPKNS_27GimmickEventTornadoMoveInfoERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventTornadoMoveInfo,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod KineticModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30KineticModule__get_energy_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_energy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35KineticModule__clear_speed_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clear_speed_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41KineticModule__clear_speed_energy_id_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn clear_speed_energy_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36KineticModule__clear_speed_attr_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn clear_speed_attr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38KineticModule__suspend_energy_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn suspend_energy_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37KineticModule__resume_energy_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn resume_energy_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37KineticModule__unable_energy_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn unable_energy_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33KineticModule__get_sum_speed_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_sum_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35KineticModule__get_sum_speed_x_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_sum_speed_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35KineticModule__get_sum_speed_y_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_sum_speed_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40KineticModule__get_sum_speed_length_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_sum_speed_length(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35KineticModule__get_sum_speed3f_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_sum_speed3f(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36KineticModule__get_sum_rotation_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_sum_rotation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48KineticModule__set_consider_ground_friction_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_consider_ground_friction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29KineticModule__mul_speed_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEi"]
                    pub fn mul_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29KineticModule__mul_accel_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEi"]
                    pub fn mul_accel(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33KineticModule__reflect_speed_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEi"]
                    pub fn reflect_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33KineticModule__reflect_accel_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEi"]
                    pub fn reflect_accel(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34KineticModule__change_kinetic_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn change_kinetic(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36KineticModule__get_kinetic_type_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_kinetic_type(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33KineticModule__enable_energy_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn enable_energy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33KineticModule__unable_energy_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn unable_energy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36KineticModule__is_enable_energy_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_enable_energy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34KineticModule__suspend_energy_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn suspend_energy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33KineticModule__resume_energy_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn resume_energy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37KineticModule__is_suspend_energy_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_suspend_energy(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29KineticModule__add_speed_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn add_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37KineticModule__add_speed_outside_implEPNS_26BattleObjectModuleAccessorEiRKN3phx8Vector3fE"]
                    pub fn add_speed_outside(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25KineticModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
            }
            pub mod BattleObjectManager {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54BattleObjectManager__is_active_find_battle_object_implEPNS_19BattleObjectManagerEj"]
                    pub fn is_active_find_battle_object(
                        arg1: *mut root::app::BattleObjectManager,
                        arg2: libc::c_uint,
                    ) -> bool;
                }
            }
            pub mod LinkEventStarShot {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkEventStarShot__load_from_l2c_table_implEPNS_17LinkEventStarShotERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventStarShot,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39LinkEventStarShot__store_l2c_table_implEPKNS_17LinkEventStarShotE"]
                    pub fn store_l2c_table(arg1: *const root::app::LinkEventStarShot) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39LinkEventStarShot__store_l2c_table_implEPKNS_17LinkEventStarShotERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventStarShot,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod stWaterAreaInfo {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41stWaterAreaInfo__load_from_l2c_table_implEPNS_15stWaterAreaInfoERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::stWaterAreaInfo,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37stWaterAreaInfo__store_l2c_table_implEPKNS_15stWaterAreaInfoE"]
                    pub fn store_l2c_table(arg1: *const root::app::stWaterAreaInfo) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37stWaterAreaInfo__store_l2c_table_implEPKNS_15stWaterAreaInfoERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::stWaterAreaInfo,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventLadder {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44GimmickEventLadder__load_from_l2c_table_implEPNS_18GimmickEventLadderERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventLadder,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GimmickEventLadder__store_l2c_table_implEPKNS_18GimmickEventLadderE"]
                    pub fn store_l2c_table(arg1: *const root::app::GimmickEventLadder)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GimmickEventLadder__store_l2c_table_implEPKNS_18GimmickEventLadderERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventLadder,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod ItemKineticModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ItemKineticModuleImpl__set_throw_param_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fES6_bj"]
                    pub fn set_throw_param(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: *const root::phx::Vector3f,
                        arg4: bool,
                        arg5: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42ItemKineticModuleImpl__set_slope_type_implEPNS_26BattleObjectModuleAccessorENS_13ItemSlopeTypeE"]
                    pub fn set_slope_type(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemSlopeType,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45ItemKineticModuleImpl__set_kinetic_flags_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn set_kinetic_flags(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45ItemKineticModuleImpl__get_kinetic_flags_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_kinetic_flags(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ItemKineticModuleImpl__on_kinetic_flag_implEPNS_26BattleObjectModuleAccessorENS_15ItemKineticFlagE"]
                    pub fn on_kinetic_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemKineticFlag,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ItemKineticModuleImpl__off_kinetic_flag_implEPNS_26BattleObjectModuleAccessorENS_15ItemKineticFlagE"]
                    pub fn off_kinetic_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemKineticFlag,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54ItemKineticModuleImpl__add_speed_consider_gravity_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEb"]
                    pub fn add_speed_consider_gravity(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ItemKineticModuleImpl__clear_speed_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn clear_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ItemKineticModuleImpl__add_speed_damage_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn add_speed_damage(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ItemKineticModuleImpl__slope_angle_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn slope_angle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ItemKineticModuleImpl__set_motion_trans_rate_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_motion_trans_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ItemKineticModuleImpl__get_motion_trans_rate_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_motion_trans_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50ItemKineticModuleImpl__set_motion_trans_angle_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_motion_trans_angle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50ItemKineticModuleImpl__get_motion_trans_angle_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_motion_trans_angle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind53ItemKineticModuleImpl__set_motion_trans_rate_2nd_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_motion_trans_rate_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind53ItemKineticModuleImpl__get_motion_trans_rate_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_motion_trans_rate_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54ItemKineticModuleImpl__set_motion_trans_angle_2nd_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_motion_trans_angle_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54ItemKineticModuleImpl__get_motion_trans_angle_2nd_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_motion_trans_angle_2nd(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ItemKineticModuleImpl__set_param_gemini_implEPNS_26BattleObjectModuleAccessorEffRKN3phx8Vector2fE"]
                    pub fn set_param_gemini(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: *const root::phx::Vector2f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48ItemKineticModuleImpl__get_sum_speed_simple_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn get_sum_speed_simple(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ItemKineticModuleImpl__set_rot_along_speed_x_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fEf"]
                    pub fn set_rot_along_speed_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ItemKineticModuleImpl__it_ai_move_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector2fES6_S6_S6_S6_bb"]
                    pub fn it_ai_move(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector2f,
                        arg3: *const root::phx::Vector2f,
                        arg4: *const root::phx::Vector2f,
                        arg5: *const root::phx::Vector2f,
                        arg6: *const root::phx::Vector2f,
                        arg7: bool,
                        arg8: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ItemKineticModuleImpl__it_ai_type_implEPNS_26BattleObjectModuleAccessorENS_10ItemAiTypeERKN3phx8Vector2fES7_"]
                    pub fn it_ai_type(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemAiType,
                        arg3: *const root::phx::Vector2f,
                        arg4: *const root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ItemKineticModuleImpl__it_ai_dir_factor_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn it_ai_dir_factor(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ItemKineticModuleImpl__it_ai_distance_factor_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn it_ai_distance_factor(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46ItemKineticModuleImpl__it_ai_dir_rot_mode_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn it_ai_dir_rot_mode(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ItemKineticModuleImpl__it_base_rot_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn it_base_rot(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48ItemKineticModuleImpl__set_interpolate_rate_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_interpolate_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
            }
            pub mod ItemModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26ItemModule__have_item_implEPNS_26BattleObjectModuleAccessorENS_8ItemKindEiibb"]
                    pub fn have_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemKind,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                        arg5: bool,
                        arg6: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ItemModule__have_item_instance_implEPNS_26BattleObjectModuleAccessorEPNS_4ItemEibbbb"]
                    pub fn have_item_instance(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::app::Item,
                        arg3: libc::c_int,
                        arg4: bool,
                        arg5: bool,
                        arg6: bool,
                        arg7: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ItemModule__use_item_instance_implEPNS_26BattleObjectModuleAccessorEPNS_4ItemEb"]
                    pub fn use_item_instance(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::app::Item,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25ItemModule__use_item_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn use_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ItemModule__pickup_item_implEPNS_26BattleObjectModuleAccessorENS_8ItemSizeEiiNS_18QuickItemTreatTypeENS_20ItemPickupSearchModeE"]
                    pub fn pickup_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemSize,
                        arg3: libc::c_int,
                        arg4: libc::c_int,
                        arg5: root::app::QuickItemTreatType,
                        arg6: root::app::ItemPickupSearchMode,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ItemModule__is_success_pickup_item_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_success_pickup_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ItemModule__success_auto_pickup_item_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn success_auto_pickup_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ItemModule__is_success_auto_pickup_item_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_success_auto_pickup_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ItemModule__is_have_item_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_have_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ItemModule__get_have_item_size_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_have_item_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ItemModule__get_have_item_kind_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_have_item_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36ItemModule__get_have_item_trait_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_have_item_trait(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ItemModule__get_have_item_hold_kind_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_have_item_hold_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47ItemModule__get_have_item_status_param_int_implEPNS_26BattleObjectModuleAccessorENS_18ItemStatusParamIntEi"]
                    pub fn get_have_item_status_param_int(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemStatusParamInt,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49ItemModule__get_have_item_status_param_float_implEPNS_26BattleObjectModuleAccessorENS_20ItemStatusParamFloatEi"]
                    pub fn get_have_item_status_param_float(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemStatusParamFloat,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48ItemModule__get_have_item_status_param_bool_implEPNS_26BattleObjectModuleAccessorENS_19ItemStatusParamBoolEi"]
                    pub fn get_have_item_status_param_bool(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemStatusParamBool,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ItemModule__get_have_item_id_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_have_item_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44ItemModule__get_pickable_item_object_id_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_pickable_item_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ItemModule__get_pickable_item_size_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_pickable_item_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ItemModule__get_pickable_item_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_pickable_item_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ItemModule__get_pickable_item_trait_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_pickable_item_trait(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ItemModule__remove_item_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn remove_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ItemModule__remove_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn remove_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27ItemModule__throw_item_implEPNS_26BattleObjectModuleAccessorEfffibf"]
                    pub fn throw_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: f32,
                        arg5: libc::c_int,
                        arg6: bool,
                        arg7: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26ItemModule__drop_item_implEPNS_26BattleObjectModuleAccessorEffi"]
                    pub fn drop_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: f32,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26ItemModule__warp_item_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fEi"]
                    pub fn warp_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ItemModule__warp_attach_item_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn warp_attach_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26ItemModule__born_item_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn born_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ItemModule__shoot_item_bullet_implEPNS_26BattleObjectModuleAccessorEifi"]
                    pub fn shoot_item_bullet(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ItemModule__shoot_item_bullet_blanks_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn shoot_item_bullet_blanks(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ItemModule__get_shoot_item_bullet_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_shoot_item_bullet(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45ItemModule__update_have_item_action_info_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn update_have_item_action_info(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ItemModule__set_have_item_scale_anim_implEPNS_26BattleObjectModuleAccessorEifi"]
                    pub fn set_have_item_scale_anim(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ItemModule__set_have_item_action_implEPNS_26BattleObjectModuleAccessorEifi"]
                    pub fn set_have_item_action(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41ItemModule__set_have_item_visibility_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_have_item_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ItemModule__set_have_item_hold_anim_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_have_item_hold_anim(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47ItemModule__set_have_item_constraint_joint_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Ei"]
                    pub fn set_have_item_constraint_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48ItemModule__reset_have_item_constraint_node_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn reset_have_item_constraint_node(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ItemModule__set_have_item_hit_sleep_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_have_item_hit_sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ItemModule__attach_item_implEPNS_26BattleObjectModuleAccessorENS_8ItemKindEib"]
                    pub fn attach_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemKind,
                        arg3: libc::c_int,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30ItemModule__attach_item_2_implEPNS_26BattleObjectModuleAccessorEPNS_4ItemEb"]
                    pub fn attach_item_2(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::app::Item,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ItemModule__attach_item_instance_implEPNS_26BattleObjectModuleAccessorEPNS_4ItemEb"]
                    pub fn attach_item_instance(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::app::Item,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31ItemModule__is_attach_item_implEPNS_26BattleObjectModuleAccessorENS_8ItemKindE"]
                    pub fn is_attach_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemKind,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38ItemModule__get_attach_item_count_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_attach_item_count(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ItemModule__set_attach_item_visibility_implEPNS_26BattleObjectModuleAccessorEbh"]
                    pub fn set_attach_item_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_uchar,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ItemModule__eject_have_item_implEPNS_26BattleObjectModuleAccessorEibb"]
                    pub fn eject_have_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ItemModule__eject_attach_item_implEPNS_26BattleObjectModuleAccessorEibbb"]
                    pub fn eject_attach_item(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: bool,
                        arg5: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ItemModule__eject_attach_implEPNS_26BattleObjectModuleAccessorENS_8ItemKindEbb"]
                    pub fn eject_attach(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemKind,
                        arg3: bool,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28ItemModule__drop_attach_implEPNS_26BattleObjectModuleAccessorENS_8ItemKindEff"]
                    pub fn drop_attach(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemKind,
                        arg3: f32,
                        arg4: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34ItemModule__drop_attach_group_implEPNS_26BattleObjectModuleAccessorEhff"]
                    pub fn drop_attach_group(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uchar,
                        arg3: f32,
                        arg4: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29ItemModule__scale_attach_implEPNS_26BattleObjectModuleAccessorENS_8ItemKindEf"]
                    pub fn scale_attach(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemKind,
                        arg3: f32,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ItemModule__set_attach_item_action_implEPNS_26BattleObjectModuleAccessorENS_8ItemKindEif"]
                    pub fn set_attach_item_action(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::ItemKind,
                        arg3: libc::c_int,
                        arg4: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ItemModule__set_have_item_team_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_have_item_team(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ItemModule__set_change_status_event_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_change_status_event(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
            }
            pub mod FighterCloudLinkEventFinal {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52FighterCloudLinkEventFinal__load_from_l2c_table_implEPNS_26FighterCloudLinkEventFinalERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterCloudLinkEventFinal,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterCloudLinkEventFinal__store_l2c_table_implEPKNS_26FighterCloudLinkEventFinalE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterCloudLinkEventFinal,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48FighterCloudLinkEventFinal__store_l2c_table_implEPKNS_26FighterCloudLinkEventFinalERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterCloudLinkEventFinal,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod ItemMotionAnimcmdModuleImpl {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46ItemMotionAnimcmdModuleImpl__set_fix_rate_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_fix_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
            }
            pub mod StatusModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40StatusModule__change_status_request_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn change_status_request(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52StatusModule__change_status_request_from_script_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn change_status_request_from_script(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind52StatusModule__delete_status_request_from_script_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn delete_status_request_from_script(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46StatusModule__status_kind_que_from_script_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn status_kind_que_from_script(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30StatusModule__status_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn status_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35StatusModule__status_kind_next_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn status_kind_next(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44StatusModule__set_status_kind_interrupt_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_status_kind_interrupt(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40StatusModule__status_kind_interrupt_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn status_kind_interrupt(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30StatusModule__is_changing_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_changing(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35StatusModule__prev_status_kind_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn prev_status_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38StatusModule__change_status_force_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn change_status_force(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33StatusModule__situation_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn situation_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38StatusModule__prev_situation_kind_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn prev_situation_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39StatusModule__is_situation_changed_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_situation_changed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37StatusModule__set_situation_kind_implEPNS_26BattleObjectModuleAccessorENS_13SituationKindEb"]
                    pub fn set_situation_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::SituationKind,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41StatusModule__set_keep_situation_air_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_keep_situation_air(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35StatusModule__set_succeeds_bit_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_succeeds_bit(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32StatusModule__init_settings_implEPNS_26BattleObjectModuleAccessorENS_13SituationKindEijNS_20GroundCliffCheckKindEbiiii"]
                    pub fn init_settings(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::SituationKind,
                        arg3: libc::c_int,
                        arg4: libc::c_uint,
                        arg5: root::app::GroundCliffCheckKind,
                        arg6: bool,
                        arg7: libc::c_int,
                        arg8: libc::c_int,
                        arg9: libc::c_int,
                        arg10: libc::c_int,
                    ) -> u64;
                }
            }
            pub mod VisibilityModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26VisibilityModule__set_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_"]
                    pub fn set(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32VisibilityModule__set_int64_implEPNS_26BattleObjectModuleAccessorEll"]
                    pub fn set_int64(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_long,
                        arg3: libc::c_long,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41VisibilityModule__set_status_default_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_"]
                    pub fn set_status_default(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47VisibilityModule__set_status_default_int64_implEPNS_26BattleObjectModuleAccessorEll"]
                    pub fn set_status_default_int64(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_long,
                        arg3: libc::c_long,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43VisibilityModule__reset_status_default_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn reset_status_default(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49VisibilityModule__reset_status_default_int64_implEPNS_26BattleObjectModuleAccessorEl"]
                    pub fn reset_status_default_int64(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_long,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47VisibilityModule__reset_status_default_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn reset_status_default_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38VisibilityModule__set_default_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn set_default_all(arg1: *mut root::app::BattleObjectModuleAccessor);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42VisibilityModule__set_mesh_visibility_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eib"]
                    pub fn set_mesh_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: libc::c_int,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48VisibilityModule__set_mesh_visibility_int64_implEPNS_26BattleObjectModuleAccessorElib"]
                    pub fn set_mesh_visibility_int64(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_long,
                        arg3: libc::c_int,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind49VisibilityModule__set_material_anim_priority_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40Eb"]
                    pub fn set_material_anim_priority(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32VisibilityModule__set_whole_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_whole(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32VisibilityModule__get_whole_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_whole(arg1: *mut root::app::BattleObjectModuleAccessor)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33VisibilityModule__is_visible_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_visible(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34VisibilityModule__set_default_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn set_default(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40VisibilityModule__set_default_int64_implEPNS_26BattleObjectModuleAccessorEl"]
                    pub fn set_default_int64(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_long,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38VisibilityModule__is_visible_mesh_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn is_visible_mesh(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42VisibilityModule__set_visibility_mode_implEPNS_26BattleObjectModuleAccessorENS_14VisibilityModeE"]
                    pub fn set_visibility_mode(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::VisibilityMode,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40VisibilityModule__set_model_visible_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_model_visible(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
            }
            pub mod ColorBlendModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32ColorBlendModule__off_flash_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn off_flash(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ColorBlendModule__set_enable_flash_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_enable_flash(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ColorBlendModule__set_burn_color_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector4fEb"]
                    pub fn set_burn_color(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector4f,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43ColorBlendModule__set_burn_color_frame_implEPNS_26BattleObjectModuleAccessorEfRKN3phx8Vector4fEb"]
                    pub fn set_burn_color_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: *const root::phx::Vector4f,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ColorBlendModule__off_burn_color_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn off_burn_color(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46ColorBlendModule__set_burn_color_priority_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_burn_color_priority(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35ColorBlendModule__set_priority_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_priority(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39ColorBlendModule__set_shadow_bloom_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_shadow_bloom(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48ColorBlendModule__set_last_attack_direction_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_last_attack_direction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37ColorBlendModule__set_main_color_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector4fES6_ffib"]
                    pub fn set_main_color(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector4f,
                        arg3: *const root::phx::Vector4f,
                        arg4: f32,
                        arg5: f32,
                        arg6: libc::c_int,
                        arg7: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40ColorBlendModule__cancel_main_color_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn cancel_main_color(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ColorBlendModule__set_status_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_status(arg1: *mut root::app::BattleObjectModuleAccessor, arg2: bool);
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33ColorBlendModule__get_status_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57ColorBlendModule__set_disable_camera_depth_influence_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_disable_camera_depth_influence(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
            }
            pub mod HitModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind21HitModule__clean_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn clean(arg1: *mut root::app::BattleObjectModuleAccessor) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind21HitModule__sleep_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn sleep(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26HitModule__set_status_implEPNS_26BattleObjectModuleAccessorEiNS_9HitStatusEi"]
                    pub fn set_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::HitStatus,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32HitModule__set_status_joint_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ENS_9HitStatusEi"]
                    pub fn set_status_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::app::HitStatus,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40HitModule__set_status_joint_default_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ENS_9HitStatusEi"]
                    pub fn set_status_joint_default(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::app::HitStatus,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30HitModule__set_status_all_implEPNS_26BattleObjectModuleAccessorENS_9HitStatusEi"]
                    pub fn set_status_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::HitStatus,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25HitModule__set_whole_implEPNS_26BattleObjectModuleAccessorENS_9HitStatusEi"]
                    pub fn set_whole(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::HitStatus,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25HitModule__get_whole_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_whole(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31HitModule__set_check_catch_implEPNS_26BattleObjectModuleAccessorEbi"]
                    pub fn set_check_catch(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30HitModule__set_xlu_global_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn set_xlu_global(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33HitModule__cancel_xlu_global_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn cancel_xlu_global(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36HitModule__set_xlu_frame_global_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn set_xlu_frame_global(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43HitModule__set_invincible_frame_global_implEPNS_26BattleObjectModuleAccessorEibi"]
                    pub fn set_invincible_frame_global(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                        arg4: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26HitModule__get_status_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32HitModule__get_total_status_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_total_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41HitModule__get_total_status_disguise_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_total_status_disguise(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41HitModule__set_total_status_disguise_implEPNS_26BattleObjectModuleAccessorENS_9HitStatusEi"]
                    pub fn set_total_status_disguise(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::HitStatus,
                        arg3: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind29HitModule__get_part_size_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_part_size(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27HitModule__set_no_team_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_no_team(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32HitModule__set_hit_stop_mul_implEPNS_26BattleObjectModuleAccessorEfNS_16HitStopMulTargetEf"]
                    pub fn set_hit_stop_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: root::app::HitStopMulTarget,
                        arg4: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30HitModule__get_center_pos_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_center_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38HitModule__set_defense_mul_status_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_defense_mul_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind25HitModule__exist_log_implEPNS_26BattleObjectModuleAccessorEji"]
                    pub fn exist_log(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: libc::c_int,
                    ) -> u64;
                }
            }
            pub mod WeaponRobotHominglaserLinkEventBurst {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind62WeaponRobotHominglaserLinkEventBurst__load_from_l2c_table_implEPNS_36WeaponRobotHominglaserLinkEventBurstERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::WeaponRobotHominglaserLinkEventBurst,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58WeaponRobotHominglaserLinkEventBurst__store_l2c_table_implEPKNS_36WeaponRobotHominglaserLinkEventBurstE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::WeaponRobotHominglaserLinkEventBurst,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58WeaponRobotHominglaserLinkEventBurst__store_l2c_table_implEPKNS_36WeaponRobotHominglaserLinkEventBurstERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::WeaponRobotHominglaserLinkEventBurst,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod LinkEventMask {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39LinkEventMask__load_from_l2c_table_implEPNS_13LinkEventMaskERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventMask,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkEventMask__store_l2c_table_implEPKNS_13LinkEventMaskE"]
                    pub fn store_l2c_table(arg1: *const root::app::LinkEventMask) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkEventMask__store_l2c_table_implEPKNS_13LinkEventMaskERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventMask,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod WeaponSnakeMissileKineticEnergyNormal {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind57WeaponSnakeMissileKineticEnergyNormal__set_direction_implEPNS_37WeaponSnakeMissileKineticEnergyNormalERKN3phx8Vector3fE"]
                    pub fn set_direction(
                        arg1: *mut root::app::WeaponSnakeMissileKineticEnergyNormal,
                        arg2: *const root::phx::Vector3f,
                    );
                }
            }
            pub mod LinkModule {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind21LinkModule__link_implEPNS_26BattleObjectModuleAccessorEij"]
                    pub fn link(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27LinkModule__unlink_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn unlink_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28LinkModule__unlink_node_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn unlink_node(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32LinkModule__unlink_node_all_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn unlink_node_all(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23LinkModule__unlink_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn unlink(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind24LinkModule__is_link_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_link(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind26LinkModule__is_linked_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_linked(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30LinkModule__get_parent_id_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn get_parent_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30LinkModule__search_parent_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn search_parent(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkModule__search_parent_attr_implEPNS_26BattleObjectModuleAccessorENS_13LinkAttributeE"]
                    pub fn search_parent_attr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::LinkAttribute,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28LinkModule__search_node_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn search_node(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkModule__send_event_parents_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40E"]
                    pub fn send_event_parents(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkModule__send_event_parents_struct_implEPNS_26BattleObjectModuleAccessorEiRNS_9LinkEventE"]
                    pub fn send_event_parents_struct(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *mut root::app::LinkEvent,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkModule__send_event_nodes_struct_implEPNS_26BattleObjectModuleAccessorEiRNS_9LinkEventEj"]
                    pub fn send_event_nodes_struct(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *mut root::app::LinkEvent,
                        arg4: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33LinkModule__send_event_nodes_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40Ej"]
                    pub fn send_event_nodes(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39LinkModule__send_event_nodes_throw_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40ES4_biii"]
                    pub fn send_event_nodes_throw(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                        arg3: root::phx::Hash40,
                        arg4: bool,
                        arg5: libc::c_int,
                        arg6: libc::c_int,
                        arg7: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkModule__get_node_object_id_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_node_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkModule__is_node_damage_reaction_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_node_damage_reaction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkModule__is_node_damage_capture_cut_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_node_damage_capture_cut(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30LinkModule__chk_link_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn chk_link_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkModule__is_valid_link_stop_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_valid_link_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36LinkModule__chk_link_visibility_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn chk_link_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31LinkModule__get_link_scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_link_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind28LinkModule__is_link_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_link_pos(arg1: *mut root::app::BattleObjectModuleAccessor) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind32LinkModule__update_link_pos_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn update_link_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31LinkModule__get_link_speed_implEPNS_26BattleObjectModuleAccessorERN3phx8Vector2fE"]
                    pub fn get_link_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *mut root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33LinkModule__get_parent_scale_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55LinkModule__get_parent_model_joint_global_position_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40Eb"]
                    pub fn get_parent_model_joint_global_position(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55LinkModule__get_parent_model_joint_global_rotation_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40Eb"]
                    pub fn get_parent_model_joint_global_rotation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkModule__get_parent_motion_frame_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_motion_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45LinkModule__get_parent_motion_whole_rate_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_motion_whole_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39LinkModule__get_parent_motion_rate_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_motion_rate(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39LinkModule__get_parent_motion_kind_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_motion_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkModule__get_parent_situation_kind_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_situation_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39LinkModule__get_parent_status_kind_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_status_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30LinkModule__get_parent_lr_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_lr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37LinkModule__get_parent_sum_speed_implEPNS_26BattleObjectModuleAccessorEii"]
                    pub fn get_parent_sum_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37LinkModule__get_parent_object_id_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51LinkModule__is_capture_damage_parent_object_id_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn is_capture_damage_parent_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31LinkModule__get_parent_pos_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36LinkModule__get_parent_prev_pos_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_prev_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31LinkModule__get_parent_rot_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_rot(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34LinkModule__get_parent_damage_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_damage(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkModule__get_parent_damage_reaction_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_damage_reaction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__get_parent_damage_power_max_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_damage_power_max(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37LinkModule__get_parent_top_angle_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_top_angle(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41LinkModule__set_node_scale_power_mul_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_node_scale_power_mul(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36LinkModule__set_node_link_scale_implEPNS_26BattleObjectModuleAccessorEfb"]
                    pub fn set_node_link_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkModule__is_parent_damage_reaction_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_parent_damage_reaction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkModule__is_parent_damage_catch_cut_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_parent_damage_catch_cut(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__get_parent_total_hit_status_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_total_hit_status(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38LinkModule__is_valid_parent_shape_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_valid_parent_shape(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__get_parent_shape_center_pos_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_shape_center_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind54LinkModule__get_parent_shape_center_pos_object_id_implEPNS_26BattleObjectModuleAccessorEjRN3phx8Vector2fE"]
                    pub fn get_parent_shape_center_pos_object_id(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                        arg3: *mut root::phx::Vector2f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__is_parent_effect_sync_scale_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_parent_effect_sync_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33LinkModule__is_link_power_up_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_link_power_up(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkModule__get_parent_power_up_attack_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_parent_power_up_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__get_parent_power_up_defense_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_parent_power_up_defense(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41LinkModule__get_parent_power_up_attr_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_parent_power_up_attr(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50LinkModule__get_parent_customize_attack_ratio_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_parent_customize_attack_ratio(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36LinkModule__is_link_node_attack_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_link_node_attack(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__get_parent_reaction_mul_4th_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_parent_reaction_mul_4th(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__is_parent_power_up_reaction_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_parent_power_up_reaction(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkModule__set_parent_hit_stop_frame_implEPNS_26BattleObjectModuleAccessorEiib"]
                    pub fn set_parent_hit_stop_frame(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_int,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41LinkModule__set_parent_attacker_info_implEPNS_26BattleObjectModuleAccessorEij"]
                    pub fn set_parent_attacker_info(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind39LinkModule__set_node_attacker_info_implEPNS_26BattleObjectModuleAccessorEij"]
                    pub fn set_node_attacker_info(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45LinkModule__set_parent_log_damage_player_implEPNS_26BattleObjectModuleAccessorEijii"]
                    pub fn set_parent_log_damage_player(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                        arg4: libc::c_int,
                        arg5: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkModule__set_node_log_damage_player_implEPNS_26BattleObjectModuleAccessorEijii"]
                    pub fn set_node_log_damage_player(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: libc::c_uint,
                        arg4: libc::c_int,
                        arg5: libc::c_int,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38LinkModule__set_node_depth_offset_implEPNS_26BattleObjectModuleAccessorEif"]
                    pub fn set_node_depth_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48LinkModule__get_parent_have_item_visibility_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_have_item_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50LinkModule__get_parent_attach_item_visibility_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_attach_item_visibility(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38LinkModule__get_parent_main_color_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_main_color(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkModule__is_parent_enable_sub_color_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_parent_enable_sub_color(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37LinkModule__get_parent_sub_color_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_sub_color(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind46LinkModule__get_parent_battle_object_kind_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_battle_object_kind(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind60LinkModule__get_parent_object_id_motion_transactor_link_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_parent_object_id_motion_transactor_link(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45LinkModule__set_model_constraint_pos_ort_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40ES4_jb"]
                    pub fn set_model_constraint_pos_ort(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: root::phx::Hash40,
                        arg5: libc::c_uint,
                        arg6: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47LinkModule__set_model_constraint_attribute_implEPNS_26BattleObjectModuleAccessorEib"]
                    pub fn set_model_constraint_attribute(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkModule__get_model_constraint_flag_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_model_constraint_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkModule__set_model_constraint_flag_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn set_model_constraint_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkModule__off_model_constraint_flag_implEPNS_26BattleObjectModuleAccessorEj"]
                    pub fn off_model_constraint_flag(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_uint,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkModule__get_model_constraint_joint_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_model_constraint_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50LinkModule__get_model_constraint_target_joint_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_model_constraint_target_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkModule__set_model_constraint_joint_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn set_model_constraint_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50LinkModule__set_model_constraint_target_joint_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn set_model_constraint_target_joint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkModule__get_model_constraint_no_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_model_constraint_no(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48LinkModule__adjust_model_constraint_posture_implEPNS_26BattleObjectModuleAccessorEPKN3phx8Vector3fES6_"]
                    pub fn adjust_model_constraint_posture(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                        arg3: *const root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40LinkModule__remove_model_constraint_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn remove_model_constraint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36LinkModule__is_model_constraint_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_model_constraint(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkModule__is_model_constraint_mutual_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_model_constraint_mutual(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58LinkModule__get_model_constraint_target_node_position_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_model_constraint_target_node_position(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59LinkModule__get_model_constraint_joint_global_position_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn get_model_constraint_joint_global_position(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind69LinkModule__get_model_constraint_joint_global_position_recursive_implEPNS_26BattleObjectModuleAccessorEN3phx6Hash40E"]
                    pub fn get_model_constraint_joint_global_position_recursive(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59LinkModule__get_model_constraint_target_joint_rotation_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_model_constraint_target_joint_rotation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34LinkModule__get_node_rotation_implEPNS_26BattleObjectModuleAccessorEiN3phx6Hash40ERNS3_8Vector3fE"]
                    pub fn get_node_rotation(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::phx::Hash40,
                        arg4: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind43LinkModule__get_constraint_model_scale_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_constraint_model_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48LinkModule__get_constraint_translate_offset_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn get_constraint_translate_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind50LinkModule__is_change_model_constraint_matrix_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn is_change_model_constraint_matrix(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30LinkModule__set_attribute_implEPNS_26BattleObjectModuleAccessorEiNS_13LinkAttributeEb"]
                    pub fn set_attribute(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::LinkAttribute,
                        arg4: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30LinkModule__chk_attribute_implEPNS_26BattleObjectModuleAccessorEiNS_13LinkAttributeE"]
                    pub fn chk_attribute(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: root::app::LinkAttribute,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37LinkModule__chk_linked_attribute_implEPNS_26BattleObjectModuleAccessorENS_13LinkAttributeE"]
                    pub fn chk_linked_attribute(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: root::app::LinkAttribute,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind36LinkModule__is_link_parent_slow_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_link_parent_slow(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31LinkModule__is_parent_flip_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_parent_flip(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkModule__is_parent_hit_stop_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_parent_hit_stop(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkModule__get_parent_stick_x_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_stick_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37LinkModule__get_node_catprue_pos_implEPNS_26BattleObjectModuleAccessorEiRN3phx8Vector3fE"]
                    pub fn get_node_catprue_pos(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                        arg3: *mut root::phx::Vector3f,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkModule__get_node_sum_speed_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_node_sum_speed(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind31LinkModule__get_node_scale_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_node_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__set_constraint_rot_offset_x_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_constraint_rot_offset_x(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__set_constraint_rot_offset_y_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_constraint_rot_offset_y(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__set_constraint_rot_offset_z_implEPNS_26BattleObjectModuleAccessorEf"]
                    pub fn set_constraint_rot_offset_z(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind42LinkModule__set_constraint_rot_offset_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_constraint_rot_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__set_constraint_scale_offset_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_constraint_scale_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind48LinkModule__set_constraint_translate_offset_implEPNS_26BattleObjectModuleAccessorERKN3phx8Vector3fE"]
                    pub fn set_constraint_translate_offset(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: *const root::phx::Vector3f,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind45LinkModule__set_unreference_parent_scale_implEPNS_26BattleObjectModuleAccessorEb"]
                    pub fn set_unreference_parent_scale(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: bool,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44LinkModule__model_constraint_node_top_z_implEPNS_26BattleObjectModuleAccessorE"]
                    pub fn model_constraint_node_top_z(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind35LinkModule__is_parent_spycloak_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn is_parent_spycloak(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> bool;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind41LinkModule__get_parent_model_visible_implEPNS_26BattleObjectModuleAccessorEi"]
                    pub fn get_parent_model_visible(
                        arg1: *mut root::app::BattleObjectModuleAccessor,
                        arg2: libc::c_int,
                    ) -> u64;
                }
            }
            pub mod WeaponShizueFishingrodLinkEventCut {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind60WeaponShizueFishingrodLinkEventCut__load_from_l2c_table_implEPNS_34WeaponShizueFishingrodLinkEventCutERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::WeaponShizueFishingrodLinkEventCut,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind56WeaponShizueFishingrodLinkEventCut__store_l2c_table_implEPKNS_34WeaponShizueFishingrodLinkEventCutE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::WeaponShizueFishingrodLinkEventCut,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind56WeaponShizueFishingrodLinkEventCut__store_l2c_table_implEPKNS_34WeaponShizueFishingrodLinkEventCutERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::WeaponShizueFishingrodLinkEventCut,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod WeaponSnakeNikitaMissileKineticEnergyNormal {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind59WeaponSnakeNikitaMissileKineticEnergyNormal__set_rot_z_implEPNS_43WeaponSnakeNikitaMissileKineticEnergyNormalEf"]
                    pub fn set_rot_z(
                        arg1: *mut root::app::WeaponSnakeNikitaMissileKineticEnergyNormal,
                        arg2: f32,
                    );
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind55WeaponSnakeNikitaMissileKineticEnergyNormal__rot_z_implEPNS_43WeaponSnakeNikitaMissileKineticEnergyNormalE"]
                    pub fn rot_z(
                        arg1: *mut root::app::WeaponSnakeNikitaMissileKineticEnergyNormal,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind64WeaponSnakeNikitaMissileKineticEnergyNormal__set_enable_rot_implEPNS_43WeaponSnakeNikitaMissileKineticEnergyNormalEb"]
                    pub fn set_enable_rot(
                        arg1: *mut root::app::WeaponSnakeNikitaMissileKineticEnergyNormal,
                        arg2: bool,
                    );
                }
            }
            pub mod WeaponShizueFishingrodLinkEventShoot {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind62WeaponShizueFishingrodLinkEventShoot__load_from_l2c_table_implEPNS_36WeaponShizueFishingrodLinkEventShootERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::WeaponShizueFishingrodLinkEventShoot,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58WeaponShizueFishingrodLinkEventShoot__store_l2c_table_implEPKNS_36WeaponShizueFishingrodLinkEventShootE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::WeaponShizueFishingrodLinkEventShoot,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind58WeaponShizueFishingrodLinkEventShoot__store_l2c_table_implEPKNS_36WeaponShizueFishingrodLinkEventShootERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::WeaponShizueFishingrodLinkEventShoot,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEvent {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38GimmickEvent__load_from_l2c_table_implEPNS_12GimmickEventERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEvent,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34GimmickEvent__store_l2c_table_implEPKNS_12GimmickEventE"]
                    pub fn store_l2c_table(arg1: *const root::app::GimmickEvent) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34GimmickEvent__store_l2c_table_implEPKNS_12GimmickEventERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEvent,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventSlashLockInfo {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind51GimmickEventSlashLockInfo__load_from_l2c_table_implEPNS_25GimmickEventSlashLockInfoERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventSlashLockInfo,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47GimmickEventSlashLockInfo__store_l2c_table_implEPKNS_25GimmickEventSlashLockInfoE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::GimmickEventSlashLockInfo,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind47GimmickEventSlashLockInfo__store_l2c_table_implEPKNS_25GimmickEventSlashLockInfoERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventSlashLockInfo,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterPikminLinkEventWeaponPikminChangeStatus {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind72FighterPikminLinkEventWeaponPikminChangeStatus__load_from_l2c_table_implEPNS_46FighterPikminLinkEventWeaponPikminChangeStatusERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::FighterPikminLinkEventWeaponPikminChangeStatus,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind68FighterPikminLinkEventWeaponPikminChangeStatus__store_l2c_table_implEPKNS_46FighterPikminLinkEventWeaponPikminChangeStatusE"]
                    pub fn store_l2c_table(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminChangeStatus,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind68FighterPikminLinkEventWeaponPikminChangeStatus__store_l2c_table_implEPKNS_46FighterPikminLinkEventWeaponPikminChangeStatusERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::FighterPikminLinkEventWeaponPikminChangeStatus,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod GimmickEventSpring {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind44GimmickEventSpring__load_from_l2c_table_implEPNS_18GimmickEventSpringERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::GimmickEventSpring,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GimmickEventSpring__store_l2c_table_implEPKNS_18GimmickEventSpringE"]
                    pub fn store_l2c_table(arg1: *const root::app::GimmickEventSpring)
                        -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind40GimmickEventSpring__store_l2c_table_implEPKNS_18GimmickEventSpringERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::GimmickEventSpring,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod LinkEventPos {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind38LinkEventPos__load_from_l2c_table_implEPNS_12LinkEventPosERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::LinkEventPos,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34LinkEventPos__store_l2c_table_implEPKNS_12LinkEventPosE"]
                    pub fn store_l2c_table(arg1: *const root::app::LinkEventPos) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34LinkEventPos__store_l2c_table_implEPKNS_12LinkEventPosERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::LinkEventPos,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod Rhombus2 {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind34Rhombus2__load_from_l2c_table_implEPNS_8Rhombus2ERKN3lib8L2CValueE"]
                    pub fn load_from_l2c_table(
                        arg1: *mut root::app::Rhombus2,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30Rhombus2__store_l2c_table_implEPKNS_8Rhombus2E"]
                    pub fn store_l2c_table(arg1: *const root::app::Rhombus2) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30Rhombus2__store_l2c_table_implEPKNS_8Rhombus2ERKN3lib8L2CValueE"]
                    pub fn store_l2c_table1(
                        arg1: *const root::app::Rhombus2,
                        arg2: *const root::lib::L2CValue,
                    ) -> u64;
                }
            }
            pub mod FighterEntry {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind30FighterEntry__fighter_num_implEPNS_12FighterEntryE"]
                    pub fn fighter_num(arg1: *mut root::app::FighterEntry) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind33FighterEntry__get_fighter_id_implEPNS_12FighterEntryEib"]
                    pub fn get_fighter_id(
                        arg1: *mut root::app::FighterEntry,
                        arg2: libc::c_int,
                        arg3: bool,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind37FighterEntry__current_fighter_id_implEPNS_12FighterEntryE"]
                    pub fn current_fighter_id(arg1: *mut root::app::FighterEntry) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind23FighterEntry__heal_implEPNS_12FighterEntryEfbiN3phx6Hash40E"]
                    pub fn heal(
                        arg1: *mut root::app::FighterEntry,
                        arg2: f32,
                        arg3: bool,
                        arg4: libc::c_int,
                        arg5: root::phx::Hash40,
                    ) -> u64;
                }
                extern "C" {
                    #[link_name = "\u{1}_ZN3app8lua_bind27FighterEntry__eat_item_implEPNS_12FighterEntryERNS_18LinkEventTouchItemEb"]
                    pub fn eat_item(
                        arg1: *mut root::app::FighterEntry,
                        arg2: *mut root::app::LinkEventTouchItem,
                        arg3: bool,
                    ) -> u64;
                }
            }
        }
        pub mod sv_animcmd {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18ADD_SPEED_NO_LIMITEP9lua_State"]
                pub fn ADD_SPEED_NO_LIMIT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd26AFTER_IMAGE4_ON_WORK_arg29EP9lua_State"]
                pub fn AFTER_IMAGE4_ON_WORK_arg29(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd21AFTER_IMAGE4_ON_arg29EP9lua_State"]
                pub fn AFTER_IMAGE4_ON_arg29(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd15AFTER_IMAGE_OFFEP9lua_State"]
                pub fn AFTER_IMAGE_OFF(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13AREA_WIND_2NDEP9lua_State"]
                pub fn AREA_WIND_2ND(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17AREA_WIND_2ND_RADEP9lua_State"]
                pub fn AREA_WIND_2ND_RAD(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd22AREA_WIND_2ND_RAD_arg9EP9lua_State"]
                pub fn AREA_WIND_2ND_RAD_arg9(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19AREA_WIND_2ND_arg10EP9lua_State"]
                pub fn AREA_WIND_2ND_arg10(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd11ATK_HIT_ABSEP9lua_State"]
                pub fn ATK_HIT_ABS(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd14ATK_LERP_RATIOEP9lua_State"]
                pub fn ATK_LERP_RATIO(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd33ATK_NO_REACTION_SEARCH_WITCH_TIMEEP9lua_State"]
                pub fn ATK_NO_REACTION_SEARCH_WITCH_TIME(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd9ATK_POWEREP9lua_State"]
                pub fn ATK_POWER(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd25ATK_SET_SHIELD_SETOFF_MULEP9lua_State"]
                pub fn ATK_SET_SHIELD_SETOFF_MUL(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd30ATK_SET_SHIELD_SETOFF_MUL_arg3EP9lua_State"]
                pub fn ATK_SET_SHIELD_SETOFF_MUL_arg3(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd30ATK_SET_SHIELD_SETOFF_MUL_arg4EP9lua_State"]
                pub fn ATK_SET_SHIELD_SETOFF_MUL_arg4(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd30ATK_SET_SHIELD_SETOFF_MUL_arg5EP9lua_State"]
                pub fn ATK_SET_SHIELD_SETOFF_MUL_arg5(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd6ATTACKEP9lua_State"]
                pub fn ATTACK(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd10ATTACK_ABSEP9lua_State"]
                pub fn ATTACK_ABS(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19ATTACK_IGNORE_THROWEP9lua_State"]
                pub fn ATTACK_IGNORE_THROW(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd49BACK_GROUND_EFFECT_STAGE_SET_HIDING_FOR_DIRECTIONEP9lua_State"]
                pub fn BACK_GROUND_EFFECT_STAGE_SET_HIDING_FOR_DIRECTION(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd10BURN_COLOREP9lua_State"]
                pub fn BURN_COLOR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16BURN_COLOR_FRAMEEP9lua_State"]
                pub fn BURN_COLOR_FRAME(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17BURN_COLOR_NORMALEP9lua_State"]
                pub fn BURN_COLOR_NORMAL(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17CAM_ZOOM_IN_FINALEP9lua_State"]
                pub fn CAM_ZOOM_IN_FINAL(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd23CAM_ZOOM_IN_FINAL_arg13EP9lua_State"]
                pub fn CAM_ZOOM_IN_FINAL_arg13(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16CAM_ZOOM_IN_arg5EP9lua_State"]
                pub fn CAM_ZOOM_IN_arg5(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16CAM_ZOOM_IN_arg6EP9lua_State"]
                pub fn CAM_ZOOM_IN_arg6(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd12CAM_ZOOM_OUTEP9lua_State"]
                pub fn CAM_ZOOM_OUT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18CAM_ZOOM_OUT_FINALEP9lua_State"]
                pub fn CAM_ZOOM_OUT_FINAL(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18CANCEL_FILL_SCREENEP9lua_State"]
                pub fn CANCEL_FILL_SCREEN(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd5CATCHEP9lua_State"]
                pub fn CATCH(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19CHECK_FINISH_CAMERAEP9lua_State"]
                pub fn CHECK_FINISH_CAMERA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd34CHECK_FINISH_CAMERA_IF_NOT_HP_MODEEP9lua_State"]
                pub fn CHECK_FINISH_CAMERA_IF_NOT_HP_MODE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd30CHECK_VALID_FINAL_START_CAMERAEP9lua_State"]
                pub fn CHECK_VALID_FINAL_START_CAMERA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd9CLR_SPEEDEP9lua_State"]
                pub fn CLR_SPEED(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16COLOR_COLLECTIONEP9lua_State"]
                pub fn COLOR_COLLECTION(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd10COL_NORMALEP9lua_State"]
                pub fn COL_NORMAL(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd7COL_PRIEP9lua_State"]
                pub fn COL_PRI(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd7CORRECTEP9lua_State"]
                pub fn CORRECT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd11DOWN_EFFECTEP9lua_State"]
                pub fn DOWN_EFFECT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd6EFFECTEP9lua_State"]
                pub fn EFFECT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd12EFFECT_ALPHAEP9lua_State"]
                pub fn EFFECT_ALPHA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd11EFFECT_ATTREP9lua_State"]
                pub fn EFFECT_ATTR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd23EFFECT_BRANCH_SITUATIONEP9lua_State"]
                pub fn EFFECT_BRANCH_SITUATION(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd12EFFECT_COLOREP9lua_State"]
                pub fn EFFECT_COLOR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17EFFECT_COLOR_WORKEP9lua_State"]
                pub fn EFFECT_COLOR_WORK(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18EFFECT_DETACH_KINDEP9lua_State"]
                pub fn EFFECT_DETACH_KIND(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd23EFFECT_DETACH_KIND_WORKEP9lua_State"]
                pub fn EFFECT_DETACH_KIND_WORK(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd11EFFECT_FLIPEP9lua_State"]
                pub fn EFFECT_FLIP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17EFFECT_FLIP_ALPHAEP9lua_State"]
                pub fn EFFECT_FLIP_ALPHA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd14EFFECT_FLW_POSEP9lua_State"]
                pub fn EFFECT_FLW_POS(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd22EFFECT_FLW_POS_NO_STOPEP9lua_State"]
                pub fn EFFECT_FLW_POS_NO_STOP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd25EFFECT_FLW_POS_UNSYNC_VISEP9lua_State"]
                pub fn EFFECT_FLW_POS_UNSYNC_VIS(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd21EFFECT_FLW_UNSYNC_VISEP9lua_State"]
                pub fn EFFECT_FLW_UNSYNC_VIS(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13EFFECT_FOLLOWEP9lua_State"]
                pub fn EFFECT_FOLLOW(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19EFFECT_FOLLOW_ALPHAEP9lua_State"]
                pub fn EFFECT_FOLLOW_ALPHA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19EFFECT_FOLLOW_COLOREP9lua_State"]
                pub fn EFFECT_FOLLOW_COLOR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18EFFECT_FOLLOW_FLIPEP9lua_State"]
                pub fn EFFECT_FOLLOW_FLIP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd24EFFECT_FOLLOW_FLIP_ALPHAEP9lua_State"]
                pub fn EFFECT_FOLLOW_FLIP_ALPHA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd24EFFECT_FOLLOW_FLIP_COLOREP9lua_State"]
                pub fn EFFECT_FOLLOW_FLIP_COLOR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd22EFFECT_FOLLOW_FLIP_RNDEP9lua_State"]
                pub fn EFFECT_FOLLOW_FLIP_RND(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd24EFFECT_FOLLOW_FLIP_arg13EP9lua_State"]
                pub fn EFFECT_FOLLOW_FLIP_arg13(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19EFFECT_FOLLOW_LIGHTEP9lua_State"]
                pub fn EFFECT_FOLLOW_LIGHT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd22EFFECT_FOLLOW_NO_SCALEEP9lua_State"]
                pub fn EFFECT_FOLLOW_NO_SCALE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd21EFFECT_FOLLOW_NO_STOPEP9lua_State"]
                pub fn EFFECT_FOLLOW_NO_STOP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd26EFFECT_FOLLOW_NO_STOP_FLIPEP9lua_State"]
                pub fn EFFECT_FOLLOW_NO_STOP_FLIP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17EFFECT_FOLLOW_RNDEP9lua_State"]
                pub fn EFFECT_FOLLOW_RND(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd22EFFECT_FOLLOW_RND_WORKEP9lua_State"]
                pub fn EFFECT_FOLLOW_RND_WORK(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd30EFFECT_FOLLOW_UNSYNC_VIS_WHOLEEP9lua_State"]
                pub fn EFFECT_FOLLOW_UNSYNC_VIS_WHOLE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd23EFFECT_FOLLOW_VARIATIONEP9lua_State"]
                pub fn EFFECT_FOLLOW_VARIATION(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18EFFECT_FOLLOW_WORKEP9lua_State"]
                pub fn EFFECT_FOLLOW_WORK(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19EFFECT_FOLLOW_arg11EP9lua_State"]
                pub fn EFFECT_FOLLOW_arg11(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19EFFECT_FOLLOW_arg12EP9lua_State"]
                pub fn EFFECT_FOLLOW_arg12(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13EFFECT_GLOBALEP9lua_State"]
                pub fn EFFECT_GLOBAL(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd25EFFECT_GLOBAL_BACK_GROUNDEP9lua_State"]
                pub fn EFFECT_GLOBAL_BACK_GROUND(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd41EFFECT_GLOBAL_BACK_GROUND_CENTER_TOP_NODEEP9lua_State"]
                pub fn EFFECT_GLOBAL_BACK_GROUND_CENTER_TOP_NODE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd43EFFECT_GLOBAL_BACK_GROUND_CUT_IN_CENTER_POSEP9lua_State"]
                pub fn EFFECT_GLOBAL_BACK_GROUND_CUT_IN_CENTER_POS(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16EFFECT_LIGHT_ENDEP9lua_State"]
                pub fn EFFECT_LIGHT_END(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd10EFFECT_OFFEP9lua_State"]
                pub fn EFFECT_OFF(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17EFFECT_OFF_HANDLEEP9lua_State"]
                pub fn EFFECT_OFF_HANDLE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd15EFFECT_OFF_KINDEP9lua_State"]
                pub fn EFFECT_OFF_KIND(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd20EFFECT_OFF_KIND_WORKEP9lua_State"]
                pub fn EFFECT_OFF_KIND_WORK(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18EFFECT_REMOVE_ATTREP9lua_State"]
                pub fn EFFECT_REMOVE_ATTR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18EFFECT_STENCIL_OFFEP9lua_State"]
                pub fn EFFECT_STENCIL_OFF(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17EFFECT_STENCIL_ONEP9lua_State"]
                pub fn EFFECT_STENCIL_ON(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16EFFECT_VARIATIONEP9lua_State"]
                pub fn EFFECT_VARIATION(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd11EFFECT_WORKEP9lua_State"]
                pub fn EFFECT_WORK(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13EFFECT_WORK_REP9lua_State"]
                pub fn EFFECT_WORK_R(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd11ENABLE_AREAEP9lua_State"]
                pub fn ENABLE_AREA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18FILL_SCREEN_LEGACYEP9lua_State"]
                pub fn FILL_SCREEN_LEGACY(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd23FILL_SCREEN_MODEL_COLOREP9lua_State"]
                pub fn FILL_SCREEN_MODEL_COLOR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16FILL_SCREEN_arg9EP9lua_State"]
                pub fn FILL_SCREEN_arg9(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd5FLASHEP9lua_State"]
                pub fn FLASH(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd9FLASH_FRMEP9lua_State"]
                pub fn FLASH_FRM(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13FLASH_NO_STOPEP9lua_State"]
                pub fn FLASH_NO_STOP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd31FLASH_SET_LAST_ATTACK_DIRECTIONEP9lua_State"]
                pub fn FLASH_SET_LAST_ATTACK_DIRECTION(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd11FOOT_EFFECTEP9lua_State"]
                pub fn FOOT_EFFECT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16FOOT_EFFECT_FLIPEP9lua_State"]
                pub fn FOOT_EFFECT_FLIP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13FT_ADD_DAMAGEEP9lua_State"]
                pub fn FT_ADD_DAMAGE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd26FT_ATTACK_ABS_CAMERA_QUAKEEP9lua_State"]
                pub fn FT_ATTACK_ABS_CAMERA_QUAKE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13FT_CATCH_STOPEP9lua_State"]
                pub fn FT_CATCH_STOP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd21FT_DISABLE_CURRY_FACEEP9lua_State"]
                pub fn FT_DISABLE_CURRY_FACE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd27FT_IS_SAME_FIGHTER_CATEGORYEP9lua_State"]
                pub fn FT_IS_SAME_FIGHTER_CATEGORY(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd21FT_LEAVE_NEAR_OTTOTTOEP9lua_State"]
                pub fn FT_LEAVE_NEAR_OTTOTTO(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd26FT_MOTION_CHANGE_HAVE_ITEMEP9lua_State"]
                pub fn FT_MOTION_CHANGE_HAVE_ITEM(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd23FT_MOTION_INTP_TURN_ENDEP9lua_State"]
                pub fn FT_MOTION_INTP_TURN_END(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19FT_MOTION_INTP_WAITEP9lua_State"]
                pub fn FT_MOTION_INTP_WAIT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd14FT_MOTION_RATEEP9lua_State"]
                pub fn FT_MOTION_RATE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd20FT_REMOVE_FINAL_AURAEP9lua_State"]
                pub fn FT_REMOVE_FINAL_AURA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd22FT_SET_FINAL_FEAR_FACEEP9lua_State"]
                pub fn FT_SET_FINAL_FEAR_FACE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd24FT_SET_FINAL_SMASH_LIGHTEP9lua_State"]
                pub fn FT_SET_FINAL_SMASH_LIGHT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd35FT_SHOOTING_ATTACK_GROUND_CHECK_NEWEP9lua_State"]
                pub fn FT_SHOOTING_ATTACK_GROUND_CHECK_NEW(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd40FT_SHOOTING_ATTACK_GROUND_CHECK_NEW_arg5EP9lua_State"]
                pub fn FT_SHOOTING_ATTACK_GROUND_CHECK_NEW_arg5(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd33FT_START_ADJUST_MOTION_FRAME_arg1EP9lua_State"]
                pub fn FT_START_ADJUST_MOTION_FRAME_arg1(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd14FT_START_CUTINEP9lua_State"]
                pub fn FT_START_CUTIN(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd25FT_START_CUTIN_JACK_FINALEP9lua_State"]
                pub fn FT_START_CUTIN_JACK_FINAL(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19FT_START_CUTIN_arg1EP9lua_State"]
                pub fn FT_START_CUTIN_arg1(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd21FT_UPDATE_FACE_MOTIONEP9lua_State"]
                pub fn FT_UPDATE_FACE_MOTION(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16GET_VOICE_REGIONEP9lua_State"]
                pub fn GET_VOICE_REGION(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd20GET_VOICE_REGION_NEWEP9lua_State"]
                pub fn GET_VOICE_REGION_NEW(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19GET_VOICE_VARIATIONEP9lua_State"]
                pub fn GET_VOICE_VARIATION(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd6HIT_NOEP9lua_State"]
                pub fn HIT_NO(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd8HIT_NODEEP9lua_State"]
                pub fn HIT_NODE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13HIT_RESET_ALLEP9lua_State"]
                pub fn HIT_RESET_ALL(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16IS_EXIST_ARTICLEEP9lua_State"]
                pub fn IS_EXIST_ARTICLE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd22IS_FIGHTER_STATUS_KINDEP9lua_State"]
                pub fn IS_FIGHTER_STATUS_KIND(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd22IS_GENERATABLE_ARTICLEEP9lua_State"]
                pub fn IS_GENERATABLE_ARTICLE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17IS_HAVE_ITEM_KINDEP9lua_State"]
                pub fn IS_HAVE_ITEM_KIND(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd7IS_MENUEP9lua_State"]
                pub fn IS_MENU(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd9IS_RANDOMEP9lua_State"]
                pub fn IS_RANDOM(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd14IS_STATUS_KINDEP9lua_State"]
                pub fn IS_STATUS_KIND(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd14LANDING_EFFECTEP9lua_State"]
                pub fn LANDING_EFFECT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19LANDING_EFFECT_FLIPEP9lua_State"]
                pub fn LANDING_EFFECT_FLIP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd21LAST_EFFECT_SET_ALPHAEP9lua_State"]
                pub fn LAST_EFFECT_SET_ALPHA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd21LAST_EFFECT_SET_COLOREP9lua_State"]
                pub fn LAST_EFFECT_SET_COLOR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd35LAST_EFFECT_SET_DISABLE_SYSTEM_SLOWEP9lua_State"]
                pub fn LAST_EFFECT_SET_DISABLE_SYSTEM_SLOW(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd37LAST_EFFECT_SET_OFFSET_TO_CAMERA_FLATEP9lua_State"]
                pub fn LAST_EFFECT_SET_OFFSET_TO_CAMERA_FLAT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd20LAST_EFFECT_SET_RATEEP9lua_State"]
                pub fn LAST_EFFECT_SET_RATE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd25LAST_EFFECT_SET_RATE_WORKEP9lua_State"]
                pub fn LAST_EFFECT_SET_RATE_WORK(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd23LAST_EFFECT_SET_SCALE_WEP9lua_State"]
                pub fn LAST_EFFECT_SET_SCALE_W(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd26LAST_EFFECT_SET_TOP_OFFSETEP9lua_State"]
                pub fn LAST_EFFECT_SET_TOP_OFFSET(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd24LAST_EFFECT_SET_WORK_INTEP9lua_State"]
                pub fn LAST_EFFECT_SET_WORK_INT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd23LAST_PARTICLE_SET_COLOREP9lua_State"]
                pub fn LAST_PARTICLE_SET_COLOR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd15PLAY_DAMAGESTOPEP9lua_State"]
                pub fn PLAY_DAMAGESTOP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd12PLAY_DOWN_SEEP9lua_State"]
                pub fn PLAY_DOWN_SE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd14PLAY_FLY_VOICEEP9lua_State"]
                pub fn PLAY_FLY_VOICE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18PLAY_ITEM_EMPTY_SEEP9lua_State"]
                pub fn PLAY_ITEM_EMPTY_SE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd15PLAY_LANDING_SEEP9lua_State"]
                pub fn PLAY_LANDING_SE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd7PLAY_SEEP9lua_State"]
                pub fn PLAY_SE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13PLAY_SEQUENCEEP9lua_State"]
                pub fn PLAY_SEQUENCE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd24PLAY_SEQUENCE_DAMAGESTOPEP9lua_State"]
                pub fn PLAY_SEQUENCE_DAMAGESTOP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13PLAY_SE_NO_3DEP9lua_State"]
                pub fn PLAY_SE_NO_3D(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd30PLAY_SE_NO_3D_FORCE_AUTO_PITCHEP9lua_State"]
                pub fn PLAY_SE_NO_3D_FORCE_AUTO_PITCH(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd14PLAY_SE_REMAINEP9lua_State"]
                pub fn PLAY_SE_REMAIN(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18PLAY_SE_SET_HANDLEEP9lua_State"]
                pub fn PLAY_SE_SET_HANDLE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd11PLAY_STATUSEP9lua_State"]
                pub fn PLAY_STATUS(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd9PLAY_STEPEP9lua_State"]
                pub fn PLAY_STEP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19PLAY_STEP_FLIPPABLEEP9lua_State"]
                pub fn PLAY_STEP_FLIPPABLE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd5QUAKEEP9lua_State"]
                pub fn QUAKE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd10QUAKE_STOPEP9lua_State"]
                pub fn QUAKE_STOP(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd14REG_LANDING_SEEP9lua_State"]
                pub fn REG_LANDING_SE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd26REMOVE_FINAL_SCREEN_EFFECTEP9lua_State"]
                pub fn REMOVE_FINAL_SCREEN_EFFECT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd22REQ_FINAL_START_CAMERAEP9lua_State"]
                pub fn REQ_FINAL_START_CAMERA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd27REQ_FINAL_START_CAMERA_arg3EP9lua_State"]
                pub fn REQ_FINAL_START_CAMERA_arg3(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd10REVERSE_LREP9lua_State"]
                pub fn REVERSE_LR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd10RUMBLE_ALLEP9lua_State"]
                pub fn RUMBLE_ALL(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd12RUMBLE_DUMMYEP9lua_State"]
                pub fn RUMBLE_DUMMY(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18RUMBLE_FINAL_OTHEREP9lua_State"]
                pub fn RUMBLE_FINAL_OTHER(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd19RUMBLE_FINAL_TARGETEP9lua_State"]
                pub fn RUMBLE_FINAL_TARGET(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd10RUMBLE_HITEP9lua_State"]
                pub fn RUMBLE_HIT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17RUMBLE_HIT_STATUSEP9lua_State"]
                pub fn RUMBLE_HIT_STATUS(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd6SA_SETEP9lua_State"]
                pub fn SA_SET(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd24SCREEN_EFFECT_SLOW_WHOLEEP9lua_State"]
                pub fn SCREEN_EFFECT_SLOW_WHOLE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd6SEARCHEP9lua_State"]
                pub fn SEARCH(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd7SET_AIREP9lua_State"]
                pub fn SET_AIR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16SET_PLAY_INHIVITEP9lua_State"]
                pub fn SET_PLAY_INHIVIT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd16SET_RATE_ARTICLEEP9lua_State"]
                pub fn SET_RATE_ARTICLE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18SET_RATE_ARTICLE_VEP9lua_State"]
                pub fn SET_RATE_ARTICLE_V(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd21SET_SEARCH_SIZE_EXISTEP9lua_State"]
                pub fn SET_SEARCH_SIZE_EXIST(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd9SET_SPEEDEP9lua_State"]
                pub fn SET_SPEED(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd12SET_SPEED_EXEP9lua_State"]
                pub fn SET_SPEED_EX(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd14SET_TAKEOUT_SEEP9lua_State"]
                pub fn SET_TAKEOUT_SE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd21SET_TAKEOUT_SE_STATUSEP9lua_State"]
                pub fn SET_TAKEOUT_SE_STATUS(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17SHOOT_ITEM_BULLETEP9lua_State"]
                pub fn SHOOT_ITEM_BULLET(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd24SHOOT_ITEM_BULLET_CHARGEEP9lua_State"]
                pub fn SHOOT_ITEM_BULLET_CHARGE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13SLOW_OPPONENTEP9lua_State"]
                pub fn SLOW_OPPONENT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd20START_INFO_FLASH_EYEEP9lua_State"]
                pub fn START_INFO_FLASH_EYE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd8STICK_LREP9lua_State"]
                pub fn STICK_LR(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd7STOP_SEEP9lua_State"]
                pub fn STOP_SE(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd10THROW_ITEMEP9lua_State"]
                pub fn THROW_ITEM(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17THROW_ITEM_OFFSETEP9lua_State"]
                pub fn THROW_ITEM_OFFSET(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd22THROW_ITEM_OFFSET_arg4EP9lua_State"]
                pub fn THROW_ITEM_OFFSET_arg4(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd17THROW_ITEM_REFLETEP9lua_State"]
                pub fn THROW_ITEM_REFLET(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd15THROW_ITEM_arg3EP9lua_State"]
                pub fn THROW_ITEM_arg3(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd11UNABLE_AREAEP9lua_State"]
                pub fn UNABLE_AREA(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd10UPDATE_ROTEP9lua_State"]
                pub fn UPDATE_ROT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd9WHOLE_HITEP9lua_State"]
                pub fn WHOLE_HIT(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd7executeEP9lua_Statef"]
                pub fn execute(arg1: u64, arg2: f32);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd5frameEP9lua_Statef"]
                pub fn frame(arg1: u64, arg2: f32);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd11frame_clearEP9lua_State"]
                pub fn frame_clear(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd15get_value_floatEP9lua_Statei"]
                pub fn get_value_float(arg1: u64, arg2: libc::c_int);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd13get_value_intEP9lua_Statei"]
                pub fn get_value_int(arg1: u64, arg2: libc::c_int);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd9is_excuteEP9lua_State"]
                pub fn is_excute(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd4stopEP9lua_State"]
                pub fn stop(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd4waitEP9lua_Statef"]
                pub fn wait(arg1: u64, arg2: f32);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd9wait_loopEP9lua_State"]
                pub fn wait_loop(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd15wait_loop_clearEP9lua_State"]
                pub fn wait_loop_clear(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app10sv_animcmd18wait_loop_sync_motEP9lua_State"]
                pub fn wait_loop_sync_mot(arg1: u64);
            }
        }
        pub mod sv_battle_object {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object17add_speed_outsideEjiRKN3phx8Vector3fE"]
                pub fn add_speed_outside() -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object7is_nullEj"]
                pub fn is_null(arg1: root::uint) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object20notify_event_msc_cmdEP9lua_State"]
                pub fn notify_event_msc_cmd(arg1: u64) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object9is_activeEj"]
                pub fn is_active(arg1: root::uint) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object8categoryEj"]
                pub fn category() -> libc::c_int;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object13fixed_scalingEjbiifi"]
                pub fn fixed_scaling(
                    arg1: root::uint,
                    arg2: bool,
                    arg3: libc::c_int,
                    arg4: libc::c_int,
                    arg5: f32,
                    arg6: libc::c_int,
                ) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object15log_attack_kindEj"]
                pub fn log_attack_kind(arg1: root::uint) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object3posEj"]
                pub fn pos(arg1: root::uint) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object18get_item_hold_kindEj"]
                pub fn get_item_hold_kind(arg1: root::uint) -> libc::c_int;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object14get_founder_idEj"]
                pub fn get_founder_id(arg1: root::uint) -> libc::c_int;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object9set_floatEjfi"]
                pub fn set_float(arg1: root::uint, arg2: f32, arg3: libc::c_int) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object33joint_global_position_with_offsetEjN3phx6Hash40ERKNS1_8Vector3fERS3_"]
                pub fn joint_global_position_with_offset(
                    arg1: root::uint,
                    arg2: u64,
                    arg3: *mut root::Vector3f,
                    arg4: *mut root::Vector3f,
                ) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object11end_inhaledEjb"]
                pub fn end_inhaled(arg1: root::uint, arg2: bool) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object30set_power_mul_region_attr_infoERNS_26BattleObjectModuleAccessorES2_"]
                pub fn set_power_mul_region_attr_info(arg1: u64) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object15module_accessorEj"]
                pub fn module_accessor(arg1: root::uint) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object4kindEj"]
                pub fn kind(arg1: root::uint) -> libc::c_int;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object21joint_global_positionEjN3phx6Hash40ERNS1_8Vector3fE"]
                pub fn joint_global_position(
                    arg1: root::uint,
                    arg2: u64,
                    arg3: *mut root::Vector3f,
                ) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_battle_object8entry_idEj"]
                pub fn entry_id(arg1: root::uint) -> libc::c_int;
            }
        }
        pub mod sv_kinetic_energy {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy11clear_speedEP9lua_State"]
                pub fn clear_speed(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy11friction_onEP9lua_State"]
                pub fn friction_on(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy11get_accel_yEP9lua_State"]
                pub fn get_accel_y(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy11get_brake_yEP9lua_State"]
                pub fn get_brake_y(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy11get_speed3fEP9lua_State"]
                pub fn get_speed3f(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy11get_speed_xEP9lua_State"]
                pub fn get_speed_x(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy11get_speed_yEP9lua_State"]
                pub fn get_speed_y(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy12friction_offEP9lua_State"]
                pub fn friction_off(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy12get_rotationEP9lua_State"]
                pub fn get_rotation(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy12reset_energyEP9lua_State"]
                pub fn reset_energy(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy13get_speed_mulEP9lua_State"]
                pub fn get_speed_mul(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy13set_chara_dirEP9lua_State"]
                pub fn set_chara_dir(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy13set_speed_mulEP9lua_State"]
                pub fn set_speed_mul(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy14clear_speed_exEP9lua_State"]
                pub fn clear_speed_ex(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy14get_rotation_xEP9lua_State"]
                pub fn get_rotation_x(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy14get_rotation_yEP9lua_State"]
                pub fn get_rotation_y(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy14get_rotation_zEP9lua_State"]
                pub fn get_rotation_z(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy15mul_x_accel_addEP9lua_State"]
                pub fn mul_x_accel_add(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy15mul_x_accel_mulEP9lua_State"]
                pub fn mul_x_accel_mul(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy15mul_x_speed_maxEP9lua_State"]
                pub fn mul_x_speed_max(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy15set_accel_x_addEP9lua_State"]
                pub fn set_accel_x_add(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy15set_accel_x_mulEP9lua_State"]
                pub fn set_accel_x_mul(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy15set_accel_y_addEP9lua_State"]
                pub fn set_accel_y_add(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy15set_accel_y_mulEP9lua_State"]
                pub fn set_accel_y_mul(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy15set_limit_speedEP9lua_State"]
                pub fn set_limit_speed(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy16get_speed_lengthEP9lua_State"]
                pub fn get_speed_length(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy16set_damage_speedEP9lua_State"]
                pub fn set_damage_speed(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy16set_ground_transEP9lua_State"]
                pub fn set_ground_trans(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy16set_stable_speedEP9lua_State"]
                pub fn set_stable_speed(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy17get_limit_speed_xEP9lua_State"]
                pub fn get_limit_speed_x(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy17get_limit_speed_yEP9lua_State"]
                pub fn get_limit_speed_y(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy17set_speed_mul_2ndEP9lua_State"]
                pub fn set_speed_mul_2nd(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy18get_stable_speed_xEP9lua_State"]
                pub fn get_stable_speed_x(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy18get_stable_speed_yEP9lua_State"]
                pub fn get_stable_speed_y(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy20is_gravity_fix_accelEP9lua_State"]
                pub fn is_gravity_fix_accel(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy21is_cliff_ground_transEP9lua_State"]
                pub fn is_cliff_ground_trans(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy23set_gravity_coefficientEP9lua_State"]
                pub fn set_gravity_coefficient(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy26controller_set_accel_x_addEP9lua_State"]
                pub fn controller_set_accel_x_add(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy26controller_set_accel_x_mulEP9lua_State"]
                pub fn controller_set_accel_x_mul(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy29set_motion_energy_update_flagEP9lua_State"]
                pub fn set_motion_energy_update_flag(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy6enableEP9lua_State"]
                pub fn enable(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy6resumeEP9lua_State"]
                pub fn resume(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy6unableEP9lua_State"]
                pub fn unable(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy7suspendEP9lua_State"]
                pub fn suspend(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy9add_speedEP9lua_State"]
                pub fn add_speed(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy9get_accelEP9lua_State"]
                pub fn get_accel(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy9get_speedEP9lua_State"]
                pub fn get_speed(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy9is_enableEP9lua_State"]
                pub fn is_enable(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy9mul_accelEP9lua_State"]
                pub fn mul_accel(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy9mul_speedEP9lua_State"]
                pub fn mul_speed(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy9set_accelEP9lua_State"]
                pub fn set_accel(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy9set_angleEP9lua_State"]
                pub fn set_angle(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy9set_brakeEP9lua_State"]
                pub fn set_brake(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app17sv_kinetic_energy9set_speedEP9lua_State"]
                pub fn set_speed(arg1: u64);
            }
        }
        pub mod sv_math {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math10vec2_angleEffff"]
                pub fn vec2_angle(arg1: f32, arg2: f32, arg3: f32, arg4: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math10vec3_crossEffffff"]
                pub fn vec3_cross(
                    arg1: f32,
                    arg2: f32,
                    arg3: f32,
                    arg4: f32,
                    arg5: f32,
                    arg6: f32,
                ) -> *mut root::Vector3f;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math11vec2_lengthEff"]
                pub fn vec2_length(arg1: f32, arg2: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math11vec3_lengthEfff"]
                pub fn vec3_length(arg1: f32, arg2: f32, arg3: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math12bezier_curveEfffff"]
                pub fn bezier_curve(arg1: f32, arg2: f32, arg3: f32, arg4: f32, arg5: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math12vec2_is_zeroEff"]
                pub fn vec2_is_zero(arg1: f32, arg2: f32) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math12vec3_is_zeroEfff"]
                pub fn vec3_is_zero(arg1: f32, arg2: f32, arg3: f32) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math13vec2_distanceEffff"]
                pub fn vec2_distance(arg1: f32, arg2: f32, arg3: f32, arg4: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math13vec3_distanceEffffff"]
                pub fn vec3_distance(
                    arg1: f32,
                    arg2: f32,
                    arg3: f32,
                    arg4: f32,
                    arg5: f32,
                    arg6: f32,
                ) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math14vec2_normalizeEff"]
                pub fn vec2_normalize(arg1: f32, arg2: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math14vec3_normalizeEfff"]
                pub fn vec3_normalize(arg1: f32, arg2: f32, arg3: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math15vec2_reflectionEffff"]
                pub fn vec2_reflection(arg1: f32, arg2: f32, arg3: f32, arg4: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math18vec2_length_squareEff"]
                pub fn vec2_length_square(arg1: f32, arg2: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math18vec3_between_angleEfffffffff"]
                pub fn vec3_between_angle(
                    arg1: f32,
                    arg2: f32,
                    arg3: f32,
                    arg4: f32,
                    arg5: f32,
                    arg6: f32,
                    arg7: f32,
                    arg8: f32,
                    arg9: f32,
                ) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math18vec3_length_squareEfff"]
                pub fn vec3_length_square(arg1: f32, arg2: f32, arg3: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math4powfEff"]
                pub fn powf(arg1: f32, arg2: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math4randEN3phx6Hash40Ei"]
                pub fn rand(arg1: u64, arg2: libc::c_int) -> libc::c_int;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math5randfEN3phx6Hash40Ef"]
                pub fn randf(arg1: u64, arg2: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math7is_zeroEf"]
                pub fn is_zero(arg1: f32) -> bool;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math8vec2_dotEffff"]
                pub fn vec2_dot(arg1: f32, arg2: f32, arg3: f32, arg4: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math8vec2_rotEfff"]
                pub fn vec2_rot(arg1: f32, arg2: f32, arg3: f32) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math8vec3_dotEffffff"]
                pub fn vec3_dot(
                    arg1: f32,
                    arg2: f32,
                    arg3: f32,
                    arg4: f32,
                    arg5: f32,
                    arg6: f32,
                ) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math8vec3_rotEffffff"]
                pub fn vec3_rot(
                    arg1: f32,
                    arg2: f32,
                    arg3: f32,
                    arg4: f32,
                    arg5: f32,
                    arg6: f32,
                ) -> f32;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app7sv_math9vec3_lerpEfffffff"]
                pub fn vec3_lerp(
                    arg1: f32,
                    arg2: f32,
                    arg3: f32,
                    arg4: f32,
                    arg5: f32,
                    arg6: f32,
                    arg7: f32,
                ) -> f32;
            }
        }
        pub mod sv_module_access {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access11color_blendEP9lua_State"]
                pub fn color_blend(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access6searchEP9lua_State"]
                pub fn search(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access7articleEP9lua_State"]
                pub fn article(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access6_catchEP9lua_State"]
                pub fn _catch(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access4linkEP9lua_State"]
                pub fn link(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access6shieldEP9lua_State"]
                pub fn shield(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access6cameraEP9lua_State"]
                pub fn camera(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access6attackEP9lua_State"]
                pub fn attack(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access5soundEP9lua_State"]
                pub fn sound(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access7physicsEP9lua_State"]
                pub fn physics(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access7captureEP9lua_State"]
                pub fn capture(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access6effectEP9lua_State"]
                pub fn effect(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access5slopeEP9lua_State"]
                pub fn slope(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access4grabEP9lua_State"]
                pub fn grab(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access6cancelEP9lua_State"]
                pub fn cancel(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access4itemEP9lua_State"]
                pub fn item(arg1: u64);
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app16sv_module_access6damageEP9lua_State"]
                pub fn damage(arg1: u64);
            }
        }
        pub mod sv_system {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "\u{1}_ZN3app9sv_system13battle_objectEP9lua_State"]
                pub fn battle_object(arg1: u64) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app9sv_system29battle_object_module_accessorEP9lua_State"]
                pub fn battle_object_module_accessor(arg1: u64) -> u64;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app9sv_system22battle_object_categoryEP9lua_State"]
                pub fn battle_object_category(arg1: u64) -> u8;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app9sv_system18battle_object_kindEP9lua_State"]
                pub fn battle_object_kind(arg1: u64) -> libc::c_int;
            }
            extern "C" {
                #[link_name = "\u{1}_ZN3app9sv_system8owner_idEP9lua_State"]
                pub fn owner_id(arg1: u64) -> libc::c_int;
            }
        }
    }
    pub type __int8_t = libc::c_schar;
    pub type __uint8_t = libc::c_uchar;
    pub type __int16_t = libc::c_short;
    pub type __uint16_t = libc::c_ushort;
    pub type __int32_t = libc::c_int;
    pub type __uint32_t = libc::c_uint;
    pub type __int64_t = libc::c_long;
    pub type __uint64_t = libc::c_ulong;
    pub type __int_least8_t = libc::c_schar;
    pub type __uint_least8_t = libc::c_uchar;
    pub type __int_least16_t = libc::c_short;
    pub type __uint_least16_t = libc::c_ushort;
    pub type __int_least32_t = libc::c_int;
    pub type __uint_least32_t = libc::c_uint;
    pub type __int_least64_t = libc::c_long;
    pub type __uint_least64_t = libc::c_ulong;
    pub type __intmax_t = libc::c_long;
    pub type __uintmax_t = libc::c_ulong;
    pub type __intptr_t = libc::c_long;
    pub type __uintptr_t = libc::c_ulong;
    pub type intmax_t = root::__intmax_t;
    pub type uintmax_t = root::__uintmax_t;
    pub type int_least8_t = root::__int_least8_t;
    pub type uint_least8_t = root::__uint_least8_t;
    pub type int_least16_t = root::__int_least16_t;
    pub type uint_least16_t = root::__uint_least16_t;
    pub type int_least32_t = root::__int_least32_t;
    pub type uint_least32_t = root::__uint_least32_t;
    pub type int_least64_t = root::__int_least64_t;
    pub type uint_least64_t = root::__uint_least64_t;
    pub type int_fast8_t = libc::c_schar;
    pub type uint_fast8_t = libc::c_uchar;
    pub type int_fast16_t = libc::c_short;
    pub type uint_fast16_t = libc::c_ushort;
    pub type int_fast32_t = libc::c_int;
    pub type uint_fast32_t = libc::c_uint;
    pub type int_fast64_t = libc::c_long;
    pub type uint_fast64_t = libc::c_ulong;
    pub type size_t = libc::c_ulong;
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct max_align_t {
        pub __clang_max_align_nonce1: libc::c_longlong,
        pub __bindgen_padding_0: u64,
        pub __clang_max_align_nonce2: u128,
    }
    pub type s8 = i8;
    pub type s16 = i16;
    pub type s32 = i32;
    pub type s64 = i64;
    pub type s128 = root::__int128_t;
    pub type vu8 = u8;
    pub type vu16 = u16;
    pub type vu32 = u32;
    pub type vu64 = u64;
    pub type vu128 = u128;
    pub type vs8 = root::s8;
    pub type vs16 = root::s16;
    pub type vs32 = root::s32;
    pub type vs64 = root::s64;
    pub type vs128 = root::s128;
    pub type Handle = u32;
    pub type Result = u32;
    pub type ThreadFunc = ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>;
    pub type VoidFn = ::core::option::Option<unsafe extern "C" fn()>;
    pub const Module_Kernel: root::_bindgen_ty_1 = 1;
    pub const Module_Libnx: root::_bindgen_ty_1 = 345;
    pub const Module_HomebrewAbi: root::_bindgen_ty_1 = 346;
    pub const Module_HomebrewLoader: root::_bindgen_ty_1 = 347;
    pub const Module_LibnxNvidia: root::_bindgen_ty_1 = 348;
    pub const Module_LibnxBinder: root::_bindgen_ty_1 = 349;
    #[doc = " Module values"]
    pub type _bindgen_ty_1 = u32;
    pub const KernelError_OutOfSessions: root::_bindgen_ty_2 = 7;
    pub const KernelError_InvalidCapabilityDescriptor: root::_bindgen_ty_2 = 14;
    pub const KernelError_NotImplemented: root::_bindgen_ty_2 = 33;
    pub const KernelError_ThreadTerminating: root::_bindgen_ty_2 = 59;
    pub const KernelError_OutOfDebugEvents: root::_bindgen_ty_2 = 70;
    pub const KernelError_InvalidSize: root::_bindgen_ty_2 = 101;
    pub const KernelError_InvalidAddress: root::_bindgen_ty_2 = 102;
    pub const KernelError_ResourceExhausted: root::_bindgen_ty_2 = 103;
    pub const KernelError_OutOfMemory: root::_bindgen_ty_2 = 104;
    pub const KernelError_OutOfHandles: root::_bindgen_ty_2 = 105;
    pub const KernelError_InvalidMemoryState: root::_bindgen_ty_2 = 106;
    pub const KernelError_InvalidMemoryPermissions: root::_bindgen_ty_2 = 108;
    pub const KernelError_InvalidMemoryRange: root::_bindgen_ty_2 = 110;
    pub const KernelError_InvalidPriority: root::_bindgen_ty_2 = 112;
    pub const KernelError_InvalidCoreId: root::_bindgen_ty_2 = 113;
    pub const KernelError_InvalidHandle: root::_bindgen_ty_2 = 114;
    pub const KernelError_InvalidUserBuffer: root::_bindgen_ty_2 = 115;
    pub const KernelError_InvalidCombination: root::_bindgen_ty_2 = 116;
    pub const KernelError_TimedOut: root::_bindgen_ty_2 = 117;
    pub const KernelError_Cancelled: root::_bindgen_ty_2 = 118;
    pub const KernelError_OutOfRange: root::_bindgen_ty_2 = 119;
    pub const KernelError_InvalidEnumValue: root::_bindgen_ty_2 = 120;
    pub const KernelError_NotFound: root::_bindgen_ty_2 = 121;
    pub const KernelError_AlreadyExists: root::_bindgen_ty_2 = 122;
    pub const KernelError_ConnectionClosed: root::_bindgen_ty_2 = 123;
    pub const KernelError_UnhandledUserInterrupt: root::_bindgen_ty_2 = 124;
    pub const KernelError_InvalidState: root::_bindgen_ty_2 = 125;
    pub const KernelError_ReservedValue: root::_bindgen_ty_2 = 126;
    pub const KernelError_InvalidHwBreakpoint: root::_bindgen_ty_2 = 127;
    pub const KernelError_FatalUserException: root::_bindgen_ty_2 = 128;
    pub const KernelError_OwnedByAnotherProcess: root::_bindgen_ty_2 = 129;
    pub const KernelError_ConnectionRefused: root::_bindgen_ty_2 = 131;
    pub const KernelError_OutOfResource: root::_bindgen_ty_2 = 132;
    pub const KernelError_IpcMapFailed: root::_bindgen_ty_2 = 259;
    pub const KernelError_IpcCmdbufTooSmall: root::_bindgen_ty_2 = 260;
    pub const KernelError_NotDebugged: root::_bindgen_ty_2 = 520;
    #[doc = " Kernel error codes"]
    pub type _bindgen_ty_2 = u32;
    pub const LibnxError_BadReloc: root::_bindgen_ty_3 = 1;
    pub const LibnxError_OutOfMemory: root::_bindgen_ty_3 = 2;
    pub const LibnxError_AlreadyMapped: root::_bindgen_ty_3 = 3;
    pub const LibnxError_BadGetInfo_Stack: root::_bindgen_ty_3 = 4;
    pub const LibnxError_BadGetInfo_Heap: root::_bindgen_ty_3 = 5;
    pub const LibnxError_BadQueryMemory: root::_bindgen_ty_3 = 6;
    pub const LibnxError_AlreadyInitialized: root::_bindgen_ty_3 = 7;
    pub const LibnxError_NotInitialized: root::_bindgen_ty_3 = 8;
    pub const LibnxError_NotFound: root::_bindgen_ty_3 = 9;
    pub const LibnxError_IoError: root::_bindgen_ty_3 = 10;
    pub const LibnxError_BadInput: root::_bindgen_ty_3 = 11;
    pub const LibnxError_BadReent: root::_bindgen_ty_3 = 12;
    pub const LibnxError_BufferProducerError: root::_bindgen_ty_3 = 13;
    pub const LibnxError_HandleTooEarly: root::_bindgen_ty_3 = 14;
    pub const LibnxError_HeapAllocFailed: root::_bindgen_ty_3 = 15;
    pub const LibnxError_TooManyOverrides: root::_bindgen_ty_3 = 16;
    pub const LibnxError_ParcelError: root::_bindgen_ty_3 = 17;
    pub const LibnxError_BadGfxInit: root::_bindgen_ty_3 = 18;
    pub const LibnxError_BadGfxEventWait: root::_bindgen_ty_3 = 19;
    pub const LibnxError_BadGfxQueueBuffer: root::_bindgen_ty_3 = 20;
    pub const LibnxError_BadGfxDequeueBuffer: root::_bindgen_ty_3 = 21;
    pub const LibnxError_AppletCmdidNotFound: root::_bindgen_ty_3 = 22;
    pub const LibnxError_BadAppletReceiveMessage: root::_bindgen_ty_3 = 23;
    pub const LibnxError_BadAppletNotifyRunning: root::_bindgen_ty_3 = 24;
    pub const LibnxError_BadAppletGetCurrentFocusState: root::_bindgen_ty_3 = 25;
    pub const LibnxError_BadAppletGetOperationMode: root::_bindgen_ty_3 = 26;
    pub const LibnxError_BadAppletGetPerformanceMode: root::_bindgen_ty_3 = 27;
    pub const LibnxError_BadUsbCommsRead: root::_bindgen_ty_3 = 28;
    pub const LibnxError_BadUsbCommsWrite: root::_bindgen_ty_3 = 29;
    pub const LibnxError_InitFail_SM: root::_bindgen_ty_3 = 30;
    pub const LibnxError_InitFail_AM: root::_bindgen_ty_3 = 31;
    pub const LibnxError_InitFail_HID: root::_bindgen_ty_3 = 32;
    pub const LibnxError_InitFail_FS: root::_bindgen_ty_3 = 33;
    pub const LibnxError_BadGetInfo_Rng: root::_bindgen_ty_3 = 34;
    pub const LibnxError_JitUnavailable: root::_bindgen_ty_3 = 35;
    pub const LibnxError_WeirdKernel: root::_bindgen_ty_3 = 36;
    pub const LibnxError_IncompatSysVer: root::_bindgen_ty_3 = 37;
    pub const LibnxError_InitFail_Time: root::_bindgen_ty_3 = 38;
    pub const LibnxError_TooManyDevOpTabs: root::_bindgen_ty_3 = 39;
    pub const LibnxError_DomainMessageUnknownType: root::_bindgen_ty_3 = 40;
    pub const LibnxError_DomainMessageTooManyObjectIds: root::_bindgen_ty_3 = 41;
    pub const LibnxError_AppletFailedToInitialize: root::_bindgen_ty_3 = 42;
    pub const LibnxError_ApmFailedToInitialize: root::_bindgen_ty_3 = 43;
    pub const LibnxError_NvinfoFailedToInitialize: root::_bindgen_ty_3 = 44;
    pub const LibnxError_NvbufFailedToInitialize: root::_bindgen_ty_3 = 45;
    pub const LibnxError_LibAppletBadExit: root::_bindgen_ty_3 = 46;
    #[doc = " libnx error codes"]
    pub type _bindgen_ty_3 = u32;
    pub const LibnxBinderError_Unknown: root::_bindgen_ty_4 = 1;
    pub const LibnxBinderError_NoMemory: root::_bindgen_ty_4 = 2;
    pub const LibnxBinderError_InvalidOperation: root::_bindgen_ty_4 = 3;
    pub const LibnxBinderError_BadValue: root::_bindgen_ty_4 = 4;
    pub const LibnxBinderError_BadType: root::_bindgen_ty_4 = 5;
    pub const LibnxBinderError_NameNotFound: root::_bindgen_ty_4 = 6;
    pub const LibnxBinderError_PermissionDenied: root::_bindgen_ty_4 = 7;
    pub const LibnxBinderError_NoInit: root::_bindgen_ty_4 = 8;
    pub const LibnxBinderError_AlreadyExists: root::_bindgen_ty_4 = 9;
    pub const LibnxBinderError_DeadObject: root::_bindgen_ty_4 = 10;
    pub const LibnxBinderError_FailedTransaction: root::_bindgen_ty_4 = 11;
    pub const LibnxBinderError_BadIndex: root::_bindgen_ty_4 = 12;
    pub const LibnxBinderError_NotEnoughData: root::_bindgen_ty_4 = 13;
    pub const LibnxBinderError_WouldBlock: root::_bindgen_ty_4 = 14;
    pub const LibnxBinderError_TimedOut: root::_bindgen_ty_4 = 15;
    pub const LibnxBinderError_UnknownTransaction: root::_bindgen_ty_4 = 16;
    pub const LibnxBinderError_FdsNotAllowed: root::_bindgen_ty_4 = 17;
    #[doc = " libnx binder error codes"]
    pub type _bindgen_ty_4 = u32;
    pub const LibnxNvidiaError_Unknown: root::_bindgen_ty_5 = 1;
    #[doc = "< Maps to Nvidia: 1"]
    pub const LibnxNvidiaError_NotImplemented: root::_bindgen_ty_5 = 2;
    #[doc = "< Maps to Nvidia: 2"]
    pub const LibnxNvidiaError_NotSupported: root::_bindgen_ty_5 = 3;
    #[doc = "< Maps to Nvidia: 3"]
    pub const LibnxNvidiaError_NotInitialized: root::_bindgen_ty_5 = 4;
    #[doc = "< Maps to Nvidia: 4"]
    pub const LibnxNvidiaError_BadParameter: root::_bindgen_ty_5 = 5;
    #[doc = "< Maps to Nvidia: 5"]
    pub const LibnxNvidiaError_Timeout: root::_bindgen_ty_5 = 6;
    #[doc = "< Maps to Nvidia: 6"]
    pub const LibnxNvidiaError_InsufficientMemory: root::_bindgen_ty_5 = 7;
    #[doc = "< Maps to Nvidia: 7"]
    pub const LibnxNvidiaError_ReadOnlyAttribute: root::_bindgen_ty_5 = 8;
    #[doc = "< Maps to Nvidia: 8"]
    pub const LibnxNvidiaError_InvalidState: root::_bindgen_ty_5 = 9;
    #[doc = "< Maps to Nvidia: 9"]
    pub const LibnxNvidiaError_InvalidAddress: root::_bindgen_ty_5 = 10;
    #[doc = "< Maps to Nvidia: 10"]
    pub const LibnxNvidiaError_InvalidSize: root::_bindgen_ty_5 = 11;
    #[doc = "< Maps to Nvidia: 11"]
    pub const LibnxNvidiaError_BadValue: root::_bindgen_ty_5 = 12;
    #[doc = "< Maps to Nvidia: 13"]
    pub const LibnxNvidiaError_AlreadyAllocated: root::_bindgen_ty_5 = 13;
    #[doc = "< Maps to Nvidia: 14"]
    pub const LibnxNvidiaError_Busy: root::_bindgen_ty_5 = 14;
    #[doc = "< Maps to Nvidia: 15"]
    pub const LibnxNvidiaError_ResourceError: root::_bindgen_ty_5 = 15;
    #[doc = "< Maps to Nvidia: 16"]
    pub const LibnxNvidiaError_CountMismatch: root::_bindgen_ty_5 = 16;
    #[doc = "< Maps to Nvidia: 0x1000"]
    pub const LibnxNvidiaError_SharedMemoryTooSmall: root::_bindgen_ty_5 = 17;
    #[doc = "< Maps to Nvidia: 0x30003"]
    pub const LibnxNvidiaError_FileOperationFailed: root::_bindgen_ty_5 = 18;
    #[doc = "< Maps to Nvidia: 0x3000F"]
    pub const LibnxNvidiaError_IoctlFailed: root::_bindgen_ty_5 = 19;
    #[doc = " libnx nvidia error codes"]
    pub type _bindgen_ty_5 = u32;
    #[doc = " Entry for each segment in the codebin."]
    #[repr(C)]
    pub struct NroSegment {
        pub file_off: u32,
        pub size: u32,
    }
    #[doc = " Offset 0x0 in the NRO."]
    #[repr(C)]
    pub struct NroStart {
        pub unused: u32,
        pub mod_offset: u32,
        pub padding: [u8; 8usize],
    }
    #[doc = " This follows NroStart, the actual nro-header."]
    #[repr(C)]
    pub struct NroHeader {
        pub magic: u32,
        pub unk1: u32,
        pub size: u32,
        pub unk2: u32,
        pub segments: [root::NroSegment; 3usize],
        pub bss_size: u32,
        pub unk3: u32,
        pub build_id: [u8; 32usize],
        pub padding: [u8; 32usize],
    }
    #[doc = " Custom asset section."]
    #[repr(C)]
    pub struct NroAssetSection {
        pub offset: u64,
        pub size: u64,
    }
    #[doc = " Custom asset header."]
    #[repr(C)]
    pub struct NroAssetHeader {
        pub magic: u32,
        pub version: u32,
        pub icon: root::NroAssetSection,
        pub nacp: root::NroAssetSection,
        pub romfs: root::NroAssetSection,
    }
    #[doc = " Language entry. These strings are UTF-8."]
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct NacpLanguageEntry {
        pub name: [libc::c_char; 512usize],
        pub author: [libc::c_char; 256usize],
    }
    #[repr(C)]
    pub struct NacpStruct {
        pub lang: [root::NacpLanguageEntry; 16usize],
        pub x3000_unk: [u8; 36usize],
        #[doc = "Normally all-zero?"]
        pub x3024_unk: u32,
        pub x3028_unk: u32,
        pub x302C_unk: u32,
        pub x3030_unk: u32,
        pub x3034_unk: u32,
        pub titleID0: u64,
        pub x3040_unk: [u8; 32usize],
        pub version: [libc::c_char; 16usize],
        pub titleID_DlcBase: u64,
        pub titleID1: u64,
        pub x3080_unk: u32,
        pub x3084_unk: u32,
        pub x3088_unk: u32,
        pub x308C_unk: [u8; 36usize],
        pub titleID2: u64,
        pub titleIDs: [u64; 7usize],
        pub x30F0_unk: u32,
        pub x30F4_unk: u32,
        pub titleID3: u64,
        pub bcatPassphrase: [libc::c_char; 64usize],
        pub x3140_unk: [u8; 3776usize],
    }
    extern "C" {
        #[doc = " Get the NacpLanguageEntry from the input nacp corresponding to the current system language (this may fallback to other languages when needed). Output langentry is NULL if none found / content of entry is empty."]
        pub fn nacpGetLanguageEntry(
            nacp: *mut root::NacpStruct,
            langentry: *mut *mut root::NacpLanguageEntry,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Performs a data cache flush on the specified buffer."]
        #[doc = " @param addr Address of the buffer."]
        #[doc = " @param size Size of the buffer, in bytes."]
        #[doc = " @remarks Cache flush is defined as Clean + Invalidate."]
        #[doc = " @note The start and end addresses of the buffer are forcibly rounded to cache line boundaries (read from CTR_EL0 system register)."]
        pub fn armDCacheFlush(addr: *mut libc::c_void, size: root::size_t);
    }
    extern "C" {
        #[doc = " @brief Performs a data cache clean on the specified buffer."]
        #[doc = " @param addr Address of the buffer."]
        #[doc = " @param size Size of the buffer, in bytes."]
        #[doc = " @note The start and end addresses of the buffer are forcibly rounded to cache line boundaries (read from CTR_EL0 system register)."]
        pub fn armDCacheClean(addr: *mut libc::c_void, size: root::size_t);
    }
    extern "C" {
        #[doc = " @brief Performs an instruction cache invalidation clean on the specified buffer."]
        #[doc = " @param addr Address of the buffer."]
        #[doc = " @param size Size of the buffer, in bytes."]
        #[doc = " @note The start and end addresses of the buffer are forcibly rounded to cache line boundaries (read from CTR_EL0 system register)."]
        pub fn armICacheInvalidate(addr: *mut libc::c_void, size: root::size_t);
    }
    extern "C" {
        #[doc = " @brief Performs a data cache zeroing operation on the specified buffer."]
        #[doc = " @param addr Address of the buffer."]
        #[doc = " @param size Size of the buffer, in bytes."]
        #[doc = " @note The start and end addresses of the buffer are forcibly rounded to cache line boundaries (read from CTR_EL0 system register)."]
        pub fn armDCacheZero(addr: *mut libc::c_void, size: root::size_t);
    }
    #[doc = " Armv8 CPU register."]
    #[repr(C)]
    pub struct CpuRegister {
        #[doc = "< 64-bit AArch64 register view."]
        pub x: root::__BindgenUnionField<u64>,
        #[doc = "< 32-bit AArch64 register view."]
        pub w: root::__BindgenUnionField<u32>,
        #[doc = "< AArch32 register view."]
        pub r: root::__BindgenUnionField<u32>,
        pub bindgen_union_field: u64,
    }
    #[doc = " Armv8 NEON register."]
    #[repr(C)]
    #[repr(align(16))]
    pub struct FpuRegister {
        #[doc = "< 128-bit vector view."]
        pub v: root::__BindgenUnionField<u128>,
        #[doc = "< 64-bit double-precision view."]
        pub d: root::__BindgenUnionField<f64>,
        #[doc = "< 32-bit single-precision view."]
        pub s: root::__BindgenUnionField<f32>,
        pub bindgen_union_field: u128,
    }
    #[doc = "< General-purpose CPU registers (x0..x28 or r0..r10,r12)."]
    pub const RegisterGroup_RegisterGroup_CpuGprs: root::RegisterGroup = 1;
    #[doc = "< Special-purpose CPU registers (fp, lr, sp, pc, PSTATE or cpsr, TPIDR_EL0)."]
    pub const RegisterGroup_RegisterGroup_CpuSprs: root::RegisterGroup = 2;
    #[doc = "< General-purpose NEON registers."]
    pub const RegisterGroup_RegisterGroup_FpuGprs: root::RegisterGroup = 4;
    #[doc = "< Special-purpose NEON registers."]
    pub const RegisterGroup_RegisterGroup_FpuSprs: root::RegisterGroup = 8;
    #[doc = "< All CPU registers."]
    pub const RegisterGroup_RegisterGroup_CpuAll: root::RegisterGroup = 3;
    #[doc = "< All NEON registers."]
    pub const RegisterGroup_RegisterGroup_FpuAll: root::RegisterGroup = 12;
    #[doc = "< All registers."]
    pub const RegisterGroup_RegisterGroup_All: root::RegisterGroup = 15;
    #[doc = " Armv8 register group. @ref svcGetThreadContext3 uses @ref RegisterGroup_All."]
    pub type RegisterGroup = u32;
    #[doc = "< Instruction abort"]
    pub const ThreadExceptionDesc_ThreadExceptionDesc_InstructionAbort: root::ThreadExceptionDesc =
        256;
    #[doc = "< Misaligned PC"]
    pub const ThreadExceptionDesc_ThreadExceptionDesc_MisalignedPC: root::ThreadExceptionDesc = 258;
    #[doc = "< Misaligned SP"]
    pub const ThreadExceptionDesc_ThreadExceptionDesc_MisalignedSP: root::ThreadExceptionDesc = 259;
    #[doc = "< SError [not in 1.0.0?]"]
    pub const ThreadExceptionDesc_ThreadExceptionDesc_SError: root::ThreadExceptionDesc = 262;
    #[doc = "< Bad SVC"]
    pub const ThreadExceptionDesc_ThreadExceptionDesc_BadSVC: root::ThreadExceptionDesc = 769;
    #[doc = "< Uncategorized, CP15RTTrap, CP15RRTTrap, CP14RTTrap, CP14RRTTrap, IllegalState, SystemRegisterTrap"]
    pub const ThreadExceptionDesc_ThreadExceptionDesc_Trap: root::ThreadExceptionDesc = 260;
    #[doc = "< None of the above, EC <= 0x34 and not a breakpoint"]
    pub const ThreadExceptionDesc_ThreadExceptionDesc_Other: root::ThreadExceptionDesc = 257;
    #[doc = " This is for \\ref ThreadExceptionDump error_desc."]
    pub type ThreadExceptionDesc = u32;
    #[doc = " Thread context structure (register dump)"]
    #[repr(C)]
    #[repr(align(16))]
    pub struct ThreadContext {
        #[doc = "< GPRs 0..28. Note: also contains AArch32 SPRs."]
        pub cpu_gprs: [root::CpuRegister; 29usize],
        #[doc = "< Frame pointer (x29) (AArch64). For AArch32, check r11."]
        pub fp: u64,
        #[doc = "< Link register (x30) (AArch64). For AArch32, check r14."]
        pub lr: u64,
        #[doc = "< Stack pointer (AArch64). For AArch32, check r13."]
        pub sp: u64,
        #[doc = "< Program counter."]
        pub pc: root::CpuRegister,
        #[doc = "< PSTATE or cpsr."]
        pub psr: u32,
        #[doc = "< 32 general-purpose NEON registers."]
        pub fpu_gprs: [root::FpuRegister; 32usize],
        #[doc = "< Floating-point control register."]
        pub fpcr: u32,
        #[doc = "< Floating-point status register."]
        pub fpsr: u32,
        #[doc = "< EL0 Read/Write Software Thread ID Register."]
        pub tpidr: u64,
    }
    #[doc = " Thread exception dump structure."]
    #[repr(C)]
    #[repr(align(16))]
    pub struct ThreadExceptionDump {
        #[doc = "< See \\ref ThreadExceptionDesc."]
        pub error_desc: u32,
        pub pad: [u32; 3usize],
        #[doc = "< GPRs 0..28. Note: also contains AArch32 registers."]
        pub cpu_gprs: [root::CpuRegister; 29usize],
        #[doc = "< Frame pointer."]
        pub fp: root::CpuRegister,
        #[doc = "< Link register."]
        pub lr: root::CpuRegister,
        #[doc = "< Stack pointer."]
        pub sp: root::CpuRegister,
        #[doc = "< Program counter (elr_el1)."]
        pub pc: root::CpuRegister,
        pub padding: u64,
        #[doc = "< 32 general-purpose NEON registers."]
        pub fpu_gprs: [root::FpuRegister; 32usize],
        #[doc = "< pstate & 0xFF0FFE20"]
        pub pstate: u32,
        pub afsr0: u32,
        pub afsr1: u32,
        pub esr: u32,
        #[doc = "< Fault Address Register."]
        pub far: root::CpuRegister,
    }
    #[repr(C)]
    pub struct ThreadExceptionFrameA64 {
        #[doc = "< GPRs 0..8."]
        pub cpu_gprs: [u64; 9usize],
        pub lr: u64,
        pub sp: u64,
        pub elr_el1: u64,
        #[doc = "< pstate & 0xFF0FFE20"]
        pub pstate: u32,
        pub afsr0: u32,
        pub afsr1: u32,
        pub esr: u32,
        pub far: u64,
    }
    #[repr(C)]
    pub struct ThreadExceptionFrameA32 {
        #[doc = "< GPRs 0..7."]
        pub cpu_gprs: [u32; 8usize],
        pub sp: u32,
        pub lr: u32,
        pub elr_el1: u32,
        #[doc = "< tpidr_el0 = 1"]
        pub tpidr_el0: u32,
        #[doc = "< cpsr & 0xFF0FFE20"]
        pub cpsr: u32,
        pub afsr0: u32,
        pub afsr1: u32,
        pub esr: u32,
        pub far: u32,
    }
    #[doc = "< Unmapped memory."]
    pub const MemoryType_MemType_Unmapped: root::MemoryType = 0;
    #[doc = "< Mapped by kernel capability parsing in \\ref svcCreateProcess."]
    pub const MemoryType_MemType_Io: root::MemoryType = 1;
    #[doc = "< Mapped by kernel capability parsing in \\ref svcCreateProcess."]
    pub const MemoryType_MemType_Normal: root::MemoryType = 2;
    #[doc = "< Mapped during \\ref svcCreateProcess."]
    pub const MemoryType_MemType_CodeStatic: root::MemoryType = 3;
    #[doc = "< Transition from MemType_CodeStatic performed by \\ref svcSetProcessMemoryPermission."]
    pub const MemoryType_MemType_CodeMutable: root::MemoryType = 4;
    #[doc = "< Mapped using \\ref svcSetHeapSize."]
    pub const MemoryType_MemType_Heap: root::MemoryType = 5;
    #[doc = "< Mapped using \\ref svcMapSharedMemory."]
    pub const MemoryType_MemType_SharedMem: root::MemoryType = 6;
    #[doc = "< Mapped using \\ref svcMapMemory."]
    pub const MemoryType_MemType_WeirdMappedMem: root::MemoryType = 7;
    #[doc = "< Mapped using \\ref svcMapProcessCodeMemory."]
    pub const MemoryType_MemType_ModuleCodeStatic: root::MemoryType = 8;
    #[doc = "< Transition from \\ref MemType_ModuleCodeStatic performed by \\ref svcSetProcessMemoryPermission."]
    pub const MemoryType_MemType_ModuleCodeMutable: root::MemoryType = 9;
    #[doc = "< IPC buffers with descriptor flags=0."]
    pub const MemoryType_MemType_IpcBuffer0: root::MemoryType = 10;
    #[doc = "< Mapped using \\ref svcMapMemory."]
    pub const MemoryType_MemType_MappedMemory: root::MemoryType = 11;
    #[doc = "< Mapped during \\ref svcCreateThread."]
    pub const MemoryType_MemType_ThreadLocal: root::MemoryType = 12;
    #[doc = "< Mapped using \\ref svcMapTransferMemory when the owning process has perm=0."]
    pub const MemoryType_MemType_TransferMemIsolated: root::MemoryType = 13;
    #[doc = "< Mapped using \\ref svcMapTransferMemory when the owning process has perm!=0."]
    pub const MemoryType_MemType_TransferMem: root::MemoryType = 14;
    #[doc = "< Mapped using \\ref svcMapProcessMemory."]
    pub const MemoryType_MemType_ProcessMem: root::MemoryType = 15;
    #[doc = "< Reserved."]
    pub const MemoryType_MemType_Reserved: root::MemoryType = 16;
    #[doc = "< IPC buffers with descriptor flags=1."]
    pub const MemoryType_MemType_IpcBuffer1: root::MemoryType = 17;
    #[doc = "< IPC buffers with descriptor flags=3."]
    pub const MemoryType_MemType_IpcBuffer3: root::MemoryType = 18;
    #[doc = "< Mapped in kernel during \\ref svcCreateThread."]
    pub const MemoryType_MemType_KernelStack: root::MemoryType = 19;
    #[doc = "< Mapped in kernel during \\ref svcControlCodeMemory."]
    pub const MemoryType_MemType_CodeReadOnly: root::MemoryType = 20;
    #[doc = "< Mapped in kernel during \\ref svcControlCodeMemory."]
    pub const MemoryType_MemType_CodeWritable: root::MemoryType = 21;
    #[doc = " Memory type enumeration (lower 8 bits of \\ref MemoryState)"]
    pub type MemoryType = u32;
    #[doc = "< Type field (see \\ref MemoryType)."]
    pub const MemoryState_MemState_Type: root::MemoryState = 255;
    #[doc = "< Permission change allowed."]
    pub const MemoryState_MemState_PermChangeAllowed: root::MemoryState = 256;
    #[doc = "< Force read/writable by debug syscalls."]
    pub const MemoryState_MemState_ForceRwByDebugSyscalls: root::MemoryState = 512;
    #[doc = "< IPC type 0 send allowed."]
    pub const MemoryState_MemState_IpcSendAllowed_Type0: root::MemoryState = 1024;
    #[doc = "< IPC type 3 send allowed."]
    pub const MemoryState_MemState_IpcSendAllowed_Type3: root::MemoryState = 2048;
    #[doc = "< IPC type 1 send allowed."]
    pub const MemoryState_MemState_IpcSendAllowed_Type1: root::MemoryState = 4096;
    #[doc = "< Process permission change allowed."]
    pub const MemoryState_MemState_ProcessPermChangeAllowed: root::MemoryState = 16384;
    #[doc = "< Map allowed."]
    pub const MemoryState_MemState_MapAllowed: root::MemoryState = 32768;
    #[doc = "< Unmap process code memory allowed."]
    pub const MemoryState_MemState_UnmapProcessCodeMemAllowed: root::MemoryState = 65536;
    #[doc = "< Transfer memory allowed."]
    pub const MemoryState_MemState_TransferMemAllowed: root::MemoryState = 131072;
    #[doc = "< Query physical address allowed."]
    pub const MemoryState_MemState_QueryPAddrAllowed: root::MemoryState = 262144;
    #[doc = "< Map device allowed (\\ref svcMapDeviceAddressSpace and \\ref svcMapDeviceAddressSpaceByForce)."]
    pub const MemoryState_MemState_MapDeviceAllowed: root::MemoryState = 524288;
    #[doc = "< Map device aligned allowed."]
    pub const MemoryState_MemState_MapDeviceAlignedAllowed: root::MemoryState = 1048576;
    #[doc = "< IPC buffer allowed."]
    pub const MemoryState_MemState_IpcBufferAllowed: root::MemoryState = 2097152;
    #[doc = "< Is pool allocated."]
    pub const MemoryState_MemState_IsPoolAllocated: root::MemoryState = 4194304;
    #[doc = "< Alias for \\ref MemState_IsPoolAllocated."]
    pub const MemoryState_MemState_IsRefCounted: root::MemoryState = 4194304;
    #[doc = "< Map process allowed."]
    pub const MemoryState_MemState_MapProcessAllowed: root::MemoryState = 8388608;
    #[doc = "< Attribute change allowed."]
    pub const MemoryState_MemState_AttrChangeAllowed: root::MemoryState = 16777216;
    #[doc = "< Code memory allowed."]
    pub const MemoryState_MemState_CodeMemAllowed: root::MemoryState = 33554432;
    #[doc = " Memory state bitmasks."]
    pub type MemoryState = u32;
    #[doc = "< Is borrowed memory."]
    pub const MemoryAttribute_MemAttr_IsBorrowed: root::MemoryAttribute = 1;
    #[doc = "< Is IPC mapped (when IpcRefCount > 0)."]
    pub const MemoryAttribute_MemAttr_IsIpcMapped: root::MemoryAttribute = 2;
    #[doc = "< Is device mapped (when DeviceRefCount > 0)."]
    pub const MemoryAttribute_MemAttr_IsDeviceMapped: root::MemoryAttribute = 4;
    #[doc = "< Is uncached."]
    pub const MemoryAttribute_MemAttr_IsUncached: root::MemoryAttribute = 8;
    #[doc = " Memory attribute bitmasks."]
    pub type MemoryAttribute = u32;
    #[doc = "< No permissions."]
    pub const Permission_Perm_None: root::Permission = 0;
    #[doc = "< Read permission."]
    pub const Permission_Perm_R: root::Permission = 1;
    #[doc = "< Write permission."]
    pub const Permission_Perm_W: root::Permission = 2;
    #[doc = "< Execute permission."]
    pub const Permission_Perm_X: root::Permission = 4;
    #[doc = "< Read/write permissions."]
    pub const Permission_Perm_Rw: root::Permission = 3;
    #[doc = "< Read/execute permissions."]
    pub const Permission_Perm_Rx: root::Permission = 5;
    #[doc = "< Don't care"]
    pub const Permission_Perm_DontCare: root::Permission = 268435456;
    #[doc = " Memory permission bitmasks."]
    pub type Permission = u32;
    #[doc = " Memory information structure."]
    #[repr(C)]
    pub struct MemoryInfo {
        #[doc = "< Base address."]
        pub addr: u64,
        #[doc = "< Size."]
        pub size: u64,
        #[doc = "< Memory type (see lower 8 bits of \\ref MemoryState)."]
        pub type_: u32,
        #[doc = "< Memory attributes (see \\ref MemoryAttribute)."]
        pub attr: u32,
        #[doc = "< Memory permissions (see \\ref Permission)."]
        pub perm: u32,
        #[doc = "< Device reference count."]
        pub device_refcount: u32,
        #[doc = "< IPC reference count."]
        pub ipc_refcount: u32,
        #[doc = "< Padding."]
        pub padding: u32,
    }
    #[doc = " Secure monitor arguments."]
    #[repr(C, packed)]
    pub struct SecmonArgs {
        #[doc = "< Values of X0 through X7."]
        pub X: [u64; 8usize],
    }
    #[doc = "< Map owner."]
    pub const CodeMapOperation_CodeMapOperation_MapOwner: root::CodeMapOperation = 0;
    #[doc = "< Map slave."]
    pub const CodeMapOperation_CodeMapOperation_MapSlave: root::CodeMapOperation = 1;
    #[doc = "< Unmap owner."]
    pub const CodeMapOperation_CodeMapOperation_UnmapOwner: root::CodeMapOperation = 2;
    #[doc = "< Unmap slave."]
    pub const CodeMapOperation_CodeMapOperation_UnmapSlave: root::CodeMapOperation = 3;
    #[doc = " Code memory mapping operations"]
    pub type CodeMapOperation = u32;
    #[doc = "<How much memory can a process map."]
    pub const LimitableResource_LimitableResource_Memory: root::LimitableResource = 0;
    #[doc = "<How many threads can a process spawn."]
    pub const LimitableResource_LimitableResource_Threads: root::LimitableResource = 1;
    #[doc = "<How many events can a process have."]
    pub const LimitableResource_LimitableResource_Events: root::LimitableResource = 2;
    #[doc = "<How many transfer memories can a process make."]
    pub const LimitableResource_LimitableResource_TransferMemories: root::LimitableResource = 3;
    #[doc = "<How many sessions can a process own."]
    pub const LimitableResource_LimitableResource_Sessions: root::LimitableResource = 4;
    #[doc = " Limitable Resources."]
    pub type LimitableResource = u32;
    #[doc = "<What state is a process in."]
    pub const ProcessInfoType_ProcessInfoType_ProcessState: root::ProcessInfoType = 0;
    #[doc = " Process Information."]
    pub type ProcessInfoType = u32;
    #[doc = "<Newly-created process, not yet started."]
    pub const ProcessState_ProcessState_Created: root::ProcessState = 0;
    #[doc = "<Newly-created process, not yet started but attached to debugger."]
    pub const ProcessState_ProcessState_CreatedAttached: root::ProcessState = 1;
    #[doc = "<Process that is running normally (and detached from any debugger)."]
    pub const ProcessState_ProcessState_Running: root::ProcessState = 2;
    #[doc = "<Process that has just crashed."]
    pub const ProcessState_ProcessState_Crashed: root::ProcessState = 3;
    #[doc = "<Process that is running normally, attached to a debugger."]
    pub const ProcessState_ProcessState_RunningAttached: root::ProcessState = 4;
    #[doc = "<Process has begun exiting."]
    pub const ProcessState_ProcessState_Exiting: root::ProcessState = 5;
    #[doc = "<Process has finished exiting."]
    pub const ProcessState_ProcessState_Exited: root::ProcessState = 6;
    #[doc = "<Process execution suspended by debugger."]
    pub const ProcessState_ProcessState_DebugSuspended: root::ProcessState = 7;
    #[doc = " Process States."]
    pub type ProcessState = u32;
    pub const DebugThreadParam_DebugThreadParam_ActualPriority: root::DebugThreadParam = 0;
    pub const DebugThreadParam_DebugThreadParam_State: root::DebugThreadParam = 1;
    pub const DebugThreadParam_DebugThreadParam_IdealCore: root::DebugThreadParam = 2;
    pub const DebugThreadParam_DebugThreadParam_CurrentCore: root::DebugThreadParam = 3;
    pub const DebugThreadParam_DebugThreadParam_CoreMask: root::DebugThreadParam = 4;
    #[doc = " Debug Thread Parameters."]
    pub type DebugThreadParam = u32;
    #[doc = "< Bitmask of allowed Core IDs."]
    pub const InfoType_InfoType_CoreMask: root::InfoType = 0;
    #[doc = "< Bitmask of allowed Thread Priorities."]
    pub const InfoType_InfoType_PriorityMask: root::InfoType = 1;
    #[doc = "< Base of the Alias memory region."]
    pub const InfoType_InfoType_AliasRegionAddress: root::InfoType = 2;
    #[doc = "< Size of the Alias memory region."]
    pub const InfoType_InfoType_AliasRegionSize: root::InfoType = 3;
    #[doc = "< Base of the Heap memory region."]
    pub const InfoType_InfoType_HeapRegionAddress: root::InfoType = 4;
    #[doc = "< Size of the Heap memory region."]
    pub const InfoType_InfoType_HeapRegionSize: root::InfoType = 5;
    #[doc = "< Total amount of memory available for process."]
    pub const InfoType_InfoType_TotalMemorySize: root::InfoType = 6;
    #[doc = "< Amount of memory currently used by process."]
    pub const InfoType_InfoType_UsedMemorySize: root::InfoType = 7;
    #[doc = "< Whether current process is being debugged."]
    pub const InfoType_InfoType_DebuggerAttached: root::InfoType = 8;
    #[doc = "< Current process's resource limit handle."]
    pub const InfoType_InfoType_ResourceLimit: root::InfoType = 9;
    #[doc = "< Number of idle ticks on CPU."]
    pub const InfoType_InfoType_IdleTickCount: root::InfoType = 10;
    #[doc = "< 2.0.0+ Random entropy for current process."]
    pub const InfoType_InfoType_RandomEntropy: root::InfoType = 11;
    #[doc = "< 2.0.0+ Base of the process's address space."]
    pub const InfoType_InfoType_AslrRegionAddress: root::InfoType = 12;
    #[doc = "< 2.0.0+ Size of the process's address space."]
    pub const InfoType_InfoType_AslrRegionSize: root::InfoType = 13;
    #[doc = "< 2.0.0+ Base of the Stack memory region."]
    pub const InfoType_InfoType_StackRegionAddress: root::InfoType = 14;
    #[doc = "< 2.0.0+ Size of the Stack memory region."]
    pub const InfoType_InfoType_StackRegionSize: root::InfoType = 15;
    #[doc = "< 3.0.0+ Total memory allocated for process memory management."]
    pub const InfoType_InfoType_SystemResourceSizeTotal: root::InfoType = 16;
    #[doc = "< 3.0.0+ Amount of memory currently used by process memory management."]
    pub const InfoType_InfoType_SystemResourceSizeUsed: root::InfoType = 17;
    #[doc = "< 3.0.0+ Title ID for the process."]
    pub const InfoType_InfoType_TitleId: root::InfoType = 18;
    #[doc = "< 4.0.0-4.1.0 Min/max initial process IDs."]
    pub const InfoType_InfoType_InitialProcessIdRange: root::InfoType = 19;
    #[doc = "< 5.0.0+ Address of the process's exception context (for break)."]
    pub const InfoType_InfoType_UserExceptionContextAddress: root::InfoType = 20;
    #[doc = "< 6.0.0+ Total amount of memory available for process, excluding that for process memory management."]
    pub const InfoType_InfoType_TotalNonSystemMemorySize: root::InfoType = 21;
    #[doc = "< 6.0.0+ Amount of memory used by process, excluding that for process memory management."]
    pub const InfoType_InfoType_UsedNonSystemMemorySize: root::InfoType = 22;
    #[doc = "< Number of ticks spent on thread."]
    pub const InfoType_InfoType_ThreadTickCount: root::InfoType = 4026531842;
    #[doc = " GetInfo IDs."]
    pub type InfoType = u32;
    #[doc = "< Total amount of DRAM available to system."]
    pub const SystemInfoType_SystemInfoType_TotalPhysicalMemorySize: root::SystemInfoType = 0;
    #[doc = "< Current amount of DRAM used by system."]
    pub const SystemInfoType_SystemInfoType_UsedPhysicalMemorySize: root::SystemInfoType = 1;
    #[doc = "< Min/max initial process IDs."]
    pub const SystemInfoType_SystemInfoType_InitialProcessIdRange: root::SystemInfoType = 2;
    #[doc = " GetSystemInfo IDs."]
    pub type SystemInfoType = u32;
    #[doc = "< Tick count on core 0."]
    pub const TickCountInfo_TickCountInfo_Core0: root::TickCountInfo = 0;
    #[doc = "< Tick count on core 1."]
    pub const TickCountInfo_TickCountInfo_Core1: root::TickCountInfo = 1;
    #[doc = "< Tick count on core 2."]
    pub const TickCountInfo_TickCountInfo_Core2: root::TickCountInfo = 2;
    #[doc = "< Tick count on core 3."]
    pub const TickCountInfo_TickCountInfo_Core3: root::TickCountInfo = 3;
    #[doc = "< Tick count on all cores."]
    pub const TickCountInfo_TickCountInfo_Total: root::TickCountInfo = 18446744073709551615;
    #[doc = " GetInfo Idle/Thread Tick Count Sub IDs."]
    pub type TickCountInfo = u64;
    #[doc = "< Lowest initial process ID."]
    pub const InitialProcessIdRangeInfo_InitialProcessIdRangeInfo_Minimum:
        root::InitialProcessIdRangeInfo = 0;
    #[doc = "< Highest initial process ID."]
    pub const InitialProcessIdRangeInfo_InitialProcessIdRangeInfo_Maximum:
        root::InitialProcessIdRangeInfo = 1;
    #[doc = " GetInfo InitialProcessIdRange Sub IDs."]
    pub type InitialProcessIdRangeInfo = u32;
    #[doc = "< Memory allocated for application usage."]
    pub const PhysicalMemoryInfo_PhysicalMemoryInfo_Application: root::PhysicalMemoryInfo = 0;
    #[doc = "< Memory allocated for applet usage."]
    pub const PhysicalMemoryInfo_PhysicalMemoryInfo_Applet: root::PhysicalMemoryInfo = 1;
    #[doc = "< Memory allocated for system usage."]
    pub const PhysicalMemoryInfo_PhysicalMemoryInfo_System: root::PhysicalMemoryInfo = 2;
    #[doc = "< Memory allocated for unsafe system usage (accessible to devices)."]
    pub const PhysicalMemoryInfo_PhysicalMemoryInfo_SystemUnsafe: root::PhysicalMemoryInfo = 3;
    #[doc = " GetSystemInfo PhysicalMemory Sub IDs."]
    pub type PhysicalMemoryInfo = u32;
    extern "C" {
        #[doc = " @brief Set the process heap to a given size. It can both extend and shrink the heap."]
        #[doc = " @param[out] out_addr Variable to which write the address of the heap (which is randomized and fixed by the kernel)"]
        #[doc = " @param[in] size Size of the heap, must be a multiple of 0x2000000 and [2.0.0+] less than 0x18000000."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x00."]
        pub fn svcSetHeapSize(out_addr: *mut *mut libc::c_void, size: u64) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Set the memory permissions of a (page-aligned) range of memory."]
        #[doc = " @param[in] addr Start address of the range."]
        #[doc = " @param[in] size Size of the range, in bytes."]
        #[doc = " @param[in] perm Permissions (see \\ref Permission)."]
        #[doc = " @return Result code."]
        #[doc = " @remark Perm_X is not allowed. Setting write-only is not allowed either (Perm_W)."]
        #[doc = "         This can be used to move back and forth between Perm_None, Perm_R and Perm_Rw."]
        #[doc = " @note Syscall number 0x01."]
        pub fn svcSetMemoryPermission(
            addr: *mut libc::c_void,
            size: u64,
            perm: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Set the memory attributes of a (page-aligned) range of memory."]
        #[doc = " @param[in] addr Start address of the range."]
        #[doc = " @param[in] size Size of the range, in bytes."]
        #[doc = " @param[in] val0 State0"]
        #[doc = " @param[in] val1 State1"]
        #[doc = " @return Result code."]
        #[doc = " @remark See <a href=\"https://switchbrew.org/wiki/SVC#svcSetMemoryAttribute\">switchbrew.org Wiki</a> for more details."]
        #[doc = " @note Syscall number 0x02."]
        pub fn svcSetMemoryAttribute(
            addr: *mut libc::c_void,
            size: u64,
            val0: u32,
            val1: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps a memory range into a different range. Mainly used for adding guard pages around stack."]
        #[doc = " Source range gets reprotected to Perm_None (it can no longer be accessed), and \\ref MemAttr_IsBorrowed is set in the source \\ref MemoryAttribute."]
        #[doc = " @param[in] dst_addr Destination address."]
        #[doc = " @param[in] src_addr Source address."]
        #[doc = " @param[in] size Size of the range."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x04."]
        pub fn svcMapMemory(
            dst_addr: *mut libc::c_void,
            src_addr: *mut libc::c_void,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Unmaps a region that was previously mapped with \\ref svcMapMemory."]
        #[doc = " @param[in] dst_addr Destination address."]
        #[doc = " @param[in] src_addr Source address."]
        #[doc = " @param[in] size Size of the range."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x05."]
        pub fn svcUnmapMemory(
            dst_addr: *mut libc::c_void,
            src_addr: *mut libc::c_void,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Query information about an address. Will always fetch the lowest page-aligned mapping that contains the provided address."]
        #[doc = " @param[out] meminfo_ptr \\ref MemoryInfo structure which will be filled in."]
        #[doc = " @param[out] pageinfo Page information which will be filled in."]
        #[doc = " @param[in] addr Address to query."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x06."]
        pub fn svcQueryMemory(
            meminfo_ptr: *mut root::MemoryInfo,
            pageinfo: *mut u32,
            addr: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Exits the current process."]
        #[doc = " @note Syscall number 0x07."]
        pub fn svcExitProcess();
    }
    extern "C" {
        #[doc = " @brief Creates a thread."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x08."]
        pub fn svcCreateThread(
            out: *mut root::Handle,
            entry: *mut libc::c_void,
            arg: *mut libc::c_void,
            stack_top: *mut libc::c_void,
            prio: libc::c_int,
            cpuid: libc::c_int,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Starts a freshly created thread."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x09."]
        pub fn svcStartThread(handle: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Exits the current thread."]
        #[doc = " @note Syscall number 0x0A."]
        pub fn svcExitThread();
    }
    extern "C" {
        #[doc = " @brief Sleeps the current thread for the specified amount of time."]
        #[doc = " @param[in] nano Number of nanoseconds to sleep, or 0, -1, -2 for yield."]
        #[doc = " @note Syscall number 0x0B."]
        pub fn svcSleepThread(nano: root::s64);
    }
    extern "C" {
        #[doc = " @brief Gets a thread's priority."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x0C."]
        pub fn svcGetThreadPriority(priority: *mut u32, handle: root::Handle)
            -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets a thread's priority."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x0D."]
        pub fn svcSetThreadPriority(handle: root::Handle, priority: u32) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets a thread's core mask."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x0E."]
        pub fn svcGetThreadCoreMask(
            preferred_core: *mut root::s32,
            affinity_mask: *mut u32,
            handle: root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets a thread's core mask."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x0F."]
        pub fn svcSetThreadCoreMask(
            handle: root::Handle,
            preferred_core: root::s32,
            affinity_mask: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the current processor's number."]
        #[doc = " @return The current processor's number."]
        #[doc = " @note Syscall number 0x10."]
        pub fn svcGetCurrentProcessorNumber() -> u32;
    }
    extern "C" {
        #[doc = " @brief Sets an event's signalled status."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x11."]
        pub fn svcSignalEvent(handle: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Clears an event's signalled status."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x12."]
        pub fn svcClearEvent(handle: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps a block of shared memory."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x13."]
        pub fn svcMapSharedMemory(
            handle: root::Handle,
            addr: *mut libc::c_void,
            size: root::size_t,
            perm: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Unmaps a block of shared memory."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x14."]
        pub fn svcUnmapSharedMemory(
            handle: root::Handle,
            addr: *mut libc::c_void,
            size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a block of transfer memory."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x15."]
        pub fn svcCreateTransferMemory(
            out: *mut root::Handle,
            addr: *mut libc::c_void,
            size: root::size_t,
            perm: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Closes a handle, decrementing the reference count of the corresponding kernel object."]
        #[doc = " This might result in the kernel freeing the object."]
        #[doc = " @param handle Handle to close."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x16."]
        pub fn svcCloseHandle(handle: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Resets a signal."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x17."]
        pub fn svcResetSignal(handle: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Waits on one or more synchronization objects, optionally with a timeout."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x18."]
        #[doc = " @note \\p handleCount must not be greater than \\ref MAX_WAIT_OBJECTS. This is a Horizon kernel limitation."]
        #[doc = " @note This is the raw syscall, which can be cancelled by \\ref svcCancelSynchronization or other means. \\ref waitHandles or \\ref waitMultiHandle should normally be used instead."]
        pub fn svcWaitSynchronization(
            index: *mut root::s32,
            handles: *const root::Handle,
            handleCount: root::s32,
            timeout: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Waits a \\ref svcWaitSynchronization operation being done on a synchronization object in another thread."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x19."]
        pub fn svcCancelSynchronization(thread: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Arbitrates a mutex lock operation in userspace."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x1A."]
        pub fn svcArbitrateLock(
            wait_tag: u32,
            tag_location: *mut u32,
            self_tag: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Arbitrates a mutex unlock operation in userspace."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x1B."]
        pub fn svcArbitrateUnlock(tag_location: *mut u32) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Performs a condition variable wait operation in userspace."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x1C."]
        pub fn svcWaitProcessWideKeyAtomic(
            key: *mut u32,
            tag_location: *mut u32,
            self_tag: u32,
            timeout: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Performs a condition variable wake-up operation in userspace."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x1D."]
        pub fn svcSignalProcessWideKey(key: *mut u32, num: root::s32) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the current system tick."]
        #[doc = " @return The current system tick."]
        #[doc = " @note Syscall number 0x1E."]
        pub fn svcGetSystemTick() -> u64;
    }
    extern "C" {
        #[doc = " @brief Connects to a registered named port."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x1F."]
        pub fn svcConnectToNamedPort(
            session: *mut root::Handle,
            name: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sends an IPC synchronization request to a session."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x21."]
        pub fn svcSendSyncRequest(session: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sends an IPC synchronization request to a session from an user allocated buffer."]
        #[doc = " @return Result code."]
        #[doc = " @remark size must be allocated to 0x1000 bytes."]
        #[doc = " @note Syscall number 0x22."]
        pub fn svcSendSyncRequestWithUserBuffer(
            usrBuffer: *mut libc::c_void,
            size: u64,
            session: root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sends an IPC synchronization request to a session from an user allocated buffer (asynchronous version)."]
        #[doc = " @return Result code."]
        #[doc = " @remark size must be allocated to 0x1000 bytes."]
        #[doc = " @note Syscall number 0x23."]
        pub fn svcSendAsyncRequestWithUserBuffer(
            handle: *mut root::Handle,
            usrBuffer: *mut libc::c_void,
            size: u64,
            session: root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the PID associated with a process."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x24."]
        pub fn svcGetProcessId(processID: *mut u64, handle: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the TID associated with a process."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x25."]
        pub fn svcGetThreadId(threadID: *mut u64, handle: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Breaks execution. Panic."]
        #[doc = " @param[in] breakReason Break reason."]
        #[doc = " @param[in] inval1 First break parameter."]
        #[doc = " @param[in] inval2 Second break parameter."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x26."]
        pub fn svcBreak(
            breakReason: u32,
            inval1: u64,
            inval2: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Outputs debug text, if used during debugging."]
        #[doc = " @param[in] str Text to output."]
        #[doc = " @param[in] size Size of the text in bytes."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x27."]
        pub fn svcOutputDebugString(str: *const libc::c_char, size: u64) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Returns from an exception."]
        #[doc = " @param[in] res Result code."]
        #[doc = " @note Syscall number 0x28."]
        pub fn svcReturnFromException(res: root::Result);
    }
    extern "C" {
        #[doc = " @brief Retrieves information about the system, or a certain kernel object."]
        #[doc = " @param[out] out Variable to which store the information."]
        #[doc = " @param[in] id0 First ID of the property to retrieve."]
        #[doc = " @param[in] handle Handle of the object to retrieve information from, or \\ref INVALID_HANDLE to retrieve information about the system."]
        #[doc = " @param[in] id1 Second ID of the property to retrieve."]
        #[doc = " @return Result code."]
        #[doc = " @remark The full list of property IDs can be found on the <a href=\"https://switchbrew.org/wiki/SVC#svcGetInfo\">switchbrew.org wiki</a>."]
        #[doc = " @note Syscall number 0x29."]
        pub fn svcGetInfo(
            out: *mut u64,
            id0: u64,
            handle: root::Handle,
            id1: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps new heap memory at the desired address. [3.0.0+]"]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x2C."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcMapPhysicalMemory(address: *mut libc::c_void, size: u64) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Undoes the effects of \\ref svcMapPhysicalMemory. [3.0.0+]"]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x2D."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcUnmapPhysicalMemory(address: *mut libc::c_void, size: u64) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the maximum value a LimitableResource can have, for a Resource Limit handle."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x30."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcGetResourceLimitLimitValue(
            out: *mut u64,
            reslimit_h: root::Handle,
            which: root::LimitableResource,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the maximum value a LimitableResource can have, for a Resource Limit handle."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x31."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcGetResourceLimitCurrentValue(
            out: *mut u64,
            reslimit_h: root::Handle,
            which: root::LimitableResource,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Configures the pause/unpause status of a thread."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x32."]
        pub fn svcSetThreadActivity(thread: root::Handle, paused: bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Dumps the registers of a thread paused by @ref svcSetThreadActivity (register groups: all)."]
        #[doc = " @param[out] ctx Output thread context (register dump)."]
        #[doc = " @param[in] thread Thread handle."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x33."]
        #[doc = " @warning Official kernel will not dump x0..x18 if the thread is currently executing a system call, and prior to 6.0.0 doesn't dump TPIDR_EL0."]
        pub fn svcGetThreadContext3(
            ctx: *mut root::ThreadContext,
            thread: root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates an IPC session."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x40."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcCreateSession(
            server_handle: *mut root::Handle,
            client_handle: *mut root::Handle,
            unk0: u32,
            unk1: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Accepts an IPC session."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x41."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcAcceptSession(
            session_handle: *mut root::Handle,
            port_handle: root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Performs IPC input/output."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x43."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcReplyAndReceive(
            index: *mut root::s32,
            handles: *const root::Handle,
            handleCount: root::s32,
            replyTarget: root::Handle,
            timeout: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Performs IPC input/output from an user allocated buffer."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x44."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcReplyAndReceiveWithUserBuffer(
            index: *mut root::s32,
            usrBuffer: *mut libc::c_void,
            size: u64,
            handles: *const root::Handle,
            handleCount: root::s32,
            replyTarget: root::Handle,
            timeout: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a system event."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x45."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcCreateEvent(
            server_handle: *mut root::Handle,
            client_handle: *mut root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps unsafe memory (usable for GPU DMA) for a system module at the desired address. [5.0.0+]"]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x48."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcMapPhysicalMemoryUnsafe(
            address: *mut libc::c_void,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Undoes the effects of \\ref svcMapPhysicalMemoryUnsafe. [5.0.0+]"]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x49."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcUnmapPhysicalMemoryUnsafe(
            address: *mut libc::c_void,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the system-wide limit for unsafe memory mappable using \\ref svcMapPhysicalMemoryUnsafe. [5.0.0+]"]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x4A."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcSetUnsafeLimit(size: u64) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates code memory in the caller's address space [4.0.0+]."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x4B."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcCreateCodeMemory(
            code_handle: *mut root::Handle,
            src_addr: *mut libc::c_void,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps code memory in the caller's address space [4.0.0+]."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x4C."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcControlCodeMemory(
            code_handle: root::Handle,
            op: root::CodeMapOperation,
            dst_addr: *mut libc::c_void,
            size: u64,
            perm: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Reads/writes a protected MMIO register."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x4E."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcReadWriteRegister(
            outVal: *mut u32,
            regAddr: u64,
            rwMask: u32,
            inVal: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a block of shared memory."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x50."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcCreateSharedMemory(
            out: *mut root::Handle,
            size: root::size_t,
            local_perm: u32,
            other_perm: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps a block of transfer memory."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x51."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcMapTransferMemory(
            tmem_handle: root::Handle,
            addr: *mut libc::c_void,
            size: root::size_t,
            perm: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Unmaps a block of transfer memory."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x52."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcUnmapTransferMemory(
            tmem_handle: root::Handle,
            addr: *mut libc::c_void,
            size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates an event and binds it to a specific hardware interrupt."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x53."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcCreateInterruptEvent(
            handle: *mut root::Handle,
            irqNum: u64,
            flag: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Queries information about a certain virtual address, including its physical address."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x54."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcQueryPhysicalAddress(out: *mut u64, virtaddr: u64) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Returns a virtual address mapped to a given IO range."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x55."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcQueryIoMapping(
            virtaddr: *mut u64,
            physaddr: u64,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a virtual address space for binding device address spaces."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x56."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcCreateDeviceAddressSpace(
            handle: *mut root::Handle,
            dev_addr: u64,
            dev_size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Attaches a device address space to a device."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x57."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcAttachDeviceAddressSpace(device: u64, handle: root::Handle)
            -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Detaches a device address space from a device."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x58."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcDetachDeviceAddressSpace(device: u64, handle: root::Handle)
            -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps an attached device address space to an userspace address."]
        #[doc = " @return Result code."]
        #[doc = " @remark The userspace destination address must have the \\ref MemState_MapDeviceAllowed bit set."]
        #[doc = " @note Syscall number 0x59."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcMapDeviceAddressSpaceByForce(
            handle: root::Handle,
            proc_handle: root::Handle,
            map_addr: u64,
            dev_size: u64,
            dev_addr: u64,
            perm: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps an attached device address space to an userspace address."]
        #[doc = " @return Result code."]
        #[doc = " @remark The userspace destination address must have the \\ref MemState_MapDeviceAlignedAllowed bit set."]
        #[doc = " @note Syscall number 0x5A."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcMapDeviceAddressSpaceAligned(
            handle: root::Handle,
            proc_handle: root::Handle,
            map_addr: u64,
            dev_size: u64,
            dev_addr: u64,
            perm: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Unmaps an attached device address space from an userspace address."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x5C."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcUnmapDeviceAddressSpace(
            handle: root::Handle,
            proc_handle: root::Handle,
            map_addr: u64,
            map_size: u64,
            dev_addr: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Debugs an active process."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x60."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcDebugActiveProcess(
            debug: *mut root::Handle,
            processID: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Breaks an active debugging session."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x61."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcBreakDebugProcess(debug: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Terminates the process of an active debugging session."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x62."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcTerminateDebugProcess(debug: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets an incoming debug event from a debugging session."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x63."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcGetDebugEvent(event_out: *mut u8, debug: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Continues a debugging session."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x64."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        #[doc = " @warning Only exists on 3.0.0+. For older versions use \\ref svcLegacyContinueDebugEvent."]
        pub fn svcContinueDebugEvent(
            debug: root::Handle,
            flags: u32,
            tid_list: *mut u64,
            num_tids: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Continues a debugging session."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x64."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        #[doc = " @warning Only exists on 1.0.0-2.3.0. For newer versions use \\ref svcContinueDebugEvent."]
        pub fn svcLegacyContinueDebugEvent(
            debug: root::Handle,
            flags: u32,
            threadID: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the context (dump the registers) of a thread in a debugging session."]
        #[doc = " @return Result code."]
        #[doc = " @param[out] ctx Output thread context (register dump)."]
        #[doc = " @param[in] debug Debug handle."]
        #[doc = " @param[in] threadID ID of the thread to dump the context of."]
        #[doc = " @param[in] flags Register groups to select, combination of @ref RegisterGroup flags."]
        #[doc = " @note Syscall number 0x67."]
        #[doc = " @warning Official kernel will not dump any CPU GPR if the thread is currently executing a system call (except @ref svcBreak and @ref svcReturnFromException)."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcGetDebugThreadContext(
            ctx: *mut root::ThreadContext,
            debug: root::Handle,
            threadID: u64,
            flags: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the context (dump the registers) of a thread in a debugging session."]
        #[doc = " @return Result code."]
        #[doc = " @param[in] debug Debug handle."]
        #[doc = " @param[in] threadID ID of the thread to set the context of."]
        #[doc = " @param[in] ctx Input thread context (register dump)."]
        #[doc = " @param[in] flags Register groups to select, combination of @ref RegisterGroup flags."]
        #[doc = " @note Syscall number 0x68."]
        #[doc = " @warning Official kernel will return an error if the thread is currently executing a system call (except @ref svcBreak and @ref svcReturnFromException)."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcSetDebugThreadContext(
            debug: root::Handle,
            threadID: u64,
            ctx: *const root::ThreadContext,
            flags: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Retrieves a list of all running processes."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x65."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcGetProcessList(
            num_out: *mut u32,
            pids_out: *mut u64,
            max_pids: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Retrieves a list of all threads for a debug handle (or zero)."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x66."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcGetThreadList(
            num_out: *mut u32,
            tids_out: *mut u64,
            max_tids: u32,
            debug: root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Queries memory information from a process that is being debugged."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x69."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcQueryDebugProcessMemory(
            meminfo_ptr: *mut root::MemoryInfo,
            pageinfo: *mut u32,
            debug: root::Handle,
            addr: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Reads memory from a process that is being debugged."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x6A."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcReadDebugProcessMemory(
            buffer: *mut libc::c_void,
            debug: root::Handle,
            addr: u64,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Writes to memory in a process that is being debugged."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x6B."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcWriteDebugProcessMemory(
            debug: root::Handle,
            buffer: *const libc::c_void,
            addr: u64,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets parameters from a thread in a debugging session."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x6D."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcGetDebugThreadParam(
            out_64: *mut u64,
            out_32: *mut u32,
            debug: root::Handle,
            threadID: u64,
            param: root::DebugThreadParam,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Retrieves privileged information about the system, or a certain kernel object."]
        #[doc = " @param[out] out Variable to which store the information."]
        #[doc = " @param[in] id0 First ID of the property to retrieve."]
        #[doc = " @param[in] handle Handle of the object to retrieve information from, or \\ref INVALID_HANDLE to retrieve information about the system."]
        #[doc = " @param[in] id1 Second ID of the property to retrieve."]
        #[doc = " @return Result code."]
        #[doc = " @remark The full list of property IDs can be found on the <a href=\"https://switchbrew.org/wiki/SVC#svcGetSystemInfo\">switchbrew.org wiki</a>."]
        #[doc = " @note Syscall number 0x6F."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcGetSystemInfo(
            out: *mut u64,
            id0: u64,
            handle: root::Handle,
            id1: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a port."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x70."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcCreatePort(
            portServer: *mut root::Handle,
            portClient: *mut root::Handle,
            max_sessions: root::s32,
            is_light: bool,
            name: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Manages a named port."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x71."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcManageNamedPort(
            portServer: *mut root::Handle,
            name: *const libc::c_char,
            maxSessions: root::s32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Manages a named port."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x72."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcConnectToPort(session: *mut root::Handle, port: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the memory permissions for the specified memory with the supplied process handle."]
        #[doc = " @param[in] proc Process handle."]
        #[doc = " @param[in] addr Address of the memory."]
        #[doc = " @param[in] size Size of the memory."]
        #[doc = " @param[in] perm Permissions (see \\ref Permission)."]
        #[doc = " @return Result code."]
        #[doc = " @remark This returns an error (0xD801) when \\p perm is >0x5, hence -WX and RWX are not allowed."]
        #[doc = " @note Syscall number 0x73."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcSetProcessMemoryPermission(
            proc_: root::Handle,
            addr: u64,
            size: u64,
            perm: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps the src address from the supplied process handle into the current process."]
        #[doc = " @param[in] dst Address to which map the memory in the current process."]
        #[doc = " @param[in] proc Process handle."]
        #[doc = " @param[in] src Source mapping address."]
        #[doc = " @param[in] size Size of the memory."]
        #[doc = " @return Result code."]
        #[doc = " @remark This allows mapping code and rodata with RW- permission."]
        #[doc = " @note Syscall number 0x74."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcMapProcessMemory(
            dst: *mut libc::c_void,
            proc_: root::Handle,
            src: u64,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Undoes the effects of \\ref svcMapProcessMemory."]
        #[doc = " @param[in] dst Destination mapping address"]
        #[doc = " @param[in] proc Process handle."]
        #[doc = " @param[in] src Address of the memory in the process."]
        #[doc = " @param[in] size Size of the memory."]
        #[doc = " @return Result code."]
        #[doc = " @remark This allows mapping code and rodata with RW- permission."]
        #[doc = " @note Syscall number 0x75."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcUnmapProcessMemory(
            dst: *mut libc::c_void,
            proc_: root::Handle,
            src: u64,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Equivalent to \\ref svcQueryMemory, for another process."]
        #[doc = " @param[out] meminfo_ptr \\ref MemoryInfo structure which will be filled in."]
        #[doc = " @param[out] pageinfo Page information which will be filled in."]
        #[doc = " @param[in] proc Process handle."]
        #[doc = " @param[in] addr Address to query."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x76."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcQueryProcessMemory(
            meminfo_ptr: *mut root::MemoryInfo,
            pageinfo: *mut u32,
            proc_: root::Handle,
            addr: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps normal heap in a certain process as executable code (used when loading NROs)."]
        #[doc = " @param[in] proc Process handle (cannot be \\ref CUR_PROCESS_HANDLE)."]
        #[doc = " @param[in] dst Destination mapping address."]
        #[doc = " @param[in] src Source mapping address."]
        #[doc = " @param[in] size Size of the mapping."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x77."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcMapProcessCodeMemory(
            proc_: root::Handle,
            dst: u64,
            src: u64,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Undoes the effects of \\ref svcMapProcessCodeMemory."]
        #[doc = " @param[in] proc Process handle (cannot be \\ref CUR_PROCESS_HANDLE)."]
        #[doc = " @param[in] dst Destination mapping address."]
        #[doc = " @param[in] src Source mapping address."]
        #[doc = " @param[in] size Size of the mapping."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x78."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcUnmapProcessCodeMemory(
            proc_: root::Handle,
            dst: u64,
            src: u64,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a new process."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x79."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcCreateProcess(
            out: *mut root::Handle,
            proc_info: *const libc::c_void,
            caps: *const u32,
            cap_num: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Starts executing a freshly created process."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x7A."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcStartProcess(
            proc_: root::Handle,
            main_prio: root::s32,
            default_cpu: root::s32,
            stack_size: u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Terminates a running process."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x7B."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcTerminateProcess(proc_: root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets a \\ref ProcessInfoType for a process."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x7C."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcGetProcessInfo(
            out: *mut u64,
            proc_: root::Handle,
            which: root::ProcessInfoType,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a new Resource Limit handle."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x7D."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcCreateResourceLimit(out: *mut root::Handle) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the value for a \\ref LimitableResource for a Resource Limit handle."]
        #[doc = " @return Result code."]
        #[doc = " @note Syscall number 0x7E."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcSetResourceLimitLimitValue(
            reslimit: root::Handle,
            which: root::LimitableResource,
            value: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Calls a secure monitor function (TrustZone, EL3)."]
        #[doc = " @param regs Arguments to pass to the secure monitor."]
        #[doc = " @return Return value from the secure monitor."]
        #[doc = " @note Syscall number 0x7F."]
        #[doc = " @warning This is a privileged syscall. Use \\ref envIsSyscallHinted to check if it is available."]
        pub fn svcCallSecureMonitor(regs: *mut root::SecmonArgs) -> u64;
    }
    pub type _LOCK_T = i32;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __lock_t {
        pub lock: root::_LOCK_T,
        pub thread_tag: u32,
        pub counter: u32,
    }
    pub type _LOCK_RECURSIVE_T = root::__lock_t;
    pub type _COND_T = u32;
    extern "C" {
        pub fn __libc_lock_init(lock: *mut root::_LOCK_T);
    }
    extern "C" {
        pub fn __libc_lock_init_recursive(lock: *mut root::_LOCK_RECURSIVE_T);
    }
    extern "C" {
        pub fn __libc_lock_close(lock: *mut root::_LOCK_T);
    }
    extern "C" {
        pub fn __libc_lock_close_recursive(lock: *mut root::_LOCK_RECURSIVE_T);
    }
    extern "C" {
        pub fn __libc_lock_acquire(lock: *mut root::_LOCK_T);
    }
    extern "C" {
        pub fn __libc_lock_acquire_recursive(lock: *mut root::_LOCK_RECURSIVE_T);
    }
    extern "C" {
        pub fn __libc_lock_release(lock: *mut root::_LOCK_T);
    }
    extern "C" {
        pub fn __libc_lock_release_recursive(lock: *mut root::_LOCK_RECURSIVE_T);
    }
    extern "C" {
        pub fn __libc_lock_try_acquire(lock: *mut root::_LOCK_T) -> libc::c_int;
    }
    extern "C" {
        pub fn __libc_lock_try_acquire_recursive(lock: *mut root::_LOCK_RECURSIVE_T)
            -> libc::c_int;
    }
    extern "C" {
        pub fn __libc_cond_init(cond: *mut root::_COND_T) -> libc::c_int;
    }
    extern "C" {
        pub fn __libc_cond_signal(cond: *mut root::_COND_T) -> libc::c_int;
    }
    extern "C" {
        pub fn __libc_cond_broadcast(cond: *mut root::_COND_T) -> libc::c_int;
    }
    extern "C" {
        pub fn __libc_cond_wait(
            cond: *mut root::_COND_T,
            lock: *mut root::_LOCK_T,
            timeout_ns: u64,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn __libc_cond_wait_recursive(
            cond: *mut root::_COND_T,
            lock: *mut root::_LOCK_RECURSIVE_T,
            timeout_ns: u64,
        ) -> libc::c_int;
    }
    #[doc = " Mutex datatype, defined in newlib."]
    pub type Mutex = root::_LOCK_T;
    #[doc = " Recursive mutex datatype, defined in newlib."]
    pub type RMutex = root::_LOCK_RECURSIVE_T;
    extern "C" {
        #[doc = " @brief Locks a mutex."]
        #[doc = " @param m Mutex object."]
        pub fn mutexLock(m: *mut root::Mutex);
    }
    extern "C" {
        #[doc = " @brief Attempts to lock a mutex without waiting."]
        #[doc = " @param m Mutex object."]
        #[doc = " @return 1 if the mutex has been acquired successfully, and 0 on contention."]
        pub fn mutexTryLock(m: *mut root::Mutex) -> bool;
    }
    extern "C" {
        #[doc = " @brief Unlocks a mutex."]
        #[doc = " @param m Mutex object."]
        pub fn mutexUnlock(m: *mut root::Mutex);
    }
    extern "C" {
        #[doc = " @brief Locks a recursive mutex."]
        #[doc = " @param m Recursive mutex object."]
        pub fn rmutexLock(m: *mut root::RMutex);
    }
    extern "C" {
        #[doc = " @brief Attempts to lock a recursive mutex without waiting."]
        #[doc = " @param m Recursive mutex object."]
        #[doc = " @return 1 if the mutex has been acquired successfully, and 0 on contention."]
        pub fn rmutexTryLock(m: *mut root::RMutex) -> bool;
    }
    extern "C" {
        #[doc = " @brief Unlocks a recursive mutex."]
        #[doc = " @param m Recursive mutex object."]
        pub fn rmutexUnlock(m: *mut root::RMutex);
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct WaitableMethods {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct WaitableNode {
        pub prev: *mut root::WaitableNode,
        pub next: *mut root::WaitableNode,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Waitable {
        pub vt: *const root::WaitableMethods,
        pub list: root::WaitableNode,
        pub mutex: root::Mutex,
    }
    pub const WaiterType_WaiterType_Handle: root::WaiterType = 0;
    pub const WaiterType_WaiterType_HandleWithClear: root::WaiterType = 1;
    pub const WaiterType_WaiterType_Waitable: root::WaiterType = 2;
    pub type WaiterType = u32;
    #[doc = " Waiter structure, representing any generic waitable synchronization object; both kernel-mode and user-mode."]
    #[repr(C)]
    pub struct Waiter {
        pub type_: root::WaiterType,
        pub __bindgen_anon_1: root::Waiter__bindgen_ty_1,
    }
    #[repr(C)]
    pub struct Waiter__bindgen_ty_1 {
        pub handle: root::__BindgenUnionField<root::Handle>,
        pub waitable: root::__BindgenUnionField<*mut root::Waitable>,
        pub bindgen_union_field: u64,
    }
    extern "C" {
        #[doc = " @brief Waits for an arbitrary number of generic waitable synchronization objects, optionally with a timeout."]
        #[doc = " @param[out] idx_out Variable that will received the index of the signalled object."]
        #[doc = " @param[in] objects Array containing \\ref Waiter structures."]
        #[doc = " @param[in] num_objects Number of objects in the array."]
        #[doc = " @param[in] timeout Timeout (in nanoseconds)."]
        #[doc = " @return Result code."]
        #[doc = " @note The number of objects must not be greater than \\ref MAX_WAIT_OBJECTS. This is a Horizon kernel limitation."]
        pub fn waitObjects(
            idx_out: *mut root::s32,
            objects: *const root::Waiter,
            num_objects: root::s32,
            timeout: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Waits for an arbitrary number of kernel synchronization objects, optionally with a timeout. This function replaces \\ref svcWaitSynchronization."]
        #[doc = " @param[out] idx_out Variable that will received the index of the signalled object."]
        #[doc = " @param[in] handles Array containing handles."]
        #[doc = " @param[in] num_handles Number of handles in the array."]
        #[doc = " @param[in] timeout Timeout (in nanoseconds)."]
        #[doc = " @return Result code."]
        #[doc = " @note The number of objects must not be greater than \\ref MAX_WAIT_OBJECTS. This is a Horizon kernel limitation."]
        pub fn waitHandles(
            idx_out: *mut root::s32,
            handles: *const root::Handle,
            num_handles: root::s32,
            timeout: u64,
        ) -> root::Result;
    }
    #[doc = " Transfer memory information structure."]
    #[repr(C)]
    pub struct TransferMemory {
        #[doc = "< Kernel object handle."]
        pub handle: root::Handle,
        #[doc = "< Size of the transfer memory object."]
        pub size: root::size_t,
        #[doc = "< Permissions of the transfer memory object."]
        pub perm: root::Permission,
        #[doc = "< Address of the source backing memory."]
        pub src_addr: *mut libc::c_void,
        #[doc = "< Address to which the transfer memory object is mapped."]
        pub map_addr: *mut libc::c_void,
    }
    extern "C" {
        #[doc = " @brief Creates a transfer memory object."]
        #[doc = " @param t Transfer memory information structure that will be filled in."]
        #[doc = " @param size Size of the transfer memory object to create."]
        #[doc = " @param perm Permissions with which to protect the transfer memory in the local process."]
        #[doc = " @return Result code."]
        pub fn tmemCreate(
            t: *mut root::TransferMemory,
            size: root::size_t,
            perm: root::Permission,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a transfer memory object from existing memory."]
        #[doc = " @param t Transfer memory information structure that will be filled in."]
        #[doc = " @param buf Pointer to a page-aligned buffer."]
        #[doc = " @param size Size of the transfer memory object to create."]
        #[doc = " @param perm Permissions with which to protect the transfer memory in the local process."]
        #[doc = " @return Result code."]
        pub fn tmemCreateFromMemory(
            t: *mut root::TransferMemory,
            buf: *mut libc::c_void,
            size: root::size_t,
            perm: root::Permission,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Loads a transfer memory object coming from a remote process."]
        #[doc = " @param t Transfer memory information structure which will be filled in."]
        #[doc = " @param handle Handle of the transfer memory object."]
        #[doc = " @param size Size of the transfer memory object that is being loaded."]
        #[doc = " @param perm Permissions which the transfer memory is expected to have in the process that owns the memory."]
        #[doc = " @warning This is a privileged operation; in normal circumstances applications shouldn't use this function."]
        pub fn tmemLoadRemote(
            t: *mut root::TransferMemory,
            handle: root::Handle,
            size: root::size_t,
            perm: root::Permission,
        );
    }
    extern "C" {
        #[doc = " @brief Maps a transfer memory object."]
        #[doc = " @param t Transfer memory information structure."]
        #[doc = " @return Result code."]
        #[doc = " @warning This is a privileged operation; in normal circumstances applications cannot use this function."]
        pub fn tmemMap(t: *mut root::TransferMemory) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Unmaps a transfer memory object."]
        #[doc = " @param t Transfer memory information structure."]
        #[doc = " @return Result code."]
        #[doc = " @warning This is a privileged operation; in normal circumstances applications cannot use this function."]
        pub fn tmemUnmap(t: *mut root::TransferMemory) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Frees up resources used by a transfer memory object, unmapping and closing handles, etc."]
        #[doc = " @param t Transfer memory information structure."]
        #[doc = " @return Result code."]
        pub fn tmemClose(t: *mut root::TransferMemory) -> root::Result;
    }
    #[doc = " Shared memory information structure."]
    #[repr(C)]
    pub struct SharedMemory {
        #[doc = "< Kernel object handle."]
        pub handle: root::Handle,
        #[doc = "< Size of the shared memory object."]
        pub size: root::size_t,
        #[doc = "< Permissions."]
        pub perm: root::Permission,
        #[doc = "< Address to which the shared memory object is mapped."]
        pub map_addr: *mut libc::c_void,
    }
    extern "C" {
        #[doc = " @brief Creates a shared memory object."]
        #[doc = " @param s Shared memory information structure which will be filled in."]
        #[doc = " @param size Size of the shared memory object to create."]
        #[doc = " @param local_perm Permissions with which the shared memory object will be mapped in the local process."]
        #[doc = " @param remote_perm Permissions with which the shared memory object will be mapped in the remote process (can be Perm_DontCare)."]
        #[doc = " @return Result code."]
        #[doc = " @warning This is a privileged operation; in normal circumstances applications cannot use this function."]
        pub fn shmemCreate(
            s: *mut root::SharedMemory,
            size: root::size_t,
            local_perm: root::Permission,
            remote_perm: root::Permission,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Loads a shared memory object coming from a remote process."]
        #[doc = " @param s Shared memory information structure which will be filled in."]
        #[doc = " @param handle Handle of the shared memory object."]
        #[doc = " @param size Size of the shared memory object that is being loaded."]
        #[doc = " @param perm Permissions with which the shared memory object will be mapped in the local process."]
        pub fn shmemLoadRemote(
            s: *mut root::SharedMemory,
            handle: root::Handle,
            size: root::size_t,
            perm: root::Permission,
        );
    }
    extern "C" {
        #[doc = " @brief Maps a shared memory object."]
        #[doc = " @param s Shared memory information structure."]
        #[doc = " @return Result code."]
        pub fn shmemMap(s: *mut root::SharedMemory) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Unmaps a shared memory object."]
        #[doc = " @param s Shared memory information structure."]
        #[doc = " @return Result code."]
        pub fn shmemUnmap(s: *mut root::SharedMemory) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Frees up resources used by a shared memory object, unmapping and closing handles, etc."]
        #[doc = " @param s Shared memory information structure."]
        #[doc = " @return Result code."]
        pub fn shmemClose(s: *mut root::SharedMemory) -> root::Result;
    }
    #[doc = " Kernel-mode event structure."]
    #[repr(C)]
    pub struct Event {
        #[doc = "< Read-only event handle"]
        pub revent: root::Handle,
        #[doc = "< Write-only event handle"]
        pub wevent: root::Handle,
        #[doc = "< Autoclear flag"]
        pub autoclear: bool,
    }
    extern "C" {
        #[doc = " @brief Creates a kernel-mode event."]
        #[doc = " @param[out] t Pointer to \\ref Event structure."]
        #[doc = " @param[in] autoclear Autoclear flag."]
        #[doc = " @return Result code."]
        #[doc = " @warning This is a privileged operation; in normal circumstances applications shouldn't use this function."]
        pub fn eventCreate(t: *mut root::Event, autoclear: bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Loads a kernel-mode event obtained from IPC."]
        #[doc = " @param[out] t Pointer to \\ref Event structure."]
        #[doc = " @param[in] handle Read-only event handle."]
        #[doc = " @param[in] autoclear Autoclear flag."]
        pub fn eventLoadRemote(t: *mut root::Event, handle: root::Handle, autoclear: bool);
    }
    extern "C" {
        #[doc = " @brief Closes a kernel-mode event."]
        #[doc = " @param[in] t Pointer to \\ref Event structure."]
        pub fn eventClose(t: *mut root::Event);
    }
    extern "C" {
        #[doc = " @brief Waits on a kernel-mode event."]
        #[doc = " @param[in] t Pointer to \\ref Event structure."]
        #[doc = " @param[in] timeout Timeout in nanoseconds (pass UINT64_MAX to wait indefinitely)."]
        #[doc = " @return Result code."]
        pub fn eventWait(t: *mut root::Event, timeout: u64) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Signals a kernel-mode event."]
        #[doc = " @param[in] t Pointer to \\ref Event structure."]
        #[doc = " @return Result code."]
        #[doc = " @note This function only works for events initialized with \\ref eventCreate, it doesn't work with events initialized with \\ref eventLoadRemote."]
        #[doc = " @warning This is a privileged operation; in normal circumstances applications shouldn't use this function."]
        pub fn eventFire(t: *mut root::Event) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Clears a kernel-mode event."]
        #[doc = " @param[in] t Pointer to \\ref Event structure."]
        #[doc = " @return Result code."]
        #[doc = " @note This function shouldn't be used on autoclear events."]
        pub fn eventClear(t: *mut root::Event) -> root::Result;
    }
    #[doc = " User-mode event object."]
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct UEvent {
        pub waitable: root::Waitable,
        pub signal: bool,
        pub auto_clear: bool,
    }
    extern "C" {
        #[doc = " @brief Creates a user-mode event."]
        #[doc = " @param[out] e UEvent object."]
        #[doc = " @param[in] auto_clear Whether to automatically clear the event."]
        #[doc = " @note It is safe to wait on this event with several threads simultaneously."]
        #[doc = " @note If more than one thread is listening on it, at least one thread will get the signal. No other guarantees."]
        pub fn ueventCreate(e: *mut root::UEvent, auto_clear: bool);
    }
    extern "C" {
        #[doc = " @brief Clears the event signal."]
        #[doc = " @param[in] e UEvent object."]
        pub fn ueventClear(e: *mut root::UEvent);
    }
    extern "C" {
        #[doc = " @brief Signals the event."]
        #[doc = " @param[in] e UEvent object."]
        pub fn ueventSignal(e: *mut root::UEvent);
    }
    #[doc = "< Timers of this kind fire once and then stop automatically."]
    pub const TimerType_TimerType_OneShot: root::TimerType = 0;
    #[doc = "< Timers of this kind fire periodically."]
    pub const TimerType_TimerType_Repeating: root::TimerType = 1;
    #[doc = " Valid types for a user-mode timer."]
    pub type TimerType = u32;
    #[doc = " User-mode timer object."]
    #[repr(C)]
    pub struct UTimer {
        pub waitable: root::Waitable,
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize], u8>,
        pub next_tick: u64,
        pub interval: u64,
    }
    impl UTimer {
        #[inline]
        pub fn type_(&self) -> root::TimerType {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_type(&mut self, val: root::TimerType) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(0usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn started(&self) -> bool {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_started(&mut self, val: bool) {
            unsafe {
                let val: u8 = ::core::mem::transmute(val);
                self._bitfield_1.set(8usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            type_: root::TimerType,
            started: bool,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize], u8> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize], u8> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 8u8, {
                let type_: u32 = unsafe { ::core::mem::transmute(type_) };
                type_ as u64
            });
            __bindgen_bitfield_unit.set(8usize, 1u8, {
                let started: u8 = unsafe { ::core::mem::transmute(started) };
                started as u64
            });
            __bindgen_bitfield_unit
        }
    }
    extern "C" {
        #[doc = " @brief Creates a user-mode timer."]
        #[doc = " @param[out] t UTimer object."]
        #[doc = " @param[in] interval Interval (in nanoseconds)."]
        #[doc = " @param[in] type Type of timer to create (see \\ref TimerType)."]
        #[doc = " @note The timer is stopped when it is created. Use \\ref utimerStart to start it."]
        #[doc = " @note It is safe to wait on this timer with several threads simultaneously."]
        #[doc = " @note If more than one thread is listening on it, at least one thread will get the signal. No other guarantees."]
        #[doc = " @note For a repeating timer: If the timer triggers twice before you wait on it, you will only get one signal."]
        pub fn utimerCreate(t: *mut root::UTimer, interval: u64, type_: root::TimerType);
    }
    extern "C" {
        #[doc = " @brief Starts the timer."]
        #[doc = " @param[in] t UTimer object."]
        pub fn utimerStart(t: *mut root::UTimer);
    }
    extern "C" {
        #[doc = " @brief Stops the timer."]
        #[doc = " @param[in] t UTimer object."]
        pub fn utimerStop(t: *mut root::UTimer);
    }
    #[doc = " Condition variable."]
    pub type CondVar = u32;
    extern "C" {
        #[doc = " @brief Waits on a condition variable with a timeout."]
        #[doc = " @param[in] c Condition variable object."]
        #[doc = " @param[in] m Mutex object to use inside the condition variable."]
        #[doc = " @param[in] timeout Timeout in nanoseconds."]
        #[doc = " @return Result code (0xEA01 on timeout)."]
        #[doc = " @remark On function return, the underlying mutex is acquired."]
        pub fn condvarWaitTimeout(
            c: *mut root::CondVar,
            m: *mut root::Mutex,
            timeout: u64,
        ) -> root::Result;
    }
    #[doc = " Read/write lock structure."]
    #[repr(C)]
    pub struct RwLock {
        pub mutex: root::Mutex,
        pub condvar_readers: root::CondVar,
        pub condvar_writer: root::CondVar,
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize], u32>,
    }
    impl RwLock {
        #[inline]
        pub fn readers(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
        }
        #[inline]
        pub fn set_readers(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(0usize, 31u8, val as u64)
            }
        }
        #[inline]
        pub fn writer(&self) -> bool {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u8) }
        }
        #[inline]
        pub fn set_writer(&mut self, val: bool) {
            unsafe {
                let val: u8 = ::core::mem::transmute(val);
                self._bitfield_1.set(31usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            readers: u32,
            writer: bool,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize], u32> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize], u32> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 31u8, {
                let readers: u32 = unsafe { ::core::mem::transmute(readers) };
                readers as u64
            });
            __bindgen_bitfield_unit.set(31usize, 1u8, {
                let writer: u8 = unsafe { ::core::mem::transmute(writer) };
                writer as u64
            });
            __bindgen_bitfield_unit
        }
    }
    extern "C" {
        #[doc = " @brief Initializes the read/write lock."]
        #[doc = " @param r Read/write lock object."]
        pub fn rwlockInit(r: *mut root::RwLock);
    }
    extern "C" {
        #[doc = " @brief Locks the read/write lock for reading."]
        #[doc = " @param r Read/write lock object."]
        pub fn rwlockReadLock(r: *mut root::RwLock);
    }
    extern "C" {
        #[doc = " @brief Unlocks the read/write lock for reading."]
        #[doc = " @param r Read/write lock object."]
        pub fn rwlockReadUnlock(r: *mut root::RwLock);
    }
    extern "C" {
        #[doc = " @brief Locks the read/write lock for writing."]
        #[doc = " @param r Read/write lock object."]
        pub fn rwlockWriteLock(r: *mut root::RwLock);
    }
    extern "C" {
        #[doc = " @brief Unlocks the read/write lock for writing."]
        #[doc = " @param r Read/write lock object."]
        pub fn rwlockWriteUnlock(r: *mut root::RwLock);
    }
    #[doc = " Thread information structure."]
    #[repr(C)]
    pub struct Thread {
        #[doc = "< Thread handle."]
        pub handle: root::Handle,
        #[doc = "< Pointer to stack memory."]
        pub stack_mem: *mut libc::c_void,
        #[doc = "< Pointer to stack memory mirror."]
        pub stack_mirror: *mut libc::c_void,
        #[doc = "< Stack size."]
        pub stack_sz: root::size_t,
        pub tls_array: *mut *mut libc::c_void,
        pub next: *mut root::Thread,
        pub prev_next: *mut *mut root::Thread,
    }
    extern "C" {
        #[doc = " @brief Creates a thread."]
        #[doc = " @param t Thread information structure which will be filled in."]
        #[doc = " @param entry Entrypoint of the thread."]
        #[doc = " @param arg Argument to pass to the entrypoint."]
        #[doc = " @param stack_sz Stack size (rounded up to page alignment)."]
        #[doc = " @param prio Thread priority (0x00~0x3F); 0x2C is the usual priority of the main thread, 0x3B is a special priority on cores 0..2 that enables preemptive multithreading (0x3F on core 3)."]
        #[doc = " @param cpuid ID of the core on which to create the thread (0~3); or -2 to use the default core for the current process."]
        #[doc = " @return Result code."]
        pub fn threadCreate(
            t: *mut root::Thread,
            entry: root::ThreadFunc,
            arg: *mut libc::c_void,
            stack_sz: root::size_t,
            prio: libc::c_int,
            cpuid: libc::c_int,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Starts the execution of a thread."]
        #[doc = " @param t Thread information structure."]
        #[doc = " @return Result code."]
        pub fn threadStart(t: *mut root::Thread) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Exits the current thread immediately."]
        pub fn threadExit();
    }
    extern "C" {
        #[doc = " @brief Waits for a thread to finish executing."]
        #[doc = " @param t Thread information structure."]
        #[doc = " @return Result code."]
        pub fn threadWaitForExit(t: *mut root::Thread) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Frees up resources associated with a thread."]
        #[doc = " @param t Thread information structure."]
        #[doc = " @return Result code."]
        pub fn threadClose(t: *mut root::Thread) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Pauses the execution of a thread."]
        #[doc = " @param t Thread information structure."]
        #[doc = " @return Result code."]
        pub fn threadPause(t: *mut root::Thread) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Resumes the execution of a thread, after having been paused."]
        #[doc = " @param t Thread information structure."]
        #[doc = " @return Result code."]
        pub fn threadResume(t: *mut root::Thread) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Dumps the registers of a thread paused by @ref threadPause (register groups: all)."]
        #[doc = " @param[out] ctx Output thread context (register dump)."]
        #[doc = " @param t Thread information structure."]
        #[doc = " @return Result code."]
        #[doc = " @warning Official kernel will not dump x0..x18 if the thread is currently executing a system call, and prior to 6.0.0 doesn't dump TPIDR_EL0."]
        pub fn threadDumpContext(
            ctx: *mut root::ThreadContext,
            t: *mut root::Thread,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the raw handle to the current thread."]
        #[doc = " @return The current thread's handle."]
        pub fn threadGetCurHandle() -> root::Handle;
    }
    extern "C" {
        #[doc = " @brief Allocates a TLS slot."]
        #[doc = " @param destructor Function to run automatically when a thread exits."]
        #[doc = " @return TLS slot ID on success, or a negative value on failure."]
        pub fn threadTlsAlloc(
            destructor: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
        ) -> root::s32;
    }
    extern "C" {
        #[doc = " @brief Retrieves the value stored in a TLS slot."]
        #[doc = " @param slot_id TLS slot ID."]
        #[doc = " @return Value."]
        pub fn threadTlsGet(slot_id: root::s32) -> *mut libc::c_void;
    }
    extern "C" {
        #[doc = " @brief Stores the specified value into a TLS slot."]
        #[doc = " @param slot_id TLS slot ID."]
        #[doc = " @param value Value."]
        pub fn threadTlsSet(slot_id: root::s32, value: *mut libc::c_void);
    }
    extern "C" {
        #[doc = " @brief Frees a TLS slot."]
        #[doc = " @param slot_id TLS slot ID."]
        pub fn threadTlsFree(slot_id: root::s32);
    }
    #[doc = " Semaphore structure."]
    #[repr(C)]
    pub struct Semaphore {
        #[doc = "< Condition variable object."]
        pub condvar: root::CondVar,
        #[doc = "< Mutex object."]
        pub mutex: root::Mutex,
        #[doc = "< Internal counter."]
        pub count: u64,
    }
    extern "C" {
        #[doc = " @brief Initializes a semaphore and its internal counter."]
        #[doc = " @param s Semaphore object."]
        #[doc = " @param initial_count initial value for internal counter (typically the # of free resources)."]
        pub fn semaphoreInit(s: *mut root::Semaphore, initial_count: u64);
    }
    extern "C" {
        #[doc = " @brief Increments the Semaphore to allow other threads to continue."]
        #[doc = " @param s Semaphore object."]
        pub fn semaphoreSignal(s: *mut root::Semaphore);
    }
    extern "C" {
        #[doc = " @brief Decrements Semaphore and waits if 0."]
        #[doc = " @param s Semaphore object."]
        pub fn semaphoreWait(s: *mut root::Semaphore);
    }
    extern "C" {
        #[doc = " @brief Attempts to get lock without waiting."]
        #[doc = " @param s Semaphore object."]
        #[doc = " @return true if no wait and successful lock, false otherwise."]
        pub fn semaphoreTryWait(s: *mut root::Semaphore) -> bool;
    }
    extern "C" {
        #[doc = " @brief Reserves a slice of general purpose address space."]
        #[doc = " @param size The size of the slice of address space that will be reserved (rounded up to page alignment)."]
        #[doc = " @return Pointer to the slice of address space, or NULL on failure."]
        pub fn virtmemReserve(size: root::size_t) -> *mut libc::c_void;
    }
    extern "C" {
        #[doc = " @brief Relinquishes a slice of address space reserved with virtmemReserve (currently no-op)."]
        #[doc = " @param addr Pointer to the slice."]
        #[doc = " @param size Size of the slice."]
        pub fn virtmemFree(addr: *mut libc::c_void, size: root::size_t);
    }
    extern "C" {
        #[doc = " @brief Reserves a slice of address space inside the stack memory mapping region (for use with svcMapMemory)."]
        #[doc = " @param size The size of the slice of address space that will be reserved (rounded up to page alignment)."]
        #[doc = " @return Pointer to the slice of address space, or NULL on failure."]
        pub fn virtmemReserveStack(size: root::size_t) -> *mut libc::c_void;
    }
    extern "C" {
        #[doc = " @brief Relinquishes a slice of address space reserved with virtmemReserveStack (currently no-op)."]
        #[doc = " @param addr Pointer to the slice."]
        #[doc = " @param size Size of the slice."]
        pub fn virtmemFreeStack(addr: *mut libc::c_void, size: root::size_t);
    }
    extern "C" {
        #[doc = " Returns the kernel version that can be detected by checking kernel capabilities. This only goes from 1 (representing 1.0.0) up to 6 (representing 6.0.0 and above). Generally, \\ref hosversionGet should be used instead of this function."]
        pub fn detectKernelVersion() -> libc::c_int;
    }
    extern "C" {
        #[doc = " Returns true if the process has a debugger attached."]
        pub fn detectDebugger() -> bool;
    }
    extern "C" {
        #[doc = " Returns true if the kernel is patched to allow self-process-jit."]
        pub fn detectJitKernelPatch() -> bool;
    }
    extern "C" {
        #[doc = " After this has been called, libnx will ignore the self-process-jit kernel patch. For testing purposes only."]
        pub fn detectIgnoreJitKernelPatch();
    }
    extern "C" {
        #[doc = " @brief Fills a buffer with random data."]
        #[doc = " @param buf Pointer to the buffer."]
        #[doc = " @param len Size of the buffer in bytes."]
        pub fn randomGet(buf: *mut libc::c_void, len: root::size_t);
    }
    extern "C" {
        #[doc = " @brief Returns a random 64-bit value."]
        #[doc = " @return Random value."]
        pub fn randomGet64() -> u64;
    }
    #[doc = "< JIT supported using svcSetProcessMemoryPermission"]
    pub const JitType_JitType_CodeMemory: root::JitType = 0;
    #[doc = "< JIT supported using 4.0.0+ code-memory syscalls (this isn't usable on 5.0.0+ so JitType_CodeMemory is used instead)."]
    pub const JitType_JitType_JitMemory: root::JitType = 1;
    #[doc = " JIT implementation type."]
    pub type JitType = u32;
    #[doc = " JIT buffer object."]
    #[repr(C)]
    pub struct Jit {
        pub type_: root::JitType,
        pub size: root::size_t,
        pub src_addr: *mut libc::c_void,
        pub rx_addr: *mut libc::c_void,
        pub rw_addr: *mut libc::c_void,
        pub is_executable: bool,
        pub handle: root::Handle,
    }
    extern "C" {
        #[doc = " @brief Creates a JIT buffer."]
        #[doc = " @param j JIT buffer."]
        #[doc = " @param size Size of the JIT buffer."]
        #[doc = " @return Result code."]
        pub fn jitCreate(j: *mut root::Jit, size: root::size_t) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Transition a JIT buffer to have writable permission."]
        #[doc = " @param j JIT buffer."]
        #[doc = " @return Result code."]
        pub fn jitTransitionToWritable(j: *mut root::Jit) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Transition a JIT buffer to have executable permission."]
        #[doc = " @param j JIT buffer."]
        #[doc = " @return Result code."]
        pub fn jitTransitionToExecutable(j: *mut root::Jit) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Destroys a JIT buffer."]
        #[doc = " @param j JIT buffer."]
        #[doc = " @return Result code."]
        pub fn jitClose(j: *mut root::Jit) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the address of the writable memory alias of a JIT buffer."]
        #[doc = " @param j JIT buffer."]
        #[doc = " @return Pointer to alias of the JIT buffer that can be written to."]
        pub fn jitGetRwAddr(j: *mut root::Jit) -> *mut libc::c_void;
    }
    extern "C" {
        #[doc = " @brief Gets the address of the executable memory alias of a JIT buffer."]
        #[doc = " @param j JIT buffer."]
        #[doc = " @return Pointer to alias of the JIT buffer that can be executed."]
        pub fn jitGetRxAddr(j: *mut root::Jit) -> *mut libc::c_void;
    }
    #[doc = "< Regular buffer."]
    pub const BufferType_BufferType_Normal: root::BufferType = 0;
    #[doc = "< Allows ProcessMemory and shared TransferMemory."]
    pub const BufferType_BufferType_Type1: root::BufferType = 1;
    pub const BufferType_BufferType_Invalid: root::BufferType = 2;
    #[doc = "< Same as Type1 except remote process is not allowed to use device-mapping."]
    pub const BufferType_BufferType_Type3: root::BufferType = 3;
    pub type BufferType = u32;
    pub const BufferDirection_BufferDirection_Send: root::BufferDirection = 0;
    pub const BufferDirection_BufferDirection_Recv: root::BufferDirection = 1;
    pub const BufferDirection_BufferDirection_Exch: root::BufferDirection = 2;
    pub type BufferDirection = u32;
    pub const IpcCommandType_IpcCommandType_Invalid: root::IpcCommandType = 0;
    pub const IpcCommandType_IpcCommandType_LegacyRequest: root::IpcCommandType = 1;
    pub const IpcCommandType_IpcCommandType_Close: root::IpcCommandType = 2;
    pub const IpcCommandType_IpcCommandType_LegacyControl: root::IpcCommandType = 3;
    pub const IpcCommandType_IpcCommandType_Request: root::IpcCommandType = 4;
    pub const IpcCommandType_IpcCommandType_Control: root::IpcCommandType = 5;
    pub const IpcCommandType_IpcCommandType_RequestWithContext: root::IpcCommandType = 6;
    pub const IpcCommandType_IpcCommandType_ControlWithContext: root::IpcCommandType = 7;
    pub type IpcCommandType = u32;
    pub const DomainMessageType_DomainMessageType_Invalid: root::DomainMessageType = 0;
    pub const DomainMessageType_DomainMessageType_SendMessage: root::DomainMessageType = 1;
    pub const DomainMessageType_DomainMessageType_Close: root::DomainMessageType = 2;
    pub type DomainMessageType = u32;
    #[doc = " IPC domain message header."]
    #[repr(C)]
    pub struct DomainMessageHeader {
        pub Type: u8,
        pub NumObjectIds: u8,
        pub Length: u16,
        pub ThisObjectId: u32,
        pub Pad: [u32; 2usize],
    }
    #[doc = " IPC domain response header."]
    #[repr(C)]
    pub struct DomainResponseHeader {
        pub NumObjectIds: u32,
        pub Pad: [u32; 3usize],
    }
    #[repr(C)]
    pub struct IpcCommand {
        pub NumSend: root::size_t,
        pub NumRecv: root::size_t,
        pub NumExch: root::size_t,
        pub Buffers: [*const libc::c_void; 8usize],
        pub BufferSizes: [root::size_t; 8usize],
        pub BufferTypes: [root::BufferType; 8usize],
        pub NumStaticIn: root::size_t,
        pub NumStaticOut: root::size_t,
        pub Statics: [*const libc::c_void; 8usize],
        pub StaticSizes: [root::size_t; 8usize],
        pub StaticIndices: [u8; 8usize],
        pub SendPid: bool,
        pub NumHandlesCopy: root::size_t,
        pub NumHandlesMove: root::size_t,
        pub Handles: [root::Handle; 8usize],
        pub NumObjectIds: root::size_t,
        pub ObjectIds: [u32; 8usize],
    }
    #[doc = " IPC buffer descriptor."]
    #[repr(C)]
    pub struct IpcBufferDescriptor {
        #[doc = "< Size of the buffer."]
        pub Size: u32,
        #[doc = "< Lower 32-bits of the address of the buffer"]
        pub Addr: u32,
        #[doc = "< Packed data (including higher bits of the address)"]
        pub Packed: u32,
    }
    #[doc = " IPC static send-buffer descriptor."]
    #[repr(C)]
    pub struct IpcStaticSendDescriptor {
        #[doc = "< Packed data (including higher bits of the address)"]
        pub Packed: u32,
        #[doc = "< Lower 32-bits of the address"]
        pub Addr: u32,
    }
    #[doc = " IPC static receive-buffer descriptor."]
    #[repr(C)]
    pub struct IpcStaticRecvDescriptor {
        #[doc = "< Lower 32-bits of the address of the buffer"]
        pub Addr: u32,
        #[doc = "< Packed data (including higher bits of the address)"]
        pub Packed: u32,
    }
    #[doc = " IPC parsed command (response) structure."]
    #[repr(C)]
    pub struct IpcParsedCommand {
        #[doc = "< Type of the command"]
        pub CommandType: root::IpcCommandType,
        #[doc = "< true if the 'Pid' field is filled out."]
        pub HasPid: bool,
        #[doc = "< PID included in the response (only if HasPid is true)"]
        pub Pid: u64,
        #[doc = "< Number of handles copied."]
        pub NumHandles: root::size_t,
        #[doc = "< Handles."]
        pub Handles: [root::Handle; 8usize],
        #[doc = "< true if the handle was moved, false if it was copied."]
        pub WasHandleCopied: [bool; 8usize],
        #[doc = "< true if the the message is a Domain message."]
        pub IsDomainRequest: bool,
        #[doc = "< Type of the domain message."]
        pub InMessageType: root::DomainMessageType,
        #[doc = "< Size of rawdata (for domain messages)."]
        pub InMessageLength: u32,
        #[doc = "< Object ID to call the command on (for domain messages)."]
        pub InThisObjectId: u32,
        #[doc = "< Number of object IDs (for domain messages)."]
        pub InNumObjectIds: root::size_t,
        #[doc = "< Object IDs (for domain messages)."]
        pub InObjectIds: [u32; 8usize],
        #[doc = "< true if the the message is a Domain response."]
        pub IsDomainResponse: bool,
        #[doc = "< Number of object IDs (for domain responses)."]
        pub OutNumObjectIds: root::size_t,
        #[doc = "< Object IDs (for domain responses)."]
        pub OutObjectIds: [u32; 8usize],
        #[doc = "< Number of buffers in the response."]
        pub NumBuffers: root::size_t,
        #[doc = "< Pointers to the buffers."]
        pub Buffers: [*mut libc::c_void; 8usize],
        #[doc = "< Sizes of the buffers."]
        pub BufferSizes: [root::size_t; 8usize],
        #[doc = "< Types of the buffers."]
        pub BufferTypes: [root::BufferType; 8usize],
        #[doc = "< Direction of each buffer."]
        pub BufferDirections: [root::BufferDirection; 8usize],
        #[doc = "< Number of statics in the response."]
        pub NumStatics: root::size_t,
        #[doc = "< Pointers to the statics."]
        pub Statics: [*mut libc::c_void; 8usize],
        #[doc = "< Sizes of the statics."]
        pub StaticSizes: [root::size_t; 8usize],
        #[doc = "< Indices of the statics."]
        pub StaticIndices: [u8; 8usize],
        #[doc = "< Number of output statics available in the response."]
        pub NumStaticsOut: root::size_t,
        #[doc = "< Pointer to the raw embedded data structure in the response."]
        pub Raw: *mut libc::c_void,
        #[doc = "< Pointer to the raw embedded data structure, without padding."]
        pub RawWithoutPadding: *mut libc::c_void,
        #[doc = "< Size of the raw embedded data."]
        pub RawSize: root::size_t,
    }
    #[doc = " Barrier structure."]
    #[repr(C)]
    pub struct Barrier {
        #[doc = "< Number of threads to reach the barrier."]
        pub count: u64,
        #[doc = "< Number of threads to wait on."]
        pub total: u64,
        pub mutex: root::Mutex,
        pub condvar: root::CondVar,
    }
    extern "C" {
        #[doc = " @brief Initializes a barrier and the number of threads to wait on."]
        #[doc = " @param b Barrier object."]
        #[doc = " @param thread_count Initial value for the number of threads the barrier must wait for."]
        pub fn barrierInit(b: *mut root::Barrier, thread_count: u64);
    }
    extern "C" {
        #[doc = " @brief Forces threads to wait until all threads have called barrierWait."]
        #[doc = " @param b Barrier object."]
        pub fn barrierWait(b: *mut root::Barrier);
    }
    #[doc = "< Uninitialized service."]
    pub const ServiceType_ServiceType_Uninitialized: root::ServiceType = 0;
    #[doc = "< Normal service."]
    pub const ServiceType_ServiceType_Normal: root::ServiceType = 1;
    #[doc = "< Domain."]
    pub const ServiceType_ServiceType_Domain: root::ServiceType = 2;
    #[doc = "< Domain subservice;"]
    pub const ServiceType_ServiceType_DomainSubservice: root::ServiceType = 3;
    #[doc = "< Service overriden in the homebrew environment."]
    pub const ServiceType_ServiceType_Override: root::ServiceType = 4;
    #[doc = " Service type."]
    pub type ServiceType = u32;
    #[doc = " Service object structure."]
    #[repr(C)]
    pub struct Service {
        pub handle: root::Handle,
        pub object_id: u32,
        pub type_: root::ServiceType,
    }
    extern "C" {
        #[doc = " @brief Initializes SM."]
        #[doc = " @return Result code."]
        #[doc = " @note This function is already called in the default application startup code (before main() is called)."]
        pub fn smInitialize() -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Uninitializes SM."]
        #[doc = " @return Result code."]
        #[doc = " @note This function is already handled in the default application exit code (after main() returns)."]
        pub fn smExit();
    }
    extern "C" {
        #[doc = " @brief Requests a service from SM."]
        #[doc = " @param[out] service_out Service structure which will be filled in."]
        #[doc = " @param[in] name Name of the service to request."]
        #[doc = " @return Result code."]
        pub fn smGetService(
            service_out: *mut root::Service,
            name: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Requests a service from SM, as an IPC session handle directly"]
        #[doc = " @param[out] handle_out Variable containing IPC session handle."]
        #[doc = " @param[in] name Name of the service to request."]
        #[doc = " @return Result code."]
        pub fn smGetServiceOriginal(handle_out: *mut root::Handle, name: u64)
            -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Retrieves an overriden service in the homebrew environment."]
        #[doc = " @param[in] name Name of the service to request (as 64-bit integer)."]
        #[doc = " @return IPC session handle."]
        pub fn smGetServiceOverride(name: u64) -> root::Handle;
    }
    extern "C" {
        #[doc = " @brief Creates and registers a new service within SM."]
        #[doc = " @param[out] handle_out Variable containing IPC port handle."]
        #[doc = " @param[in] name Name of the service."]
        #[doc = " @param[in] is_light \"Is light\""]
        #[doc = " @param[in] max_sessions Maximum number of concurrent sessions that the service will accept."]
        #[doc = " @return Result code."]
        pub fn smRegisterService(
            handle_out: *mut root::Handle,
            name: *const libc::c_char,
            is_light: bool,
            max_sessions: libc::c_int,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Unregisters a previously registered service in SM."]
        #[doc = " @param[in] name Name of the service."]
        #[doc = " @return Result code."]
        pub fn smUnregisterService(name: *const libc::c_char) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Check whether SM is initialized."]
        #[doc = " @return true if initialized."]
        pub fn smHasInitialized() -> bool;
    }
    extern "C" {
        #[doc = " @brief Gets the Service session used to communicate with SM."]
        #[doc = " @return Pointer to service session used to communicate with SM."]
        pub fn smGetServiceSession() -> *mut root::Service;
    }
    extern "C" {
        #[doc = " @brief Encodes a service name as a 64-bit integer."]
        #[doc = " @param[in] name Name of the service."]
        #[doc = " @return Encoded name."]
        pub fn smEncodeName(name: *const libc::c_char) -> u64;
    }
    extern "C" {
        #[doc = " @brief Overrides a service with a custom IPC service handle."]
        #[doc = " @param[in] name Name of the service (as 64-bit integer)."]
        #[doc = " @param[in] handle IPC session handle."]
        pub fn smAddOverrideHandle(name: u64, handle: root::Handle);
    }
    #[repr(C)]
    pub struct FsRightsId {
        pub c: [u8; 16usize],
    }
    #[repr(C)]
    pub struct FsFileSystem {
        pub s: root::Service,
    }
    #[repr(C)]
    pub struct FsFile {
        pub s: root::Service,
    }
    #[repr(C)]
    pub struct FsDir {
        pub s: root::Service,
    }
    #[repr(C)]
    pub struct FsStorage {
        pub s: root::Service,
    }
    #[repr(C)]
    pub struct FsSaveDataIterator {
        pub s: root::Service,
    }
    #[repr(C)]
    pub struct FsEventNotifier {
        pub s: root::Service,
    }
    #[repr(C)]
    pub struct FsDeviceOperator {
        pub s: root::Service,
    }
    #[doc = " Directory entry."]
    #[repr(C)]
    pub struct FsDirectoryEntry {
        #[doc = "< Entry name."]
        pub name: [libc::c_char; 769usize],
        pub pad: [u8; 3usize],
        #[doc = "< See FsEntryType."]
        pub type_: root::s8,
        #[doc = "< ?"]
        pub pad2: [u8; 3usize],
        #[doc = "< File size."]
        pub fileSize: u64,
    }
    #[doc = " Save Struct"]
    #[repr(C)]
    pub struct FsSave {
        #[doc = "< titleID of the savedata to access when accessing other titles' savedata via SaveData, otherwise FS_SAVEDATA_CURRENT_TITLEID."]
        pub titleID: u64,
        pub __bindgen_anon_1: root::FsSave__bindgen_ty_1,
        #[doc = "< saveID, 0 for SaveData."]
        pub saveID: u64,
        #[doc = "< See \\ref FsSaveDataType."]
        pub SaveDataType: u8,
        #[doc = "< Save data 'rank' or 'precedence'. 0 if this save data is considered the primary save data. 1 if it's considered the secondary save data."]
        pub rank: u8,
        #[doc = "< Save data index."]
        pub index: u16,
        #[doc = "< Padding."]
        pub pad_x24: u32,
        #[doc = "< 0 for SystemSaveData/SaveData."]
        pub unk_x28: u64,
        #[doc = "< 0 for SystemSaveData/SaveData."]
        pub unk_x30: u64,
        #[doc = "< 0 for SystemSaveData/SaveData."]
        pub unk_x38: u64,
    }
    #[repr(C, packed)]
    pub struct FsSave__bindgen_ty_1 {
        #[doc = "< userID of the user-specific savedata to access, otherwise FS_SAVEDATA_USERID_COMMONSAVE. See account.h."]
        pub userID: root::__BindgenUnionField<u128>,
        pub bindgen_union_field: [u8; 16usize],
    }
    #[repr(C)]
    #[repr(align(16))]
    pub struct FsSaveDataInfo {
        pub saveID_unk: u64,
        #[doc = "< See \\ref FsSaveDataSpaceId."]
        pub SaveDataSpaceId: u8,
        #[doc = "< See \\ref FsSaveDataType."]
        pub SaveDataType: u8,
        #[doc = "< Padding."]
        pub pad: [u8; 6usize],
        #[doc = "< See userID for \\ref FsSave."]
        pub userID: u128,
        #[doc = "< See saveID for \\ref FsSave."]
        pub saveID: u64,
        #[doc = "< titleID for FsSaveDataType_SaveData."]
        pub titleID: u64,
        #[doc = "< Raw saveimage size."]
        pub size: u64,
        #[doc = "< Save data index."]
        pub index: u16,
        #[doc = "< Save data 'rank' or 'precedence'. 0 if this save data is considered the primary save data. 1 if it's considered the secondary save data."]
        pub rank: u8,
        #[doc = "< Unknown. Usually zeros?"]
        pub unk_x3b: [u8; 37usize],
    }
    #[repr(C)]
    pub struct FsTimeStampRaw {
        #[doc = "< POSIX timestamp."]
        pub created: u64,
        #[doc = "< POSIX timestamp."]
        pub modified: u64,
        #[doc = "< POSIX timestamp."]
        pub accessed: u64,
        #[doc = "< 0x1 when the timestamps are set."]
        pub is_valid: u8,
        pub padding: [u8; 7usize],
    }
    pub const FsEntryType_ENTRYTYPE_DIR: root::FsEntryType = 0;
    pub const FsEntryType_ENTRYTYPE_FILE: root::FsEntryType = 1;
    pub type FsEntryType = u32;
    #[doc = "< Open for reading."]
    pub const FsFileFlags_FS_OPEN_READ: root::FsFileFlags = 1;
    #[doc = "< Open for writing."]
    pub const FsFileFlags_FS_OPEN_WRITE: root::FsFileFlags = 2;
    #[doc = "< Append file."]
    pub const FsFileFlags_FS_OPEN_APPEND: root::FsFileFlags = 4;
    pub type FsFileFlags = u32;
    #[doc = "< Creates a ConcatenationFile (dir with archive bit) instead of file."]
    pub const FsFileCreateFlags_FS_CREATE_BIG_FILE: root::FsFileCreateFlags = 1;
    pub type FsFileCreateFlags = u32;
    #[doc = "< Enable reading directory entries."]
    pub const FsDirectoryFlags_FS_DIROPEN_DIRECTORY: root::FsDirectoryFlags = 1;
    #[doc = "< Enable reading file entries."]
    pub const FsDirectoryFlags_FS_DIROPEN_FILE: root::FsDirectoryFlags = 2;
    #[doc = "< Causes result entries to not contain filesize information (always 0)."]
    pub const FsDirectoryFlags_FS_DIROPEN_NO_FILE_SIZE: root::FsDirectoryFlags = 2147483648;
    #[doc = " For use with fsFsOpenDirectory."]
    pub type FsDirectoryFlags = u32;
    #[doc = "< No Option."]
    pub const FsReadOption_FS_READOPTION_NONE: root::FsReadOption = 0;
    pub type FsReadOption = u32;
    #[doc = "< No option."]
    pub const FsWriteOption_FS_WRITEOPTION_NONE: root::FsWriteOption = 0;
    #[doc = "< Forces a flush after write."]
    pub const FsWriteOption_FS_WRITEOPTION_FLUSH: root::FsWriteOption = 1;
    pub type FsWriteOption = u32;
    pub const FsStorageId_FsStorageId_None: root::FsStorageId = 0;
    pub const FsStorageId_FsStorageId_Host: root::FsStorageId = 1;
    pub const FsStorageId_FsStorageId_GameCard: root::FsStorageId = 2;
    pub const FsStorageId_FsStorageId_NandSystem: root::FsStorageId = 3;
    pub const FsStorageId_FsStorageId_NandUser: root::FsStorageId = 4;
    pub const FsStorageId_FsStorageId_SdCard: root::FsStorageId = 5;
    pub type FsStorageId = u32;
    pub const FsContentStorageId_FS_CONTENTSTORAGEID_NandSystem: root::FsContentStorageId = 0;
    pub const FsContentStorageId_FS_CONTENTSTORAGEID_NandUser: root::FsContentStorageId = 1;
    pub const FsContentStorageId_FS_CONTENTSTORAGEID_SdCard: root::FsContentStorageId = 2;
    pub type FsContentStorageId = u32;
    pub const FsSaveDataSpaceId_FsSaveDataSpaceId_NandSystem: root::FsSaveDataSpaceId = 0;
    pub const FsSaveDataSpaceId_FsSaveDataSpaceId_NandUser: root::FsSaveDataSpaceId = 1;
    pub const FsSaveDataSpaceId_FsSaveDataSpaceId_SdCard: root::FsSaveDataSpaceId = 2;
    pub const FsSaveDataSpaceId_FsSaveDataSpaceId_TemporaryStorage: root::FsSaveDataSpaceId = 3;
    #[doc = "< Pseudo value for fsOpenSaveDataIterator()."]
    pub const FsSaveDataSpaceId_FsSaveDataSpaceId_All: root::FsSaveDataSpaceId = -1;
    pub type FsSaveDataSpaceId = i32;
    pub const FsSaveDataType_FsSaveDataType_SystemSaveData: root::FsSaveDataType = 0;
    pub const FsSaveDataType_FsSaveDataType_SaveData: root::FsSaveDataType = 1;
    pub const FsSaveDataType_FsSaveDataType_BcatDeliveryCacheStorage: root::FsSaveDataType = 2;
    pub const FsSaveDataType_FsSaveDataType_DeviceSaveData: root::FsSaveDataType = 3;
    #[doc = "< [3.0.0+]"]
    pub const FsSaveDataType_FsSaveDataType_TemporaryStorage: root::FsSaveDataType = 4;
    #[doc = "< [3.0.0+]"]
    pub const FsSaveDataType_FsSaveDataType_CacheStorage: root::FsSaveDataType = 5;
    pub type FsSaveDataType = u32;
    #[doc = "< Causes the cartridge to automatically start on bootup"]
    pub const FsGameCardAttribute_FsGameCardAttribute_AutoBoot: root::FsGameCardAttribute = 1;
    #[doc = "< Causes NS to throw an error on attempt to load the cartridge"]
    pub const FsGameCardAttribute_FsGameCardAttribute_ForceError: root::FsGameCardAttribute = 2;
    #[doc = "< Indicates that this gamecard is a repair tool."]
    pub const FsGameCardAttribute_FsGameCardAttribute_Repair: root::FsGameCardAttribute = 4;
    pub type FsGameCardAttribute = u32;
    #[repr(C)]
    pub struct FsGameCardHandle {
        pub value: u32,
    }
    #[repr(C)]
    pub struct FsRangeInfo {
        #[doc = "< Contains bitflags describing how data is AES encrypted."]
        pub aes_ctr_key_type: u32,
        #[doc = "< Contains bitflags describing how data is emulated."]
        pub speed_emulation_type: u32,
        pub reserved: [u32; 14usize],
    }
    #[doc = "< Fill range with zero for supported file/storage."]
    pub const FsOperationId_FsOperationId_Clear: root::FsOperationId = 0;
    #[doc = "< Clears signature for supported file/storage."]
    pub const FsOperationId_FsOperationId_ClearSignature: root::FsOperationId = 1;
    #[doc = "< Invalidates cache for supported file/storage."]
    pub const FsOperationId_FsOperationId_InvalidateCache: root::FsOperationId = 2;
    #[doc = "< Retrieves information on data for supported file/storage."]
    pub const FsOperationId_FsOperationId_QueryRange: root::FsOperationId = 3;
    pub type FsOperationId = u32;
    pub const FsBisStorageId_FsBisStorageId_Boot0: root::FsBisStorageId = 0;
    pub const FsBisStorageId_FsBisStorageId_Boot1: root::FsBisStorageId = 10;
    pub const FsBisStorageId_FsBisStorageId_UserDataRoot: root::FsBisStorageId = 20;
    pub const FsBisStorageId_FsBisStorageId_BootConfigAndPackage2NormalMain: root::FsBisStorageId =
        21;
    pub const FsBisStorageId_FsBisStorageId_BootConfigAndPackage2NormalSub: root::FsBisStorageId =
        22;
    pub const FsBisStorageId_FsBisStorageId_BootConfigAndPackage2SafeMain: root::FsBisStorageId =
        23;
    pub const FsBisStorageId_FsBisStorageId_BootConfigAndPackage2SafeSub: root::FsBisStorageId = 24;
    pub const FsBisStorageId_FsBisStorageId_BootConfigAndPackage2RepairMain: root::FsBisStorageId =
        25;
    pub const FsBisStorageId_FsBisStorageId_BootConfigAndPackage2RepairSub: root::FsBisStorageId =
        26;
    pub const FsBisStorageId_FsBisStorageId_CalibrationBinary: root::FsBisStorageId = 27;
    pub const FsBisStorageId_FsBisStorageId_CalibrationFile: root::FsBisStorageId = 28;
    pub const FsBisStorageId_FsBisStorageId_SafeMode: root::FsBisStorageId = 29;
    pub const FsBisStorageId_FsBisStorageId_User: root::FsBisStorageId = 30;
    pub const FsBisStorageId_FsBisStorageId_System: root::FsBisStorageId = 31;
    pub const FsBisStorageId_FsBisStorageId_SystemProperEncryption: root::FsBisStorageId = 32;
    pub const FsBisStorageId_FsBisStorageId_SystemProperPartition: root::FsBisStorageId = 33;
    pub type FsBisStorageId = u32;
    extern "C" {
        pub fn fsInitialize() -> root::Result;
    }
    extern "C" {
        pub fn fsExit();
    }
    extern "C" {
        pub fn fsGetServiceSession() -> *mut root::Service;
    }
    extern "C" {
        pub fn fsOpenBisStorage(
            out: *mut root::FsStorage,
            PartitionId: root::FsBisStorageId,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsOpenBisFileSystem(
            out: *mut root::FsFileSystem,
            PartitionId: root::FsBisStorageId,
            string: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsIsExFatSupported(out: *mut bool) -> root::Result;
    }
    extern "C" {
        #[doc = " Do not call this directly, see fs_dev.h."]
        pub fn fsMountSdcard(out: *mut root::FsFileSystem) -> root::Result;
    }
    extern "C" {
        pub fn fsMountSaveData(
            out: *mut root::FsFileSystem,
            inval: u8,
            save: *mut root::FsSave,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsMountSystemSaveData(
            out: *mut root::FsFileSystem,
            inval: u8,
            save: *mut root::FsSave,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsOpenSaveDataIterator(
            out: *mut root::FsSaveDataIterator,
            SaveDataSpaceId: root::s32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsOpenContentStorageFileSystem(
            out: *mut root::FsFileSystem,
            content_storage_id: root::FsContentStorageId,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsOpenDataStorageByCurrentProcess(out: *mut root::FsStorage) -> root::Result;
    }
    extern "C" {
        pub fn fsOpenDataStorageByDataId(
            out: *mut root::FsStorage,
            dataId: u64,
            storageId: root::FsStorageId,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsOpenDeviceOperator(out: *mut root::FsDeviceOperator) -> root::Result;
    }
    extern "C" {
        pub fn fsOpenSdCardDetectionEventNotifier(out: *mut root::FsEventNotifier) -> root::Result;
    }
    extern "C" {
        #[doc = " Retrieves the rights id corresponding to the content path. Only available on [2.0.0+]."]
        pub fn fsGetRightsIdByPath(
            path: *const libc::c_char,
            out_rights_id: *mut root::FsRightsId,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Retrieves the rights id and key generation corresponding to the content path. Only available on [3.0.0+]."]
        pub fn fsGetRightsIdAndKeyGenerationByPath(
            path: *const libc::c_char,
            out_key_generation: *mut u8,
            out_rights_id: *mut root::FsRightsId,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Wrapper(s) for fsMountSaveData."]
        #[doc = " See FsSave for titleID and userID."]
        pub fn fsMount_SaveData(
            out: *mut root::FsFileSystem,
            titleID: u64,
            userID: u128,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Wrapper for fsMountSystemSaveData."]
        #[doc = " WARNING: You can brick when writing to SystemSaveData, if the data is corrupted etc."]
        pub fn fsMount_SystemSaveData(
            out: *mut root::FsFileSystem,
            saveID: u64,
        ) -> root::Result;
    }
    pub const FsFileSystemType_FsFileSystemType_Logo: root::FsFileSystemType = 2;
    pub const FsFileSystemType_FsFileSystemType_ContentControl: root::FsFileSystemType = 3;
    pub const FsFileSystemType_FsFileSystemType_ContentManual: root::FsFileSystemType = 4;
    pub const FsFileSystemType_FsFileSystemType_ContentMeta: root::FsFileSystemType = 5;
    pub const FsFileSystemType_FsFileSystemType_ContentData: root::FsFileSystemType = 6;
    pub const FsFileSystemType_FsFileSystemType_ApplicationPackage: root::FsFileSystemType = 7;
    pub type FsFileSystemType = u32;
    pub const FsFileSystemQueryType_FsFileSystemQueryType_SetArchiveBit:
        root::FsFileSystemQueryType = 0;
    pub type FsFileSystemQueryType = u32;
    extern "C" {
        #[doc = " Mount requested filesystem type from content file"]
        pub fn fsOpenFileSystem(
            out: *mut root::FsFileSystem,
            fsType: root::FsFileSystemType,
            contentPath: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " same as calling fsOpenFileSystemWithId with 0 as titleId"]
        pub fn fsOpenFileSystemWithId(
            out: *mut root::FsFileSystem,
            titleId: u64,
            fsType: root::FsFileSystemType,
            contentPath: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " works on all firmwares, titleId is ignored on 1.0.0"]
        pub fn fsOpenFileSystemWithPatch(
            out: *mut root::FsFileSystem,
            titleId: u64,
            fsType: root::FsFileSystemType,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " 2.0.0+, like OpenFileSystemWithId but without content path."]
        pub fn fsFsCreateFile(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
            size: root::size_t,
            flags: libc::c_int,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsDeleteFile(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsCreateDirectory(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsDeleteDirectory(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsDeleteDirectoryRecursively(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsRenameFile(
            fs: *mut root::FsFileSystem,
            cur_path: *const libc::c_char,
            new_path: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsRenameDirectory(
            fs: *mut root::FsFileSystem,
            cur_path: *const libc::c_char,
            new_path: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsGetEntryType(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
            out: *mut root::FsEntryType,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsOpenFile(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
            flags: libc::c_int,
            out: *mut root::FsFile,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsOpenDirectory(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
            flags: libc::c_int,
            out: *mut root::FsDir,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsCommit(fs: *mut root::FsFileSystem) -> root::Result;
    }
    extern "C" {
        pub fn fsFsGetFreeSpace(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
            out: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsGetTotalSpace(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
            out: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFsGetFileTimeStampRaw(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
            out: *mut root::FsTimeStampRaw,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " 3.0.0+"]
        pub fn fsFsCleanDirectoryRecursively(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " 3.0.0+"]
        pub fn fsFsQueryEntry(
            fs: *mut root::FsFileSystem,
            out: *mut libc::c_void,
            out_size: root::size_t,
            in_: *const libc::c_void,
            in_size: root::size_t,
            path: *const libc::c_char,
            query_type: root::FsFileSystemQueryType,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " 4.0.0+"]
        pub fn fsFsClose(fs: *mut root::FsFileSystem);
    }
    extern "C" {
        #[doc = " Uses \\ref fsFsQueryEntry to set the archive bit on the specified absolute directory path."]
        #[doc = " This will cause HOS to treat the directory as if it were a file containing the directory's concatenated contents."]
        pub fn fsFsSetArchiveBit(
            fs: *mut root::FsFileSystem,
            path: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFileRead(
            f: *mut root::FsFile,
            off: u64,
            buf: *mut libc::c_void,
            len: root::size_t,
            option: u32,
            out: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFileWrite(
            f: *mut root::FsFile,
            off: u64,
            buf: *const libc::c_void,
            len: root::size_t,
            option: u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsFileFlush(f: *mut root::FsFile) -> root::Result;
    }
    extern "C" {
        pub fn fsFileSetSize(f: *mut root::FsFile, sz: u64) -> root::Result;
    }
    extern "C" {
        pub fn fsFileGetSize(f: *mut root::FsFile, out: *mut u64) -> root::Result;
    }
    extern "C" {
        pub fn fsFileOperateRange(
            f: *mut root::FsFile,
            op_id: root::FsOperationId,
            off: u64,
            len: root::size_t,
            out: *mut root::FsRangeInfo,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " 4.0.0+"]
        pub fn fsFileClose(f: *mut root::FsFile);
    }
    extern "C" {
        pub fn fsDirRead(
            d: *mut root::FsDir,
            inval: u64,
            total_entries: *mut root::size_t,
            max_entries: root::size_t,
            buf: *mut root::FsDirectoryEntry,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsDirGetEntryCount(d: *mut root::FsDir, count: *mut u64) -> root::Result;
    }
    extern "C" {
        pub fn fsDirClose(d: *mut root::FsDir);
    }
    extern "C" {
        pub fn fsStorageRead(
            s: *mut root::FsStorage,
            off: u64,
            buf: *mut libc::c_void,
            len: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsStorageWrite(
            s: *mut root::FsStorage,
            off: u64,
            buf: *const libc::c_void,
            len: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsStorageFlush(s: *mut root::FsStorage) -> root::Result;
    }
    extern "C" {
        pub fn fsStorageSetSize(s: *mut root::FsStorage, sz: u64) -> root::Result;
    }
    extern "C" {
        pub fn fsStorageGetSize(s: *mut root::FsStorage, out: *mut u64) -> root::Result;
    }
    extern "C" {
        pub fn fsStorageOperateRange(
            s: *mut root::FsStorage,
            op_id: root::FsOperationId,
            off: u64,
            len: root::size_t,
            out: *mut root::FsRangeInfo,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " 4.0.0+"]
        pub fn fsStorageClose(s: *mut root::FsStorage);
    }
    extern "C" {
        #[doc = " Read FsSaveDataInfo data into the buf array."]
        pub fn fsSaveDataIteratorRead(
            s: *mut root::FsSaveDataIterator,
            buf: *mut root::FsSaveDataInfo,
            max_entries: root::size_t,
            total_entries: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsSaveDataIteratorClose(s: *mut root::FsSaveDataIterator);
    }
    extern "C" {
        pub fn fsEventNotifierGetEventHandle(
            e: *mut root::FsEventNotifier,
            out: *mut root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsEventNotifierClose(e: *mut root::FsEventNotifier);
    }
    extern "C" {
        pub fn fsDeviceOperatorIsSdCardInserted(
            d: *mut root::FsDeviceOperator,
            out: *mut bool,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsDeviceOperatorIsGameCardInserted(
            d: *mut root::FsDeviceOperator,
            out: *mut bool,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsDeviceOperatorGetGameCardHandle(
            d: *mut root::FsDeviceOperator,
            out: *mut root::FsGameCardHandle,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsDeviceOperatorGetGameCardAttribute(
            d: *mut root::FsDeviceOperator,
            handle: *const root::FsGameCardHandle,
            out: *mut u8,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsDeviceOperatorClose(d: *mut root::FsDeviceOperator);
    }
    extern "C" {
        pub fn smManagerInitialize() -> root::Result;
    }
    extern "C" {
        pub fn smManagerExit();
    }
    extern "C" {
        pub fn smManagerGetServiceSession() -> *mut root::Service;
    }
    extern "C" {
        pub fn smManagerRegisterProcess(
            pid: u64,
            acid_sac: *const libc::c_void,
            acid_sac_size: root::size_t,
            aci0_sac: *const libc::c_void,
            aci0_sac_size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn smManagerUnregisterProcess(pid: u64) -> root::Result;
    }
    extern "C" {
        pub fn fsldrInitialize() -> root::Result;
    }
    extern "C" {
        pub fn fsldrExit();
    }
    extern "C" {
        pub fn fsldrOpenCodeFileSystem(
            tid: u64,
            path: *const libc::c_char,
            out: *mut root::FsFileSystem,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsldrIsArchivedProgram(pid: u64, out: *mut bool) -> root::Result;
    }
    extern "C" {
        pub fn fsldrSetCurrentProcess() -> root::Result;
    }
    extern "C" {
        pub fn fsprInitialize() -> root::Result;
    }
    extern "C" {
        pub fn fsprExit();
    }
    extern "C" {
        pub fn fsprRegisterProgram(
            pid: u64,
            titleID: u64,
            storageID: root::FsStorageId,
            fs_access_header: *const libc::c_void,
            fah_size: root::size_t,
            fs_access_control: *const libc::c_void,
            fac_size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn fsprUnregisterProgram(pid: u64) -> root::Result;
    }
    extern "C" {
        pub fn fsprSetCurrentProcess() -> root::Result;
    }
    extern "C" {
        pub fn fsprSetEnabledProgramVerification(enabled: bool) -> root::Result;
    }
    #[repr(C)]
    pub struct AccountProfile {
        pub s: root::Service,
    }
    #[repr(C, packed)]
    pub struct AccountUserData {
        pub unk_x0: u32,
        #[doc = "< Icon ID. 0 = Mii, the rest are character icon IDs."]
        pub iconID: u32,
        #[doc = "< Profile icon background color ID"]
        pub iconBackgroundColorID: u8,
        pub unk_x9: [u8; 7usize],
        #[doc = "< Some ID related to the Mii? All zeros when a character icon is used."]
        pub miiID: [u8; 16usize],
        #[doc = "< Usually zeros?"]
        pub unk_x20: [u8; 96usize],
    }
    #[repr(C, packed)]
    pub struct AccountProfileBase {
        pub userID: u128,
        #[doc = "< POSIX UTC timestamp, for the last account edit."]
        pub lastEditTimestamp: u64,
        #[doc = "< UTF-8 Username."]
        pub username: [libc::c_char; 32usize],
    }
    extern "C" {
        pub fn accountInitialize() -> root::Result;
    }
    extern "C" {
        pub fn accountExit();
    }
    extern "C" {
        pub fn accountGetService() -> *mut root::Service;
    }
    extern "C" {
        #[doc = " Get the total number of user profiles"]
        pub fn accountGetUserCount(user_count: *mut root::s32) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Get a list of all user IDs. The returned list will never be larger than ACC_USER_LIST_SIZE."]
        #[doc = " @param userIDs Pointer to array of user IDs."]
        #[doc = " @param max_userIDs Maximum number of user IDs to return."]
        #[doc = " @param actual_total The actual total number of user IDs found."]
        pub fn accountListAllUsers(
            userIDs: *mut u128,
            max_userIDs: root::size_t,
            actual_total: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Get the userID for the currently active user. The output userID is only valid when the output account_selected==1, otherwise no user is currently selected."]
        #[doc = " An user is only selected when the user-account selection applet was used to select an user at least once before."]
        pub fn accountGetActiveUser(
            userID: *mut u128,
            account_selected: *mut bool,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Get an AccountProfile for the specified userID."]
        pub fn accountGetProfile(
            out: *mut root::AccountProfile,
            userID: u128,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Get \\ref AccountUserData and \\ref AccountProfileBase for the specified profile, userdata is optional (can be NULL)."]
        pub fn accountProfileGet(
            profile: *mut root::AccountProfile,
            userdata: *mut root::AccountUserData,
            profilebase: *mut root::AccountProfileBase,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Get the icon image size."]
        pub fn accountProfileGetImageSize(
            profile: *mut root::AccountProfile,
            image_size: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Load the JPEG profile icon, valid for both Miis and character icons. The output image_size is the same as the one from \\ref accountProfileGetImageSize."]
        pub fn accountProfileLoadImage(
            profile: *mut root::AccountProfile,
            buf: *mut libc::c_void,
            len: root::size_t,
            image_size: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn accountProfileClose(profile: *mut root::AccountProfile);
    }
    extern "C" {
        #[doc = " Gets the userID which was selected by the profile-selector applet (if any), prior to launching the currently running Application title. This can only be used once under the current process, under an Application title."]
        pub fn accountGetPreselectedUser(userID: *mut u128) -> root::Result;
    }
    #[doc = "< Default, use normal PerformanceConfiguration."]
    pub const ApmCpuBoostMode_ApmCpuBoostMode_Disabled: root::ApmCpuBoostMode = 0;
    #[doc = "< Use performance configurations 0x92220009 (Docked) and 0x9222000A (Handheld), or 0x9222000B and 0x9222000C. All of these use the normal GPU clock rate for Docked-mode. The latter pair uses the normal CPU clock rate, while the former pair uses the maximum TX1 CPU clock rate. Memory clock rate is the same as normal."]
    pub const ApmCpuBoostMode_ApmCpuBoostMode_Type1: root::ApmCpuBoostMode = 1;
    #[doc = "< Use performance configurations 0x9222000B and 0x9222000C."]
    pub const ApmCpuBoostMode_ApmCpuBoostMode_Type2: root::ApmCpuBoostMode = 2;
    #[doc = " CpuBoostMode. With \\ref appletSetCpuBoostMode, only values 0/1 are available. This allows using higher clock rates."]
    pub type ApmCpuBoostMode = u32;
    extern "C" {
        pub fn apmInitialize() -> root::Result;
    }
    extern "C" {
        pub fn apmExit();
    }
    extern "C" {
        pub fn apmSetPerformanceConfiguration(
            PerformanceMode: u32,
            PerformanceConfiguration: u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn apmGetPerformanceConfiguration(
            PerformanceMode: u32,
            PerformanceConfiguration: *mut u32,
        ) -> root::Result;
    }
    pub const AppletType_AppletType_None: root::AppletType = -2;
    pub const AppletType_AppletType_Default: root::AppletType = -1;
    pub const AppletType_AppletType_Application: root::AppletType = 0;
    pub const AppletType_AppletType_SystemApplet: root::AppletType = 1;
    pub const AppletType_AppletType_LibraryApplet: root::AppletType = 2;
    pub const AppletType_AppletType_OverlayApplet: root::AppletType = 3;
    pub const AppletType_AppletType_SystemApplication: root::AppletType = 4;
    pub type AppletType = i32;
    pub const AppletOperationMode_AppletOperationMode_Handheld: root::AppletOperationMode = 0;
    pub const AppletOperationMode_AppletOperationMode_Docked: root::AppletOperationMode = 1;
    pub type AppletOperationMode = u32;
    #[doc = "< FocusState changed."]
    pub const AppletHookType_AppletHookType_OnFocusState: root::AppletHookType = 0;
    #[doc = "< OperationMode changed."]
    pub const AppletHookType_AppletHookType_OnOperationMode: root::AppletHookType = 1;
    #[doc = "< PerformanceMode changed."]
    pub const AppletHookType_AppletHookType_OnPerformanceMode: root::AppletHookType = 2;
    #[doc = "< Exit requested."]
    pub const AppletHookType_AppletHookType_OnExitRequest: root::AppletHookType = 3;
    #[doc = "< Number of applet hook types."]
    pub const AppletHookType_AppletHookType_Max: root::AppletHookType = 4;
    #[doc = " applet hook types."]
    pub type AppletHookType = u32;
    #[doc = "< Applet is focused."]
    pub const AppletFocusState_AppletFocusState_Focused: root::AppletFocusState = 1;
    #[doc = "< Out of focus - LibraryApplet open."]
    pub const AppletFocusState_AppletFocusState_NotFocusedLibraryApplet: root::AppletFocusState = 2;
    #[doc = "< Out of focus - HOME menu open / console is sleeping."]
    pub const AppletFocusState_AppletFocusState_NotFocusedHomeSleep: root::AppletFocusState = 3;
    pub type AppletFocusState = u32;
    #[doc = "< Suspend only when HOME menu is open / console is sleeping (default)."]
    pub const AppletFocusHandlingMode_AppletFocusHandlingMode_SuspendHomeSleep:
        root::AppletFocusHandlingMode = 0;
    #[doc = "< Don't suspend when out of focus."]
    pub const AppletFocusHandlingMode_AppletFocusHandlingMode_NoSuspend:
        root::AppletFocusHandlingMode = 1;
    #[doc = "< Suspend only when HOME menu is open / console is sleeping but still receive OnFocusState hook."]
    pub const AppletFocusHandlingMode_AppletFocusHandlingMode_SuspendHomeSleepNotify:
        root::AppletFocusHandlingMode = 2;
    #[doc = "< Always suspend when out of focus, regardless of the reason."]
    pub const AppletFocusHandlingMode_AppletFocusHandlingMode_AlwaysSuspend:
        root::AppletFocusHandlingMode = 3;
    #[doc = "< Number of focus handling modes."]
    pub const AppletFocusHandlingMode_AppletFocusHandlingMode_Max: root::AppletFocusHandlingMode =
        4;
    pub type AppletFocusHandlingMode = u32;
    #[doc = "< Application-specific LaunchParameter"]
    pub const AppletLaunchParameterKind_AppletLaunchParameterKind_Application:
        root::AppletLaunchParameterKind = 1;
    #[doc = "< account PreselectedUser"]
    pub const AppletLaunchParameterKind_AppletLaunchParameterKind_PreselectedUser:
        root::AppletLaunchParameterKind = 2;
    #[doc = "< Unknown if used by anything?"]
    pub const AppletLaunchParameterKind_AppletLaunchParameterKind_Unknown:
        root::AppletLaunchParameterKind = 3;
    pub type AppletLaunchParameterKind = u32;
    #[doc = "< 010000000000100C \"overlayDisp\""]
    pub const AppletId_AppletId_overlayDisp: root::AppletId = 2;
    #[doc = "< 0100000000001000 \"qlaunch\" (SystemAppletMenu)"]
    pub const AppletId_AppletId_qlaunch: root::AppletId = 3;
    #[doc = "< 0100000000001012 \"starter\""]
    pub const AppletId_AppletId_starter: root::AppletId = 4;
    #[doc = "< 0100000000001001 \"auth\""]
    pub const AppletId_AppletId_auth: root::AppletId = 10;
    #[doc = "< 0100000000001002 \"cabinet\""]
    pub const AppletId_AppletId_cabinet: root::AppletId = 11;
    #[doc = "< 0100000000001003 \"controller\""]
    pub const AppletId_AppletId_controller: root::AppletId = 12;
    #[doc = "< 0100000000001004 \"dataErase\""]
    pub const AppletId_AppletId_dataErase: root::AppletId = 13;
    #[doc = "< 0100000000001005 \"error\""]
    pub const AppletId_AppletId_error: root::AppletId = 14;
    #[doc = "< 0100000000001006 \"netConnect\""]
    pub const AppletId_AppletId_netConnect: root::AppletId = 15;
    #[doc = "< 0100000000001007 \"playerSelect\""]
    pub const AppletId_AppletId_playerSelect: root::AppletId = 16;
    #[doc = "< 0100000000001008 \"swkbd\""]
    pub const AppletId_AppletId_swkbd: root::AppletId = 17;
    #[doc = "< 0100000000001009 \"miiEdit\""]
    pub const AppletId_AppletId_miiEdit: root::AppletId = 18;
    #[doc = "< 010000000000100A \"LibAppletWeb\" WebApplet applet"]
    pub const AppletId_AppletId_web: root::AppletId = 19;
    #[doc = "< 010000000000100B \"LibAppletShop\" ShopN applet"]
    pub const AppletId_AppletId_shop: root::AppletId = 20;
    #[doc = "< 010000000000100D \"photoViewer\""]
    pub const AppletId_AppletId_photoViewer: root::AppletId = 21;
    #[doc = "< 010000000000100E \"set\" (This title is currently not present on retail devices.)"]
    pub const AppletId_AppletId_set: root::AppletId = 22;
    #[doc = "< 010000000000100F \"LibAppletOff\" Offline web-applet"]
    pub const AppletId_AppletId_offlineWeb: root::AppletId = 23;
    #[doc = "< 0100000000001010 \"LibAppletLns\" Whitelisted web-applet"]
    pub const AppletId_AppletId_loginShare: root::AppletId = 24;
    #[doc = "< 0100000000001011 \"LibAppletAuth\" WifiWebAuth applet"]
    pub const AppletId_AppletId_wifiWebAuth: root::AppletId = 25;
    #[doc = "< 0100000000001013 \"myPage\""]
    pub const AppletId_AppletId_myPage: root::AppletId = 26;
    pub type AppletId = u32;
    #[doc = "< Foreground"]
    pub const LibAppletMode_LibAppletMode_AllForeground: root::LibAppletMode = 0;
    #[doc = "< Background"]
    pub const LibAppletMode_LibAppletMode_Background: root::LibAppletMode = 1;
    #[doc = "< Unknown"]
    pub const LibAppletMode_LibAppletMode_Unknown2: root::LibAppletMode = 2;
    #[doc = "< Unknown"]
    pub const LibAppletMode_LibAppletMode_Unknown3: root::LibAppletMode = 3;
    #[doc = " LibraryAppletMode"]
    pub type LibAppletMode = u32;
    pub const LibAppletExitReason_LibAppletExitReason_Normal: root::LibAppletExitReason = 0;
    pub const LibAppletExitReason_LibAppletExitReason_Canceled: root::LibAppletExitReason = 1;
    pub const LibAppletExitReason_LibAppletExitReason_Abnormal: root::LibAppletExitReason = 2;
    pub const LibAppletExitReason_LibAppletExitReason_Unexpected: root::LibAppletExitReason = 10;
    #[doc = " LibraryAppletExitReason"]
    pub type LibAppletExitReason = u32;
    pub const AppletThemeColorType_AppletThemeColorType_Default: root::AppletThemeColorType = 0;
    pub const AppletThemeColorType_AppletThemeColorType_Unknown1: root::AppletThemeColorType = 1;
    pub const AppletThemeColorType_AppletThemeColorType_Unknown2: root::AppletThemeColorType = 2;
    pub const AppletThemeColorType_AppletThemeColorType_Unknown3: root::AppletThemeColorType = 3;
    #[doc = " ThemeColorType"]
    pub type AppletThemeColorType = u32;
    #[doc = " applet hook function."]
    pub type AppletHookFn = ::core::option::Option<
        unsafe extern "C" fn(hook: root::AppletHookType, param: *mut libc::c_void),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct AppletHookCookie {
        #[doc = "< Next cookie."]
        pub next: *mut root::AppletHookCookie,
        #[doc = "< Hook callback."]
        pub callback: root::AppletHookFn,
        #[doc = "< Callback parameter."]
        pub param: *mut libc::c_void,
    }
    #[doc = " applet IStorage"]
    #[repr(C)]
    pub struct AppletStorage {
        pub s: root::Service,
        pub tmem: root::TransferMemory,
    }
    #[doc = " LibraryApplet state."]
    #[repr(C)]
    pub struct AppletHolder {
        #[doc = "< ILibraryAppletAccessor"]
        pub s: root::Service,
        #[doc = "< Output from GetAppletStateChangedEvent, autoclear=false."]
        pub StateChangedEvent: root::Event,
        #[doc = "< Output from GetPopInteractiveOutDataEvent, autoclear=false."]
        pub PopInteractiveOutDataEvent: root::Event,
        #[doc = "< See ref \\ref LibAppletMode."]
        pub mode: root::LibAppletMode,
        #[doc = "< Output from GetIndirectLayerConsumerHandle on 2.0.0+."]
        pub layer_handle: u64,
        #[doc = "< When set, indicates that the LibraryApplet title is creating itself."]
        pub creating_self: bool,
        #[doc = "< Set by \\ref appletHolderJoin using the output from cmd GetResult, see \\ref LibAppletExitReason."]
        pub exitreason: root::LibAppletExitReason,
    }
    #[doc = " 'pdm' ApplicationPlayStatistics"]
    #[repr(C)]
    pub struct AppletApplicationPlayStatistics {
        pub unk_x0: [u8; 8usize],
    }
    #[doc = " Attributes for launching applications for Quest."]
    #[repr(C)]
    pub struct AppletApplicationAttributeForQuest {
        pub unk_x0: u32,
        pub unk_x4: u32,
    }
    extern "C" {
        #[doc = " Initialize applet, called automatically during app startup."]
        pub fn appletInitialize() -> root::Result;
    }
    extern "C" {
        #[doc = " Exit applet, called automatically during app startup."]
        pub fn appletExit();
    }
    extern "C" {
        pub fn appletGetAppletResourceUserId(out: *mut u64) -> root::Result;
    }
    extern "C" {
        pub fn appletGetAppletType() -> root::AppletType;
    }
    extern "C" {
        pub fn appletNotifyRunning(out: *mut u8);
    }
    extern "C" {
        pub fn appletCreateManagedDisplayLayer(out: *mut u64) -> root::Result;
    }
    extern "C" {
        #[doc = " Sets the state field for \\ref AppletThemeColorType."]
        pub fn appletSetThemeColorType(theme: root::AppletThemeColorType);
    }
    extern "C" {
        #[doc = " Gets the state field for \\ref AppletThemeColorType. Used internally by \\ref libappletArgsCreate."]
        pub fn appletGetThemeColorType() -> root::AppletThemeColorType;
    }
    extern "C" {
        #[doc = " @brief Pops a LaunchParameter AppletStorage, the storage will be removed from sysmodule state during this."]
        #[doc = " @param s Output storage."]
        #[doc = " @param kind See \\ref AppletLaunchParameterKind."]
        #[doc = " @note Can only be used in Applications."]
        #[doc = " @note See also acc.h \\ref accountGetPreselectedUser (wrapper for appletPopLaunchParameter etc)."]
        pub fn appletPopLaunchParameter(
            s: *mut root::AppletStorage,
            kind: root::AppletLaunchParameterKind,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Requests to launch the specified application."]
        #[doc = " @note Only available with AppletType_*Application, or AppletType_LibraryApplet on 5.0.0+."]
        #[doc = " @param[in] titleID Application titleID. Value 0 can be used to relaunch the current application."]
        #[doc = " @param s Optional AppletStorage object, can be NULL. This is automatically closed. When NULL on pre-4.0.0 (or with AppletType_LibraryApplet), this will internally create a tmp storage with size 0 for use with the cmd. This is the storage available to the launched application via \\ref appletPopLaunchParameter with ::AppletLaunchParameterKind_Application."]
        pub fn appletRequestLaunchApplication(
            titleID: u64,
            s: *mut root::AppletStorage,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Requests to launch the specified application, for kiosk systems."]
        #[doc = " @note Only available with AppletType_*Application on 3.0.0+."]
        #[doc = " @param[in] titleID Application titleID"]
        #[doc = " @param s Optional AppletStorage object, can be NULL. This is automatically closed. When NULL on pre-4.0.0, this will internally create a tmp storage with size 0 for use with the cmd. This is the storage available to the launched application via \\ref appletPopLaunchParameter with ::AppletLaunchParameterKind_Application."]
        #[doc = " @param[in] attr Kiosk application attributes."]
        pub fn appletRequestLaunchApplicationForQuest(
            titleID: u64,
            s: *mut root::AppletStorage,
            attr: *const root::AppletApplicationAttributeForQuest,
        ) -> root::Result;
    }
    extern "C" {
        pub fn appletGetDesiredLanguage(LanguageCode: *mut u64) -> root::Result;
    }
    extern "C" {
        #[doc = " Only available with AppletType_*Application."]
        pub fn appletSetTerminateResult(res: root::Result) -> root::Result;
    }
    extern "C" {
        #[doc = " Set media playback state."]
        #[doc = " If state is set to true, screen dimming and auto sleep is disabled."]
        #[doc = " For *Application, this uses cmd SetMediaPlaybackStateForApplication, otherwise cmd SetMediaPlaybackState is used."]
        pub fn appletSetMediaPlaybackState(state: bool) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets whether video recording is supported."]
        #[doc = " See also \\ref appletInitializeGamePlayRecording."]
        pub fn appletIsGamePlayRecordingSupported(flag: *mut bool) -> root::Result;
    }
    extern "C" {
        #[doc = " Disable/enable video recording. Only available after \\ref appletInitializeGamePlayRecording was used."]
        #[doc = " See also \\ref appletInitializeGamePlayRecording."]
        pub fn appletSetGamePlayRecordingState(state: bool) -> root::Result;
    }
    extern "C" {
        #[doc = " Initializes video recording. This allocates a 0x6000000-byte buffer for the TransferMemory, cleanup is handled automatically during app exit in \\ref appletExit."]
        #[doc = " Only available with AppletType_Application on 3.0.0+, hence errors from this can be ignored."]
        #[doc = " Video recording is only fully available system-side with 4.0.0+."]
        #[doc = " Only usable when running under a title which supports video recording."]
        pub fn appletInitializeGamePlayRecording() -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Blocks the usage of the home button."]
        #[doc = " @param val Unknown nanoseconds. Value 0 can be used."]
        #[doc = " @note Can only be used in regularapps."]
        pub fn appletBeginBlockingHomeButton(val: root::s64) -> root::Result;
    }
    extern "C" {
        pub fn appletEndBlockingHomeButton() -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets ApplicationPlayStatistics."]
        #[doc = " @note Only available with AppletType_*Application on 5.0.0+."]
        #[doc = " @note This may return no output in some cases."]
        #[doc = " @param stats Output \\ref AppletApplicationPlayStatistics array."]
        #[doc = " @param titleIDs Input titleIDs array."]
        #[doc = " @param count Total entries in the input/output arrays."]
        #[doc = " @param out Output s32."]
        pub fn appletQueryApplicationPlayStatistics(
            stats: *mut root::AppletApplicationPlayStatistics,
            titleIDs: *const u64,
            count: root::s32,
            out: *mut root::s32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Delay exiting until \\ref appletUnlockExit is called, with a 15 second timeout once exit is requested."]
        #[doc = " @note When exit is requested \\ref appletMainLoop will return false, hence any main-loop using appletMainLoop will exit. This allows the app to handle cleanup post-main-loop instead of being force-terminated."]
        #[doc = " @note If the above timeout occurs after exit was requested where \\ref appletUnlockExit was not called, the process will be forced-terminated."]
        #[doc = " @note \\ref appletUnlockExit must be used before main() returns."]
        pub fn appletLockExit() -> root::Result;
    }
    extern "C" {
        #[doc = " Unlocks exiting, see \\ref appletLockExit."]
        pub fn appletUnlockExit() -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Controls whether screenshot-capture is allowed."]
        #[doc = " @param val 0 = disable, 1 = enable."]
        pub fn appletSetScreenShotPermission(val: root::s32) -> root::Result;
    }
    extern "C" {
        pub fn appletSetScreenShotImageOrientation(val: root::s32) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the current Illuminance from the light sensor."]
        #[doc = " @note Only available with [3.0.0+]."]
        #[doc = " @param fLux Output fLux"]
        pub fn appletGetCurrentIlluminance(fLux: *mut f32) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the current Illuminance from the light sensor. Same as \\ref appletGetCurrentIlluminance except for the additional param."]
        #[doc = " @note Only available with [5.0.0+]."]
        #[doc = " @param bOverLimit Output bOverLimit"]
        #[doc = " @param fLux Output fLux"]
        pub fn appletGetCurrentIlluminanceEx(bOverLimit: *mut bool, fLux: *mut f32)
            -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets whether Illuminance is available."]
        #[doc = " @note Only available with [3.0.0+]."]
        #[doc = " @param out Output flag"]
        pub fn appletIsIlluminanceAvailable(out: *mut bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Stops forwarding the input to the foreground app, works only in the Overlay applet context."]
        #[doc = " @note You have to call this to receive inputs through the hid service when running as the overlay applet."]
        pub fn appletBeginToWatchShortHomeButtonMessage() -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Forwards input to the foreground app, works only in the Overlay applet context."]
        #[doc = " @note After calling this the overlay applet won't receive any input until \\ref appletBeginToWatchShortHomeButtonMessage is called again."]
        pub fn appletEndToWatchShortHomeButtonMessage() -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Get an event that fires when the home button is pressed, doesn't interfere with home menu. This event does not auto clear."]
        #[doc = " @note Doesn't fire for long press."]
        pub fn appletHomeButtonReaderLockAccessorGetEvent(
            out_event: *mut root::Event,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Pushes a storage to the general channel. Used for sending requests to qlaunch."]
        #[doc = " @note  This is not usable under an Application, however it is usable under a LibraryApplet."]
        #[doc = " @note  This uses \\ref appletStorageClose automatically."]
        #[doc = " @param s Storage object."]
        pub fn appletPushToGeneralChannel(s: *mut root::AppletStorage) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets whether VrMode is enabled."]
        #[doc = " @note Only available with [3.0.0+]."]
        #[doc = " @param out Output flag"]
        pub fn appletIsVrModeEnabled(out: *mut bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets whether VrMode is enabled."]
        #[doc = " @note This is only fully usable system-side with [6.0.0+]."]
        #[doc = " @note For checking Parental Controls, see \\ref pctlIsStereoVisionPermitted."]
        #[doc = " @note On pre-7.0.0 this uses cmd SetVrModeEnabled internally, while on [7.0.0+] this uses cmds BeginVrModeEx/EndVrModeEx."]
        #[doc = " @param flag Flag"]
        pub fn appletSetVrModeEnabled(flag: bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the \\ref ApmCpuBoostMode."]
        #[doc = " @note Only available with [7.0.0+] (not fully usable system-side with 6.x)."]
        #[doc = " @param mode \\ref ApmCpuBoostMode."]
        pub fn appletSetCpuBoostMode(mode: root::ApmCpuBoostMode) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the current PerformanceConfiguration."]
        #[doc = " @note Only available with [7.0.0+]."]
        #[doc = " @param PerformanceConfiguration Output PerformanceConfiguration."]
        pub fn appletGetCurrentPerformanceConfiguration(
            PerformanceConfiguration: *mut u32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a LibraryApplet."]
        #[doc = " @param h AppletHolder object."]
        #[doc = " @param id See \\ref AppletId."]
        #[doc = " @param mode See \\ref LibAppletMode."]
        pub fn appletCreateLibraryApplet(
            h: *mut root::AppletHolder,
            id: root::AppletId,
            mode: root::LibAppletMode,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a LibraryApplet. This is for when a LibraryApplet title creates itself."]
        #[doc = " @note  Identical to \\ref appletCreateLibraryApplet except this sets the creating_self flag to true."]
        #[doc = " @param h AppletHolder object."]
        #[doc = " @param id See \\ref AppletId."]
        #[doc = " @param mode See \\ref LibAppletMode."]
        pub fn appletCreateLibraryAppletSelf(
            h: *mut root::AppletHolder,
            id: root::AppletId,
            mode: root::LibAppletMode,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Closes an AppletHolder object."]
        pub fn appletHolderClose(h: *mut root::AppletHolder);
    }
    extern "C" {
        #[doc = " Returns whether the AppletHolder object was initialized."]
        pub fn appletHolderActive(h: *mut root::AppletHolder) -> bool;
    }
    extern "C" {
        #[doc = " @brief Gets the IndirectLayerConsumerHandle loaded during \\ref appletCreateLibraryApplet, on 2.0.0+."]
        #[doc = " @note  Only available when \\ref LibAppletMode is ::LibAppletMode_Unknown3."]
        #[doc = " @param h AppletHolder object."]
        #[doc = " @param out Output IndirectLayerConsumerHandle."]
        pub fn appletHolderGetIndirectLayerConsumerHandle(
            h: *mut root::AppletHolder,
            out: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Starts the LibraryApplet."]
        #[doc = " @param h AppletHolder object."]
        pub fn appletHolderStart(h: *mut root::AppletHolder) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Requests the LibraryApplet to exit. The command is only used if \\ref appletHolderCheckFinished returns false."]
        #[doc = " @param h AppletHolder object."]
        pub fn appletHolderRequestExit(h: *mut root::AppletHolder) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Waits for the LibraryApplet to exit."]
        #[doc = " @param h AppletHolder object."]
        pub fn appletHolderJoin(h: *mut root::AppletHolder);
    }
    extern "C" {
        #[doc = " @brief Waits on the LibraryApplet StateChangedEvent with timeout=0, and returns whether it was successful."]
        #[doc = " @param h AppletHolder object."]
        pub fn appletHolderCheckFinished(h: *mut root::AppletHolder) -> bool;
    }
    extern "C" {
        #[doc = " @brief Gets the \\ref LibAppletExitReason set by \\ref appletHolderJoin."]
        #[doc = " @param h AppletHolder object."]
        pub fn appletHolderGetExitReason(h: *mut root::AppletHolder) -> root::LibAppletExitReason;
    }
    extern "C" {
        #[doc = " @brief Waits for the PopInteractiveOutDataEvent and StateChangedEvent."]
        #[doc = " @return false for error / when StateChangedEvent was signaled, and true when PopInteractiveOutDataEvent was signaled."]
        #[doc = " @param h AppletHolder object."]
        pub fn appletHolderWaitInteractiveOut(h: *mut root::AppletHolder) -> bool;
    }
    extern "C" {
        #[doc = " @brief Pushes a storage for LibraryApplet input."]
        #[doc = " @note  This uses \\ref appletStorageClose automatically."]
        #[doc = " @param h AppletHolder object."]
        #[doc = " @param s Storage object."]
        pub fn appletHolderPushInData(
            h: *mut root::AppletHolder,
            s: *mut root::AppletStorage,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Pops a storage from LibraryApplet output."]
        #[doc = " @param h AppletHolder object."]
        #[doc = " @param s Storage object."]
        pub fn appletHolderPopOutData(
            h: *mut root::AppletHolder,
            s: *mut root::AppletStorage,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Pushes a storage for LibraryApplet Extra storage input."]
        #[doc = " @note  This uses \\ref appletStorageClose automatically."]
        #[doc = " @param h AppletHolder object."]
        #[doc = " @param s Storage object."]
        pub fn appletHolderPushExtraStorage(
            h: *mut root::AppletHolder,
            s: *mut root::AppletStorage,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Pushes a storage for LibraryApplet Interactive input."]
        #[doc = " @note  This uses \\ref appletStorageClose automatically."]
        #[doc = " @param h AppletHolder object."]
        #[doc = " @param s Storage object."]
        pub fn appletHolderPushInteractiveInData(
            h: *mut root::AppletHolder,
            s: *mut root::AppletStorage,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Pops a storage from LibraryApplet Interactive output."]
        #[doc = " @param h AppletHolder object."]
        #[doc = " @param s Storage object."]
        pub fn appletHolderPopInteractiveOutData(
            h: *mut root::AppletHolder,
            s: *mut root::AppletStorage,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a storage."]
        #[doc = " @param s Storage object."]
        #[doc = " @param size Size of storage."]
        pub fn appletCreateStorage(s: *mut root::AppletStorage, size: root::s64) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a TransferMemory storage."]
        #[doc = " @param s Storage object."]
        #[doc = " @param buffer TransferMemory buffer, will be automatically allocated if NULL."]
        #[doc = " @param size Size of storage."]
        #[doc = " @param writable Controls whether writing to the storage is allowed with \\ref appletStorageWrite."]
        pub fn appletCreateTransferMemoryStorage(
            s: *mut root::AppletStorage,
            buffer: *mut libc::c_void,
            size: root::s64,
            writable: bool,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a HandleStorage. Only available on 2.0.0+."]
        #[doc = " @param s Storage object."]
        #[doc = " @param inval Arbitrary input value."]
        #[doc = " @param handle Arbitrary input handle."]
        pub fn appletCreateHandleStorage(
            s: *mut root::AppletStorage,
            inval: root::s64,
            handle: root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a HandleStorage using TransferMemory. Wrapper for \\ref appletCreateHandleStorage."]
        #[doc = " @param s Storage object."]
        #[doc = " @param buffer TransferMemory buffer, will be automatically allocated if NULL."]
        #[doc = " @param size Size of storage."]
        pub fn appletCreateHandleStorageTmem(
            s: *mut root::AppletStorage,
            buffer: *mut libc::c_void,
            size: root::s64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Closes the storage object. TransferMemory closing is seperate, see \\ref appletStorageCloseTmem."]
        #[doc = " Other applet functions which push an input storage will automatically call this."]
        pub fn appletStorageClose(s: *mut root::AppletStorage);
    }
    extern "C" {
        #[doc = " Closes the TransferMemory in the storage object. For TransferMemory storage created by the current process, this must be called after the LibraryApplet finishes using it (if sent to one)."]
        pub fn appletStorageCloseTmem(s: *mut root::AppletStorage);
    }
    extern "C" {
        #[doc = " Gets the size of the storage. This is not usable with HandleStorage, use \\ref appletStorageGetHandle or \\ref appletStorageMap instead for that."]
        pub fn appletStorageGetSize(
            s: *mut root::AppletStorage,
            size: *mut root::s64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Writes to a storage. offset(+size) must be within the actual storage size."]
        #[doc = " @note  This is not usable with HandleStorage."]
        #[doc = " @param s Storage object."]
        #[doc = " @param offset Offset in storage."]
        #[doc = " @param buffer Input data."]
        #[doc = " @param size Data size."]
        pub fn appletStorageWrite(
            s: *mut root::AppletStorage,
            offset: root::s64,
            buffer: *const libc::c_void,
            size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Reads from a storage. offset(+size) must be within the actual storage size."]
        #[doc = " @note  This is not usable with HandleStorage."]
        #[doc = " @param s Storage object."]
        #[doc = " @param offset Offset in storage."]
        #[doc = " @param buffer Input data."]
        #[doc = " @param size Data size."]
        pub fn appletStorageRead(
            s: *mut root::AppletStorage,
            offset: root::s64,
            buffer: *mut libc::c_void,
            size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets data for a HandleStorage originally from \\ref appletCreateHandleStorage input."]
        #[doc = " @note  Only available on 2.0.0+."]
        #[doc = " @param s Storage object."]
        #[doc = " @param out Output value."]
        #[doc = " @param handle Output handle."]
        pub fn appletStorageGetHandle(
            s: *mut root::AppletStorage,
            out: *mut root::s64,
            handle: *mut root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Maps TransferMemory for a HandleStorage. Wrapper for \\ref appletCreateHandleStorage."]
        #[doc = " @note  The TransferMemory can be unmapped with \\ref appletStorageCloseTmem."]
        #[doc = " @note  Do not use this if the AppletStorage already contains initialized TransferMemory state."]
        #[doc = " @param s Storage object."]
        #[doc = " @param addr Output mapped address (optional)."]
        #[doc = " @param size Output size (optional)."]
        pub fn appletStorageMap(
            s: *mut root::AppletStorage,
            addr: *mut *mut libc::c_void,
            size: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets a notification message."]
        pub fn appletGetMessage(msg: *mut u32) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Processes the current applet status using the specified msg."]
        #[doc = " @param msg Notification message, normally from \\ref appletGetMessage."]
        #[doc = " @return Whether the application should continue running."]
        pub fn appletProcessMessage(msg: u32) -> bool;
    }
    extern "C" {
        #[doc = " @brief Processes the current applet status. Generally used within a main loop."]
        #[doc = " @note Uses \\ref appletGetMessage and \\ref appletProcessMessage internally."]
        #[doc = " @return Whether the application should continue running."]
        pub fn appletMainLoop() -> bool;
    }
    extern "C" {
        #[doc = " @brief Sets up an applet status hook."]
        #[doc = " @param cookie Hook cookie to use."]
        #[doc = " @param callback Function to call when applet's status changes."]
        #[doc = " @param param User-defined parameter to pass to the callback."]
        pub fn appletHook(
            cookie: *mut root::AppletHookCookie,
            callback: root::AppletHookFn,
            param: *mut libc::c_void,
        );
    }
    extern "C" {
        #[doc = " @brief Removes an applet status hook."]
        #[doc = " @param cookie Hook cookie to remove."]
        pub fn appletUnhook(cookie: *mut root::AppletHookCookie);
    }
    extern "C" {
        #[doc = " These return state which is updated by appletMainLoop() when notifications are received."]
        pub fn appletGetOperationMode() -> u8;
    }
    extern "C" {
        pub fn appletGetPerformanceMode() -> u32;
    }
    extern "C" {
        pub fn appletGetFocusState() -> root::AppletFocusState;
    }
    extern "C" {
        pub fn appletSetFocusHandlingMode(mode: root::AppletFocusHandlingMode) -> root::Result;
    }
    extern "C" {
        pub fn lblInitialize() -> root::Result;
    }
    extern "C" {
        pub fn lblExit();
    }
    extern "C" {
        pub fn lblSwitchBacklightOn(fade_time: u64) -> root::Result;
    }
    extern "C" {
        pub fn lblSwitchBacklightOff(fade_time: u64) -> root::Result;
    }
    extern "C" {
        #[doc = " @note The brightness goes from 0 to 1.0."]
        pub fn lblSetCurrentBrightnessSetting(brightness: f32) -> root::Result;
    }
    extern "C" {
        pub fn lblGetCurrentBrightnessSetting(out_value: *mut f32) -> root::Result;
    }
    extern "C" {
        pub fn lblEnableAutoBrightnessControl() -> root::Result;
    }
    extern "C" {
        pub fn lblDisableAutoBrightnessControl() -> root::Result;
    }
    extern "C" {
        pub fn lblIsAutoBrightnessControlEnabled(out_value: *mut bool) -> root::Result;
    }
    #[doc = "< No charger"]
    pub const ChargerType_ChargerType_None: root::ChargerType = 0;
    #[doc = "< Official charger or dock"]
    pub const ChargerType_ChargerType_Charger: root::ChargerType = 1;
    #[doc = "< Other USB-C chargers"]
    pub const ChargerType_ChargerType_Usb: root::ChargerType = 2;
    pub type ChargerType = u32;
    #[doc = "< Power state should transition to shutdown"]
    pub const PsmBatteryVoltageState_PsmBatteryVoltageState_NeedsShutdown:
        root::PsmBatteryVoltageState = 0;
    #[doc = "< Power state should transition to sleep"]
    pub const PsmBatteryVoltageState_PsmBatteryVoltageState_NeedsSleep:
        root::PsmBatteryVoltageState = 1;
    #[doc = "< Performance boost modes cannot be entered"]
    pub const PsmBatteryVoltageState_PsmBatteryVoltageState_NoPerformanceBoost:
        root::PsmBatteryVoltageState = 2;
    #[doc = "< Everything is normal"]
    pub const PsmBatteryVoltageState_PsmBatteryVoltageState_Normal: root::PsmBatteryVoltageState =
        3;
    pub type PsmBatteryVoltageState = u32;
    #[doc = " IPsmSession"]
    #[repr(C)]
    pub struct PsmSession {
        pub s: root::Service,
        #[doc = "< autoclear=false"]
        pub StateChangeEvent: root::Event,
    }
    extern "C" {
        pub fn psmInitialize() -> root::Result;
    }
    extern "C" {
        pub fn psmExit();
    }
    extern "C" {
        pub fn psmGetBatteryChargePercentage(out: *mut u32) -> root::Result;
    }
    extern "C" {
        pub fn psmGetChargerType(out: *mut root::ChargerType) -> root::Result;
    }
    extern "C" {
        pub fn psmGetBatteryVoltageState(out: *mut root::PsmBatteryVoltageState) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Wrapper func which opens a PsmSession and handles event setup."]
        #[doc = " @note Uses the actual BindStateChangeEvent cmd internally."]
        #[doc = " @note The event is not signalled on BatteryChargePercentage changes."]
        #[doc = " @param[out] s PsmSession object."]
        #[doc = " @param[in] ChargerType Passed to SetChargerTypeChangeEventEnabled."]
        #[doc = " @param[in] PowerSupply Passed to SetPowerSupplyChangeEventEnabled."]
        #[doc = " @param[in] BatteryVoltage Passed to SetBatteryVoltageStateChangeEventEnabled."]
        pub fn psmBindStateChangeEvent(
            s: *mut root::PsmSession,
            ChargerType: bool,
            PowerSupply: bool,
            BatteryVoltage: bool,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Wait on the Event setup by \\ref psmBindStateChangeEvent."]
        pub fn psmWaitStateChangeEvent(
            s: *mut root::PsmSession,
            timeout: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Cleanup version of \\ref psmBindStateChangeEvent. Must be called by the user once the PsmSession is done being used."]
        pub fn psmUnbindStateChangeEvent(s: *mut root::PsmSession) -> root::Result;
    }
    extern "C" {
        pub fn spsmInitialize() -> root::Result;
    }
    extern "C" {
        pub fn spsmExit();
    }
    extern "C" {
        pub fn spsmShutdown(reboot: bool) -> root::Result;
    }
    extern "C" {
        pub fn spsmPutErrorState() -> root::Result;
    }
    pub const FatalType_FatalType_ErrorReportAndErrorScreen: root::FatalType = 0;
    pub const FatalType_FatalType_ErrorReport: root::FatalType = 1;
    #[doc = "< Only available with 3.0.0+. If specified, FatalType_ErrorReportAndErrorScreen will be used instead on pre-3.0.0."]
    pub const FatalType_FatalType_ErrorScreen: root::FatalType = 2;
    #[doc = " Type of thrown fatal error."]
    pub type FatalType = u32;
    #[doc = " Struct for fatal Cpu context, 64-bit."]
    #[repr(C)]
    pub struct FatalAarch64Context {
        pub __bindgen_anon_1: root::FatalAarch64Context__bindgen_ty_1,
        pub pstate: u64,
        pub afsr0: u64,
        pub afsr1: u64,
        pub esr: u64,
        pub far: u64,
        pub stack_trace: [u64; 32usize],
        #[doc = "< Address of first NSO loaded (generally, process entrypoint)."]
        pub start_address: u64,
        #[doc = "< Bitmask, bit i indicates GPR i has a value."]
        pub register_set_flags: u64,
        pub stack_trace_size: u32,
    }
    #[repr(C)]
    pub struct FatalAarch64Context__bindgen_ty_1 {
        pub x: root::__BindgenUnionField<[u64; 32usize]>,
        pub __bindgen_anon_1:
            root::__BindgenUnionField<root::FatalAarch64Context__bindgen_ty_1__bindgen_ty_1>,
        pub bindgen_union_field: [u64; 33usize],
    }
    #[repr(C)]
    pub struct FatalAarch64Context__bindgen_ty_1__bindgen_ty_1 {
        pub _x: [u64; 29usize],
        pub fp: u64,
        pub lr: u64,
        pub sp: u64,
        pub pc: u64,
    }
    #[doc = " Struct for fatal Cpu context, 32-bit."]
    #[repr(C)]
    pub struct FatalAarch32Context {
        pub __bindgen_anon_1: root::FatalAarch32Context__bindgen_ty_1,
        pub pstate: u32,
        pub afsr0: u32,
        pub afsr1: u32,
        pub esr: u32,
        pub far: u32,
        pub stack_trace: [u32; 32usize],
        pub stack_trace_size: u32,
        #[doc = "< Address of first NSO loaded (generally, process entrypoint)."]
        pub start_address: u32,
        #[doc = "< Bitmask, bit i indicates GPR i has a value."]
        pub register_set_flags: u32,
    }
    #[repr(C)]
    pub struct FatalAarch32Context__bindgen_ty_1 {
        pub r: root::__BindgenUnionField<[u32; 16usize]>,
        pub __bindgen_anon_1:
            root::__BindgenUnionField<root::FatalAarch32Context__bindgen_ty_1__bindgen_ty_1>,
        pub bindgen_union_field: [u32; 16usize],
    }
    #[repr(C)]
    pub struct FatalAarch32Context__bindgen_ty_1__bindgen_ty_1 {
        pub _r: [u32; 11usize],
        pub fp: u32,
        pub ip: u32,
        pub sp: u32,
        pub lr: u32,
        pub pc: u32,
    }
    #[repr(C)]
    pub struct FatalContext {
        pub __bindgen_anon_1: root::FatalContext__bindgen_ty_1,
        pub is_aarch32: bool,
        pub type_: u32,
    }
    #[repr(C)]
    pub struct FatalContext__bindgen_ty_1 {
        pub aarch64_ctx: root::__BindgenUnionField<root::FatalAarch64Context>,
        pub aarch32_ctx: root::__BindgenUnionField<root::FatalAarch32Context>,
        pub bindgen_union_field: [u64; 73usize],
    }
    extern "C" {
        #[doc = " @brief Triggers a system fatal error."]
        #[doc = " @param[in] err Result code to throw."]
        #[doc = " @note This function does not return."]
        #[doc = " @note This uses \\ref fatalWithType with \\ref FatalType_ErrorScreen internally."]
        pub fn fatalSimple(err: root::Result);
    }
    extern "C" {
        #[doc = " @brief Triggers a system fatal error with a custom \\ref FatalType."]
        #[doc = " @param[in] err Result code to throw."]
        #[doc = " @param[in] type Type of fatal error to throw."]
        #[doc = " @note This function may not return, depending on \\ref FatalType."]
        pub fn fatalWithType(err: root::Result, type_: root::FatalType);
    }
    extern "C" {
        #[doc = " @brief Triggers a system fatal error with a custom \\ref FatalType and \\ref FatalContext."]
        #[doc = " @param[in] err  Result code to throw."]
        #[doc = " @param[in] type Type of fatal error to throw."]
        #[doc = " @param[in] ctx  Cpu context for fatal error to throw."]
        #[doc = " @note This function may not return, depending on \\ref FatalType."]
        pub fn fatalWithContext(
            err: root::Result,
            type_: root::FatalType,
            ctx: *mut root::FatalContext,
        );
    }
    pub const TimeType_TimeType_UserSystemClock: root::TimeType = 0;
    pub const TimeType_TimeType_NetworkSystemClock: root::TimeType = 1;
    pub const TimeType_TimeType_LocalSystemClock: root::TimeType = 2;
    pub const TimeType_TimeType_Default: root::TimeType = 0;
    #[doc = " Time clock type."]
    pub type TimeType = u32;
    #[repr(C)]
    pub struct TimeCalendarTime {
        pub year: u16,
        pub month: u8,
        pub day: u8,
        pub hour: u8,
        pub minute: u8,
        pub second: u8,
        pub pad: u8,
    }
    #[repr(C)]
    pub struct TimeCalendarAdditionalInfo {
        #[doc = "< 0-based day-of-week."]
        pub wday: u32,
        #[doc = "< 0-based day-of-year."]
        pub yday: u32,
        #[doc = "< Timezone name string."]
        pub timezoneName: [libc::c_char; 8usize],
        #[doc = "< 0 = no DST, 1 = DST."]
        pub DST: u32,
        #[doc = "< Seconds relative to UTC for this timezone."]
        pub offset: root::s32,
    }
    extern "C" {
        pub fn timeInitialize() -> root::Result;
    }
    extern "C" {
        pub fn timeExit();
    }
    extern "C" {
        pub fn timeGetSessionService() -> *mut root::Service;
    }
    extern "C" {
        pub fn timeGetCurrentTime(type_: root::TimeType, timestamp: *mut u64)
            -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the time for the specified clock."]
        #[doc = " @param[in] type Clock to use."]
        #[doc = " @param[in] timestamp POSIX UTC timestamp."]
        #[doc = " @return Result code."]
        pub fn timeSetCurrentTime(type_: root::TimeType, timestamp: u64) -> root::Result;
    }
    extern "C" {
        pub fn timeToCalendarTimeWithMyRule(
            timestamp: u64,
            caltime: *mut root::TimeCalendarTime,
            info: *mut root::TimeCalendarAdditionalInfo,
        ) -> root::Result;
    }
    pub const HidMouseButton_MOUSE_LEFT: root::HidMouseButton = 1;
    pub const HidMouseButton_MOUSE_RIGHT: root::HidMouseButton = 2;
    pub const HidMouseButton_MOUSE_MIDDLE: root::HidMouseButton = 4;
    pub const HidMouseButton_MOUSE_FORWARD: root::HidMouseButton = 8;
    pub const HidMouseButton_MOUSE_BACK: root::HidMouseButton = 16;
    pub type HidMouseButton = u32;
    pub const HidKeyboardModifier_KBD_MOD_LCTRL: root::HidKeyboardModifier = 1;
    pub const HidKeyboardModifier_KBD_MOD_LSHIFT: root::HidKeyboardModifier = 2;
    pub const HidKeyboardModifier_KBD_MOD_LALT: root::HidKeyboardModifier = 4;
    pub const HidKeyboardModifier_KBD_MOD_LMETA: root::HidKeyboardModifier = 8;
    pub const HidKeyboardModifier_KBD_MOD_RCTRL: root::HidKeyboardModifier = 16;
    pub const HidKeyboardModifier_KBD_MOD_RSHIFT: root::HidKeyboardModifier = 32;
    pub const HidKeyboardModifier_KBD_MOD_RALT: root::HidKeyboardModifier = 64;
    pub const HidKeyboardModifier_KBD_MOD_RMETA: root::HidKeyboardModifier = 128;
    pub const HidKeyboardModifier_KBD_MOD_CAPSLOCK: root::HidKeyboardModifier = 256;
    pub const HidKeyboardModifier_KBD_MOD_SCROLLLOCK: root::HidKeyboardModifier = 512;
    pub const HidKeyboardModifier_KBD_MOD_NUMLOCK: root::HidKeyboardModifier = 1024;
    pub type HidKeyboardModifier = u32;
    pub const HidKeyboardScancode_KBD_NONE: root::HidKeyboardScancode = 0;
    pub const HidKeyboardScancode_KBD_ERR_OVF: root::HidKeyboardScancode = 1;
    pub const HidKeyboardScancode_KBD_A: root::HidKeyboardScancode = 4;
    pub const HidKeyboardScancode_KBD_B: root::HidKeyboardScancode = 5;
    pub const HidKeyboardScancode_KBD_C: root::HidKeyboardScancode = 6;
    pub const HidKeyboardScancode_KBD_D: root::HidKeyboardScancode = 7;
    pub const HidKeyboardScancode_KBD_E: root::HidKeyboardScancode = 8;
    pub const HidKeyboardScancode_KBD_F: root::HidKeyboardScancode = 9;
    pub const HidKeyboardScancode_KBD_G: root::HidKeyboardScancode = 10;
    pub const HidKeyboardScancode_KBD_H: root::HidKeyboardScancode = 11;
    pub const HidKeyboardScancode_KBD_I: root::HidKeyboardScancode = 12;
    pub const HidKeyboardScancode_KBD_J: root::HidKeyboardScancode = 13;
    pub const HidKeyboardScancode_KBD_K: root::HidKeyboardScancode = 14;
    pub const HidKeyboardScancode_KBD_L: root::HidKeyboardScancode = 15;
    pub const HidKeyboardScancode_KBD_M: root::HidKeyboardScancode = 16;
    pub const HidKeyboardScancode_KBD_N: root::HidKeyboardScancode = 17;
    pub const HidKeyboardScancode_KBD_O: root::HidKeyboardScancode = 18;
    pub const HidKeyboardScancode_KBD_P: root::HidKeyboardScancode = 19;
    pub const HidKeyboardScancode_KBD_Q: root::HidKeyboardScancode = 20;
    pub const HidKeyboardScancode_KBD_R: root::HidKeyboardScancode = 21;
    pub const HidKeyboardScancode_KBD_S: root::HidKeyboardScancode = 22;
    pub const HidKeyboardScancode_KBD_T: root::HidKeyboardScancode = 23;
    pub const HidKeyboardScancode_KBD_U: root::HidKeyboardScancode = 24;
    pub const HidKeyboardScancode_KBD_V: root::HidKeyboardScancode = 25;
    pub const HidKeyboardScancode_KBD_W: root::HidKeyboardScancode = 26;
    pub const HidKeyboardScancode_KBD_X: root::HidKeyboardScancode = 27;
    pub const HidKeyboardScancode_KBD_Y: root::HidKeyboardScancode = 28;
    pub const HidKeyboardScancode_KBD_Z: root::HidKeyboardScancode = 29;
    pub const HidKeyboardScancode_KBD_1: root::HidKeyboardScancode = 30;
    pub const HidKeyboardScancode_KBD_2: root::HidKeyboardScancode = 31;
    pub const HidKeyboardScancode_KBD_3: root::HidKeyboardScancode = 32;
    pub const HidKeyboardScancode_KBD_4: root::HidKeyboardScancode = 33;
    pub const HidKeyboardScancode_KBD_5: root::HidKeyboardScancode = 34;
    pub const HidKeyboardScancode_KBD_6: root::HidKeyboardScancode = 35;
    pub const HidKeyboardScancode_KBD_7: root::HidKeyboardScancode = 36;
    pub const HidKeyboardScancode_KBD_8: root::HidKeyboardScancode = 37;
    pub const HidKeyboardScancode_KBD_9: root::HidKeyboardScancode = 38;
    pub const HidKeyboardScancode_KBD_0: root::HidKeyboardScancode = 39;
    pub const HidKeyboardScancode_KBD_ENTER: root::HidKeyboardScancode = 40;
    pub const HidKeyboardScancode_KBD_ESC: root::HidKeyboardScancode = 41;
    pub const HidKeyboardScancode_KBD_BACKSPACE: root::HidKeyboardScancode = 42;
    pub const HidKeyboardScancode_KBD_TAB: root::HidKeyboardScancode = 43;
    pub const HidKeyboardScancode_KBD_SPACE: root::HidKeyboardScancode = 44;
    pub const HidKeyboardScancode_KBD_MINUS: root::HidKeyboardScancode = 45;
    pub const HidKeyboardScancode_KBD_EQUAL: root::HidKeyboardScancode = 46;
    pub const HidKeyboardScancode_KBD_LEFTBRACE: root::HidKeyboardScancode = 47;
    pub const HidKeyboardScancode_KBD_RIGHTBRACE: root::HidKeyboardScancode = 48;
    pub const HidKeyboardScancode_KBD_BACKSLASH: root::HidKeyboardScancode = 49;
    pub const HidKeyboardScancode_KBD_HASHTILDE: root::HidKeyboardScancode = 50;
    pub const HidKeyboardScancode_KBD_SEMICOLON: root::HidKeyboardScancode = 51;
    pub const HidKeyboardScancode_KBD_APOSTROPHE: root::HidKeyboardScancode = 52;
    pub const HidKeyboardScancode_KBD_GRAVE: root::HidKeyboardScancode = 53;
    pub const HidKeyboardScancode_KBD_COMMA: root::HidKeyboardScancode = 54;
    pub const HidKeyboardScancode_KBD_DOT: root::HidKeyboardScancode = 55;
    pub const HidKeyboardScancode_KBD_SLASH: root::HidKeyboardScancode = 56;
    pub const HidKeyboardScancode_KBD_CAPSLOCK: root::HidKeyboardScancode = 57;
    pub const HidKeyboardScancode_KBD_F1: root::HidKeyboardScancode = 58;
    pub const HidKeyboardScancode_KBD_F2: root::HidKeyboardScancode = 59;
    pub const HidKeyboardScancode_KBD_F3: root::HidKeyboardScancode = 60;
    pub const HidKeyboardScancode_KBD_F4: root::HidKeyboardScancode = 61;
    pub const HidKeyboardScancode_KBD_F5: root::HidKeyboardScancode = 62;
    pub const HidKeyboardScancode_KBD_F6: root::HidKeyboardScancode = 63;
    pub const HidKeyboardScancode_KBD_F7: root::HidKeyboardScancode = 64;
    pub const HidKeyboardScancode_KBD_F8: root::HidKeyboardScancode = 65;
    pub const HidKeyboardScancode_KBD_F9: root::HidKeyboardScancode = 66;
    pub const HidKeyboardScancode_KBD_F10: root::HidKeyboardScancode = 67;
    pub const HidKeyboardScancode_KBD_F11: root::HidKeyboardScancode = 68;
    pub const HidKeyboardScancode_KBD_F12: root::HidKeyboardScancode = 69;
    pub const HidKeyboardScancode_KBD_SYSRQ: root::HidKeyboardScancode = 70;
    pub const HidKeyboardScancode_KBD_SCROLLLOCK: root::HidKeyboardScancode = 71;
    pub const HidKeyboardScancode_KBD_PAUSE: root::HidKeyboardScancode = 72;
    pub const HidKeyboardScancode_KBD_INSERT: root::HidKeyboardScancode = 73;
    pub const HidKeyboardScancode_KBD_HOME: root::HidKeyboardScancode = 74;
    pub const HidKeyboardScancode_KBD_PAGEUP: root::HidKeyboardScancode = 75;
    pub const HidKeyboardScancode_KBD_DELETE: root::HidKeyboardScancode = 76;
    pub const HidKeyboardScancode_KBD_END: root::HidKeyboardScancode = 77;
    pub const HidKeyboardScancode_KBD_PAGEDOWN: root::HidKeyboardScancode = 78;
    pub const HidKeyboardScancode_KBD_RIGHT: root::HidKeyboardScancode = 79;
    pub const HidKeyboardScancode_KBD_LEFT: root::HidKeyboardScancode = 80;
    pub const HidKeyboardScancode_KBD_DOWN: root::HidKeyboardScancode = 81;
    pub const HidKeyboardScancode_KBD_UP: root::HidKeyboardScancode = 82;
    pub const HidKeyboardScancode_KBD_NUMLOCK: root::HidKeyboardScancode = 83;
    pub const HidKeyboardScancode_KBD_KPSLASH: root::HidKeyboardScancode = 84;
    pub const HidKeyboardScancode_KBD_KPASTERISK: root::HidKeyboardScancode = 85;
    pub const HidKeyboardScancode_KBD_KPMINUS: root::HidKeyboardScancode = 86;
    pub const HidKeyboardScancode_KBD_KPPLUS: root::HidKeyboardScancode = 87;
    pub const HidKeyboardScancode_KBD_KPENTER: root::HidKeyboardScancode = 88;
    pub const HidKeyboardScancode_KBD_KP1: root::HidKeyboardScancode = 89;
    pub const HidKeyboardScancode_KBD_KP2: root::HidKeyboardScancode = 90;
    pub const HidKeyboardScancode_KBD_KP3: root::HidKeyboardScancode = 91;
    pub const HidKeyboardScancode_KBD_KP4: root::HidKeyboardScancode = 92;
    pub const HidKeyboardScancode_KBD_KP5: root::HidKeyboardScancode = 93;
    pub const HidKeyboardScancode_KBD_KP6: root::HidKeyboardScancode = 94;
    pub const HidKeyboardScancode_KBD_KP7: root::HidKeyboardScancode = 95;
    pub const HidKeyboardScancode_KBD_KP8: root::HidKeyboardScancode = 96;
    pub const HidKeyboardScancode_KBD_KP9: root::HidKeyboardScancode = 97;
    pub const HidKeyboardScancode_KBD_KP0: root::HidKeyboardScancode = 98;
    pub const HidKeyboardScancode_KBD_KPDOT: root::HidKeyboardScancode = 99;
    pub const HidKeyboardScancode_KBD_102ND: root::HidKeyboardScancode = 100;
    pub const HidKeyboardScancode_KBD_COMPOSE: root::HidKeyboardScancode = 101;
    pub const HidKeyboardScancode_KBD_POWER: root::HidKeyboardScancode = 102;
    pub const HidKeyboardScancode_KBD_KPEQUAL: root::HidKeyboardScancode = 103;
    pub const HidKeyboardScancode_KBD_F13: root::HidKeyboardScancode = 104;
    pub const HidKeyboardScancode_KBD_F14: root::HidKeyboardScancode = 105;
    pub const HidKeyboardScancode_KBD_F15: root::HidKeyboardScancode = 106;
    pub const HidKeyboardScancode_KBD_F16: root::HidKeyboardScancode = 107;
    pub const HidKeyboardScancode_KBD_F17: root::HidKeyboardScancode = 108;
    pub const HidKeyboardScancode_KBD_F18: root::HidKeyboardScancode = 109;
    pub const HidKeyboardScancode_KBD_F19: root::HidKeyboardScancode = 110;
    pub const HidKeyboardScancode_KBD_F20: root::HidKeyboardScancode = 111;
    pub const HidKeyboardScancode_KBD_F21: root::HidKeyboardScancode = 112;
    pub const HidKeyboardScancode_KBD_F22: root::HidKeyboardScancode = 113;
    pub const HidKeyboardScancode_KBD_F23: root::HidKeyboardScancode = 114;
    pub const HidKeyboardScancode_KBD_F24: root::HidKeyboardScancode = 115;
    pub const HidKeyboardScancode_KBD_OPEN: root::HidKeyboardScancode = 116;
    pub const HidKeyboardScancode_KBD_HELP: root::HidKeyboardScancode = 117;
    pub const HidKeyboardScancode_KBD_PROPS: root::HidKeyboardScancode = 118;
    pub const HidKeyboardScancode_KBD_FRONT: root::HidKeyboardScancode = 119;
    pub const HidKeyboardScancode_KBD_STOP: root::HidKeyboardScancode = 120;
    pub const HidKeyboardScancode_KBD_AGAIN: root::HidKeyboardScancode = 121;
    pub const HidKeyboardScancode_KBD_UNDO: root::HidKeyboardScancode = 122;
    pub const HidKeyboardScancode_KBD_CUT: root::HidKeyboardScancode = 123;
    pub const HidKeyboardScancode_KBD_COPY: root::HidKeyboardScancode = 124;
    pub const HidKeyboardScancode_KBD_PASTE: root::HidKeyboardScancode = 125;
    pub const HidKeyboardScancode_KBD_FIND: root::HidKeyboardScancode = 126;
    pub const HidKeyboardScancode_KBD_MUTE: root::HidKeyboardScancode = 127;
    pub const HidKeyboardScancode_KBD_VOLUMEUP: root::HidKeyboardScancode = 128;
    pub const HidKeyboardScancode_KBD_VOLUMEDOWN: root::HidKeyboardScancode = 129;
    pub const HidKeyboardScancode_KBD_CAPSLOCK_ACTIVE: root::HidKeyboardScancode = 130;
    pub const HidKeyboardScancode_KBD_NUMLOCK_ACTIVE: root::HidKeyboardScancode = 131;
    pub const HidKeyboardScancode_KBD_SCROLLLOCK_ACTIVE: root::HidKeyboardScancode = 132;
    pub const HidKeyboardScancode_KBD_KPCOMMA: root::HidKeyboardScancode = 133;
    pub const HidKeyboardScancode_KBD_KPLEFTPAREN: root::HidKeyboardScancode = 182;
    pub const HidKeyboardScancode_KBD_KPRIGHTPAREN: root::HidKeyboardScancode = 183;
    pub const HidKeyboardScancode_KBD_LEFTCTRL: root::HidKeyboardScancode = 224;
    pub const HidKeyboardScancode_KBD_LEFTSHIFT: root::HidKeyboardScancode = 225;
    pub const HidKeyboardScancode_KBD_LEFTALT: root::HidKeyboardScancode = 226;
    pub const HidKeyboardScancode_KBD_LEFTMETA: root::HidKeyboardScancode = 227;
    pub const HidKeyboardScancode_KBD_RIGHTCTRL: root::HidKeyboardScancode = 228;
    pub const HidKeyboardScancode_KBD_RIGHTSHIFT: root::HidKeyboardScancode = 229;
    pub const HidKeyboardScancode_KBD_RIGHTALT: root::HidKeyboardScancode = 230;
    pub const HidKeyboardScancode_KBD_RIGHTMETA: root::HidKeyboardScancode = 231;
    pub const HidKeyboardScancode_KBD_MEDIA_PLAYPAUSE: root::HidKeyboardScancode = 232;
    pub const HidKeyboardScancode_KBD_MEDIA_STOPCD: root::HidKeyboardScancode = 233;
    pub const HidKeyboardScancode_KBD_MEDIA_PREVIOUSSONG: root::HidKeyboardScancode = 234;
    pub const HidKeyboardScancode_KBD_MEDIA_NEXTSONG: root::HidKeyboardScancode = 235;
    pub const HidKeyboardScancode_KBD_MEDIA_EJECTCD: root::HidKeyboardScancode = 236;
    pub const HidKeyboardScancode_KBD_MEDIA_VOLUMEUP: root::HidKeyboardScancode = 237;
    pub const HidKeyboardScancode_KBD_MEDIA_VOLUMEDOWN: root::HidKeyboardScancode = 238;
    pub const HidKeyboardScancode_KBD_MEDIA_MUTE: root::HidKeyboardScancode = 239;
    pub const HidKeyboardScancode_KBD_MEDIA_WWW: root::HidKeyboardScancode = 240;
    pub const HidKeyboardScancode_KBD_MEDIA_BACK: root::HidKeyboardScancode = 241;
    pub const HidKeyboardScancode_KBD_MEDIA_FORWARD: root::HidKeyboardScancode = 242;
    pub const HidKeyboardScancode_KBD_MEDIA_STOP: root::HidKeyboardScancode = 243;
    pub const HidKeyboardScancode_KBD_MEDIA_FIND: root::HidKeyboardScancode = 244;
    pub const HidKeyboardScancode_KBD_MEDIA_SCROLLUP: root::HidKeyboardScancode = 245;
    pub const HidKeyboardScancode_KBD_MEDIA_SCROLLDOWN: root::HidKeyboardScancode = 246;
    pub const HidKeyboardScancode_KBD_MEDIA_EDIT: root::HidKeyboardScancode = 247;
    pub const HidKeyboardScancode_KBD_MEDIA_SLEEP: root::HidKeyboardScancode = 248;
    pub const HidKeyboardScancode_KBD_MEDIA_COFFEE: root::HidKeyboardScancode = 249;
    pub const HidKeyboardScancode_KBD_MEDIA_REFRESH: root::HidKeyboardScancode = 250;
    pub const HidKeyboardScancode_KBD_MEDIA_CALC: root::HidKeyboardScancode = 251;
    pub type HidKeyboardScancode = u32;
    pub const HidControllerType_TYPE_PROCONTROLLER: root::HidControllerType = 1;
    pub const HidControllerType_TYPE_HANDHELD: root::HidControllerType = 2;
    pub const HidControllerType_TYPE_JOYCON_PAIR: root::HidControllerType = 4;
    pub const HidControllerType_TYPE_JOYCON_LEFT: root::HidControllerType = 8;
    pub const HidControllerType_TYPE_JOYCON_RIGHT: root::HidControllerType = 16;
    #[doc = " HID controller type"]
    pub type HidControllerType = u32;
    #[doc = "< Pro Controller or Hid gamepad."]
    pub const HidControllerLayoutType_LAYOUT_PROCONTROLLER: root::HidControllerLayoutType = 0;
    #[doc = "< Two Joy-Con docked to rails."]
    pub const HidControllerLayoutType_LAYOUT_HANDHELD: root::HidControllerLayoutType = 1;
    #[doc = "< Single Joy-Con or pair of Joy-Con, only available in dual-mode with no orientation adjustment."]
    pub const HidControllerLayoutType_LAYOUT_SINGLE: root::HidControllerLayoutType = 2;
    #[doc = "< Only single-mode raw left Joy-Con state, no orientation adjustment."]
    pub const HidControllerLayoutType_LAYOUT_LEFT: root::HidControllerLayoutType = 3;
    #[doc = "< Only single-mode raw right Joy-Con state, no orientation adjustment."]
    pub const HidControllerLayoutType_LAYOUT_RIGHT: root::HidControllerLayoutType = 4;
    #[doc = "< Same as next, but sticks have 8-direction values only."]
    pub const HidControllerLayoutType_LAYOUT_DEFAULT_DIGITAL: root::HidControllerLayoutType = 5;
    #[doc = "< Safe default. Single-mode and ::HidJoyHoldType_Horizontal: Joy-Con have buttons/sticks rotated for orientation, where physical Z(L/R) are unavailable and S(L/R) are mapped to L/R (with physical L/R unavailable)."]
    pub const HidControllerLayoutType_LAYOUT_DEFAULT: root::HidControllerLayoutType = 6;
    pub type HidControllerLayoutType = u32;
    pub const HidControllerColorDescription_COLORS_NONEXISTENT:
        root::HidControllerColorDescription = 2;
    pub type HidControllerColorDescription = u32;
    #[doc = "< A"]
    pub const HidControllerKeys_KEY_A: root::HidControllerKeys = 1;
    #[doc = "< B"]
    pub const HidControllerKeys_KEY_B: root::HidControllerKeys = 2;
    #[doc = "< X"]
    pub const HidControllerKeys_KEY_X: root::HidControllerKeys = 4;
    #[doc = "< Y"]
    pub const HidControllerKeys_KEY_Y: root::HidControllerKeys = 8;
    #[doc = "< Left Stick Button"]
    pub const HidControllerKeys_KEY_LSTICK: root::HidControllerKeys = 16;
    #[doc = "< Right Stick Button"]
    pub const HidControllerKeys_KEY_RSTICK: root::HidControllerKeys = 32;
    #[doc = "< L"]
    pub const HidControllerKeys_KEY_L: root::HidControllerKeys = 64;
    #[doc = "< R"]
    pub const HidControllerKeys_KEY_R: root::HidControllerKeys = 128;
    #[doc = "< ZL"]
    pub const HidControllerKeys_KEY_ZL: root::HidControllerKeys = 256;
    #[doc = "< ZR"]
    pub const HidControllerKeys_KEY_ZR: root::HidControllerKeys = 512;
    #[doc = "< Plus"]
    pub const HidControllerKeys_KEY_PLUS: root::HidControllerKeys = 1024;
    #[doc = "< Minus"]
    pub const HidControllerKeys_KEY_MINUS: root::HidControllerKeys = 2048;
    #[doc = "< D-Pad Left"]
    pub const HidControllerKeys_KEY_DLEFT: root::HidControllerKeys = 4096;
    #[doc = "< D-Pad Up"]
    pub const HidControllerKeys_KEY_DUP: root::HidControllerKeys = 8192;
    #[doc = "< D-Pad Right"]
    pub const HidControllerKeys_KEY_DRIGHT: root::HidControllerKeys = 16384;
    #[doc = "< D-Pad Down"]
    pub const HidControllerKeys_KEY_DDOWN: root::HidControllerKeys = 32768;
    #[doc = "< Left Stick Left"]
    pub const HidControllerKeys_KEY_LSTICK_LEFT: root::HidControllerKeys = 65536;
    #[doc = "< Left Stick Up"]
    pub const HidControllerKeys_KEY_LSTICK_UP: root::HidControllerKeys = 131072;
    #[doc = "< Left Stick Right"]
    pub const HidControllerKeys_KEY_LSTICK_RIGHT: root::HidControllerKeys = 262144;
    #[doc = "< Left Stick Down"]
    pub const HidControllerKeys_KEY_LSTICK_DOWN: root::HidControllerKeys = 524288;
    #[doc = "< Right Stick Left"]
    pub const HidControllerKeys_KEY_RSTICK_LEFT: root::HidControllerKeys = 1048576;
    #[doc = "< Right Stick Up"]
    pub const HidControllerKeys_KEY_RSTICK_UP: root::HidControllerKeys = 2097152;
    #[doc = "< Right Stick Right"]
    pub const HidControllerKeys_KEY_RSTICK_RIGHT: root::HidControllerKeys = 4194304;
    #[doc = "< Right Stick Down"]
    pub const HidControllerKeys_KEY_RSTICK_DOWN: root::HidControllerKeys = 8388608;
    #[doc = "< SL on Left Joy-Con"]
    pub const HidControllerKeys_KEY_SL_LEFT: root::HidControllerKeys = 16777216;
    #[doc = "< SR on Left Joy-Con"]
    pub const HidControllerKeys_KEY_SR_LEFT: root::HidControllerKeys = 33554432;
    #[doc = "< SL on Right Joy-Con"]
    pub const HidControllerKeys_KEY_SL_RIGHT: root::HidControllerKeys = 67108864;
    #[doc = "< SR on Right Joy-Con"]
    pub const HidControllerKeys_KEY_SR_RIGHT: root::HidControllerKeys = 134217728;
    pub const HidControllerKeys_KEY_TOUCH: root::HidControllerKeys = 268435456;
    pub const HidControllerKeys_KEY_JOYCON_RIGHT: root::HidControllerKeys = 1;
    pub const HidControllerKeys_KEY_JOYCON_DOWN: root::HidControllerKeys = 2;
    pub const HidControllerKeys_KEY_JOYCON_UP: root::HidControllerKeys = 4;
    pub const HidControllerKeys_KEY_JOYCON_LEFT: root::HidControllerKeys = 8;
    #[doc = "< D-Pad Up or Sticks Up"]
    pub const HidControllerKeys_KEY_UP: root::HidControllerKeys = 2236416;
    #[doc = "< D-Pad Down or Sticks Down"]
    pub const HidControllerKeys_KEY_DOWN: root::HidControllerKeys = 8945664;
    #[doc = "< D-Pad Left or Sticks Left"]
    pub const HidControllerKeys_KEY_LEFT: root::HidControllerKeys = 1118208;
    #[doc = "< D-Pad Right or Sticks Right"]
    pub const HidControllerKeys_KEY_RIGHT: root::HidControllerKeys = 4472832;
    #[doc = "< SL on Left or Right Joy-Con"]
    pub const HidControllerKeys_KEY_SL: root::HidControllerKeys = 83886080;
    #[doc = "< SR on Left or Right Joy-Con"]
    pub const HidControllerKeys_KEY_SR: root::HidControllerKeys = 167772160;
    pub type HidControllerKeys = u32;
    pub const HidControllerJoystick_JOYSTICK_LEFT: root::HidControllerJoystick = 0;
    pub const HidControllerJoystick_JOYSTICK_RIGHT: root::HidControllerJoystick = 1;
    pub const HidControllerJoystick_JOYSTICK_NUM_STICKS: root::HidControllerJoystick = 2;
    pub type HidControllerJoystick = u32;
    pub const HidControllerConnectionState_CONTROLLER_STATE_CONNECTED:
        root::HidControllerConnectionState = 1;
    pub const HidControllerConnectionState_CONTROLLER_STATE_WIRED:
        root::HidControllerConnectionState = 2;
    pub type HidControllerConnectionState = u32;
    pub const HidControllerID_CONTROLLER_PLAYER_1: root::HidControllerID = 0;
    pub const HidControllerID_CONTROLLER_PLAYER_2: root::HidControllerID = 1;
    pub const HidControllerID_CONTROLLER_PLAYER_3: root::HidControllerID = 2;
    pub const HidControllerID_CONTROLLER_PLAYER_4: root::HidControllerID = 3;
    pub const HidControllerID_CONTROLLER_PLAYER_5: root::HidControllerID = 4;
    pub const HidControllerID_CONTROLLER_PLAYER_6: root::HidControllerID = 5;
    pub const HidControllerID_CONTROLLER_PLAYER_7: root::HidControllerID = 6;
    pub const HidControllerID_CONTROLLER_PLAYER_8: root::HidControllerID = 7;
    pub const HidControllerID_CONTROLLER_HANDHELD: root::HidControllerID = 8;
    pub const HidControllerID_CONTROLLER_UNKNOWN: root::HidControllerID = 9;
    #[doc = "< Not an actual HID-sysmodule ID. Only for hidKeys*()/hidJoystickRead()/hidSixAxisSensorValuesRead()/hidGetControllerType()/hidGetControllerColors()/hidIsControllerConnected(). Automatically uses CONTROLLER_PLAYER_1 when connected, otherwise uses CONTROLLER_HANDHELD."]
    pub const HidControllerID_CONTROLLER_P1_AUTO: root::HidControllerID = 10;
    pub type HidControllerID = u32;
    #[doc = "< Default / Joy-Con held vertically."]
    pub const HidJoyHoldType_HidJoyHoldType_Default: root::HidJoyHoldType = 0;
    #[doc = "< Joy-Con held horizontally with HID state orientation adjustment, see \\ref HidControllerLayoutType."]
    pub const HidJoyHoldType_HidJoyHoldType_Horizontal: root::HidJoyHoldType = 1;
    pub type HidJoyHoldType = u32;
    #[repr(C)]
    pub struct touchPosition {
        pub id: u32,
        pub px: u32,
        pub py: u32,
        pub dx: u32,
        pub dy: u32,
        pub angle: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct JoystickPosition {
        pub dx: root::s32,
        pub dy: root::s32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct MousePosition {
        pub x: root::s32,
        pub y: root::s32,
        pub velocityX: root::s32,
        pub velocityY: root::s32,
        pub scrollVelocityX: root::s32,
        pub scrollVelocityY: root::s32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HidVector {
        pub x: f32,
        pub y: f32,
        pub z: f32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct SixAxisSensorValues {
        pub accelerometer: root::HidVector,
        pub gyroscope: root::HidVector,
        pub unk: root::HidVector,
        pub orientation: [root::HidVector; 3usize],
    }
    #[repr(C)]
    pub struct HidTouchScreenHeader {
        pub timestampTicks: u64,
        pub numEntries: u64,
        pub latestEntry: u64,
        pub maxEntryIndex: u64,
        pub timestamp: u64,
    }
    #[repr(C)]
    pub struct HidTouchScreenEntryHeader {
        pub timestamp: u64,
        pub numTouches: u64,
    }
    #[repr(C)]
    pub struct HidTouchScreenEntryTouch {
        pub timestamp: u64,
        pub padding: u32,
        pub touchIndex: u32,
        pub x: u32,
        pub y: u32,
        pub diameterX: u32,
        pub diameterY: u32,
        pub angle: u32,
        pub padding_2: u32,
    }
    #[repr(C)]
    pub struct HidTouchScreenEntry {
        pub header: root::HidTouchScreenEntryHeader,
        pub touches: [root::HidTouchScreenEntryTouch; 16usize],
        pub unk: u64,
    }
    #[repr(C)]
    pub struct HidTouchScreen {
        pub header: root::HidTouchScreenHeader,
        pub entries: [root::HidTouchScreenEntry; 17usize],
        pub padding: [u8; 960usize],
    }
    #[repr(C)]
    pub struct HidMouseHeader {
        pub timestampTicks: u64,
        pub numEntries: u64,
        pub latestEntry: u64,
        pub maxEntryIndex: u64,
    }
    #[repr(C)]
    pub struct HidMouseEntry {
        pub timestamp: u64,
        pub timestamp_2: u64,
        pub position: root::MousePosition,
        pub buttons: u64,
    }
    #[repr(C)]
    pub struct HidMouse {
        pub header: root::HidMouseHeader,
        pub entries: [root::HidMouseEntry; 17usize],
        pub padding: [u8; 176usize],
    }
    #[repr(C)]
    pub struct HidKeyboardHeader {
        pub timestampTicks: u64,
        pub numEntries: u64,
        pub latestEntry: u64,
        pub maxEntryIndex: u64,
    }
    #[repr(C)]
    pub struct HidKeyboardEntry {
        pub timestamp: u64,
        pub timestamp_2: u64,
        pub modifier: u64,
        pub keys: [u32; 8usize],
    }
    #[repr(C)]
    pub struct HidKeyboard {
        pub header: root::HidKeyboardHeader,
        pub entries: [root::HidKeyboardEntry; 17usize],
        pub padding: [u8; 40usize],
    }
    #[repr(C)]
    pub struct HidControllerMAC {
        pub timestamp: u64,
        pub mac: [u8; 8usize],
        pub unk: u64,
        pub timestamp_2: u64,
    }
    #[repr(C)]
    pub struct HidControllerHeader {
        pub type_: u32,
        pub isHalf: u32,
        pub singleColorsDescriptor: u32,
        pub singleColorBody: u32,
        pub singleColorButtons: u32,
        pub splitColorsDescriptor: u32,
        pub leftColorBody: u32,
        pub leftColorButtons: u32,
        pub rightColorBody: u32,
        pub rightColorButtons: u32,
    }
    #[doc = " Info struct extracted from HidControllerHeader."]
    #[doc = " Color fields are zero when not set. This can happen even when the *Set fields are set to true."]
    #[repr(C)]
    pub struct HidControllerColors {
        #[doc = "< Set to true when the below fields are valid."]
        pub singleSet: bool,
        #[doc = "< RGBA Single Body Color"]
        pub singleColorBody: u32,
        #[doc = "< RGBA Single Buttons Color"]
        pub singleColorButtons: u32,
        #[doc = "< Set to true when the below fields are valid."]
        pub splitSet: bool,
        #[doc = "< RGBA Left Body Color"]
        pub leftColorBody: u32,
        #[doc = "< RGBA Left Buttons Color"]
        pub leftColorButtons: u32,
        #[doc = "< RGBA Right Body Color"]
        pub rightColorBody: u32,
        #[doc = "< RGBA Right Buttons Color"]
        pub rightColorButtons: u32,
    }
    #[repr(C)]
    pub struct HidControllerLayoutHeader {
        pub timestampTicks: u64,
        pub numEntries: u64,
        pub latestEntry: u64,
        pub maxEntryIndex: u64,
    }
    #[repr(C)]
    pub struct HidControllerInputEntry {
        pub timestamp: u64,
        pub timestamp_2: u64,
        pub buttons: u64,
        pub joysticks: [root::JoystickPosition; 2usize],
        pub connectionState: u64,
    }
    #[repr(C)]
    pub struct HidControllerLayout {
        pub header: root::HidControllerLayoutHeader,
        pub entries: [root::HidControllerInputEntry; 17usize],
    }
    #[repr(C)]
    pub struct HidControllerSixAxisHeader {
        pub timestamp: u64,
        pub numEntries: u64,
        pub latestEntry: u64,
        pub maxEntryIndex: u64,
    }
    #[repr(C)]
    pub struct HidControllerSixAxisEntry {
        pub timestamp: u64,
        pub unk_1: u64,
        pub timestamp_2: u64,
        pub values: root::SixAxisSensorValues,
        pub unk_3: u64,
    }
    #[repr(C)]
    pub struct HidControllerSixAxisLayout {
        pub header: root::HidControllerSixAxisHeader,
        pub entries: [root::HidControllerSixAxisEntry; 17usize],
    }
    #[doc = " Controller flags."]
    #[repr(C)]
    pub struct HidFlags {
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 2usize], u8>,
        pub unused: u32,
        pub _bitfield_2: root::__BindgenBitfieldUnit<[u8; 1usize], u8>,
        pub __bindgen_padding_0: [u8; 3usize],
    }
    impl HidFlags {
        #[inline]
        pub fn powerInfo(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
        }
        #[inline]
        pub fn set_powerInfo(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(0usize, 6u8, val as u64)
            }
        }
        #[inline]
        pub fn bit6(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_bit6(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(6usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn bit7(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_bit7(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(7usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn bit8(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_bit8(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(8usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn unsupportedButtonPressed_NpadSystem(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_unsupportedButtonPressed_NpadSystem(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(9usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn unsupportedButtonPressed_NpadSystemExt(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_unsupportedButtonPressed_NpadSystemExt(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(10usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn abxyButtonOriented(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_abxyButtonOriented(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(11usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn slSrButtonOriented(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_slSrButtonOriented(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(12usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn plusButtonCapability(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_plusButtonCapability(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(13usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn minusButtonCapability(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_minusButtonCapability(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(14usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn directionalButtonsSupported(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_directionalButtonsSupported(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_1.set(15usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            powerInfo: u32,
            bit6: u32,
            bit7: u32,
            bit8: u32,
            unsupportedButtonPressed_NpadSystem: u32,
            unsupportedButtonPressed_NpadSystemExt: u32,
            abxyButtonOriented: u32,
            slSrButtonOriented: u32,
            plusButtonCapability: u32,
            minusButtonCapability: u32,
            directionalButtonsSupported: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 2usize], u8> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 2usize], u8> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 6u8, {
                let powerInfo: u32 = unsafe { ::core::mem::transmute(powerInfo) };
                powerInfo as u64
            });
            __bindgen_bitfield_unit.set(6usize, 1u8, {
                let bit6: u32 = unsafe { ::core::mem::transmute(bit6) };
                bit6 as u64
            });
            __bindgen_bitfield_unit.set(7usize, 1u8, {
                let bit7: u32 = unsafe { ::core::mem::transmute(bit7) };
                bit7 as u64
            });
            __bindgen_bitfield_unit.set(8usize, 1u8, {
                let bit8: u32 = unsafe { ::core::mem::transmute(bit8) };
                bit8 as u64
            });
            __bindgen_bitfield_unit.set(9usize, 1u8, {
                let unsupportedButtonPressed_NpadSystem: u32 =
                    unsafe { ::core::mem::transmute(unsupportedButtonPressed_NpadSystem) };
                unsupportedButtonPressed_NpadSystem as u64
            });
            __bindgen_bitfield_unit.set(10usize, 1u8, {
                let unsupportedButtonPressed_NpadSystemExt: u32 =
                    unsafe { ::core::mem::transmute(unsupportedButtonPressed_NpadSystemExt) };
                unsupportedButtonPressed_NpadSystemExt as u64
            });
            __bindgen_bitfield_unit.set(11usize, 1u8, {
                let abxyButtonOriented: u32 = unsafe { ::core::mem::transmute(abxyButtonOriented) };
                abxyButtonOriented as u64
            });
            __bindgen_bitfield_unit.set(12usize, 1u8, {
                let slSrButtonOriented: u32 = unsafe { ::core::mem::transmute(slSrButtonOriented) };
                slSrButtonOriented as u64
            });
            __bindgen_bitfield_unit.set(13usize, 1u8, {
                let plusButtonCapability: u32 =
                    unsafe { ::core::mem::transmute(plusButtonCapability) };
                plusButtonCapability as u64
            });
            __bindgen_bitfield_unit.set(14usize, 1u8, {
                let minusButtonCapability: u32 =
                    unsafe { ::core::mem::transmute(minusButtonCapability) };
                minusButtonCapability as u64
            });
            __bindgen_bitfield_unit.set(15usize, 1u8, {
                let directionalButtonsSupported: u32 =
                    unsafe { ::core::mem::transmute(directionalButtonsSupported) };
                directionalButtonsSupported as u64
            });
            __bindgen_bitfield_unit
        }
        #[inline]
        pub fn unintendedHomeButtonInputProtectionDisabled(&self) -> u32 {
            unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_unintendedHomeButtonInputProtectionDisabled(&mut self, val: u32) {
            unsafe {
                let val: u32 = ::core::mem::transmute(val);
                self._bitfield_2.set(0usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_2(
            unintendedHomeButtonInputProtectionDisabled: u32,
        ) -> root::__BindgenBitfieldUnit<[u8; 1usize], u8> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 1usize], u8> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 1u8, {
                let unintendedHomeButtonInputProtectionDisabled: u32 =
                    unsafe { ::core::mem::transmute(unintendedHomeButtonInputProtectionDisabled) };
                unintendedHomeButtonInputProtectionDisabled as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    pub struct HidControllerMisc {
        pub deviceType: u32,
        pub pad: u32,
        pub flags: root::HidFlags,
        pub batteryCharge: [u32; 3usize],
        pub unk_1: [u8; 32usize],
        pub macLeft: root::HidControllerMAC,
        pub macRight: root::HidControllerMAC,
    }
    #[repr(C)]
    pub struct HidPowerInfo {
        pub powerConnected: bool,
        pub isCharging: bool,
        #[doc = "< Battery charge, always 0-4."]
        pub batteryCharge: u32,
    }
    #[repr(C)]
    pub struct HidController {
        pub header: root::HidControllerHeader,
        pub layouts: [root::HidControllerLayout; 7usize],
        pub sixaxis: [root::HidControllerSixAxisLayout; 6usize],
        pub misc: root::HidControllerMisc,
        pub unk_2: [u8; 3576usize],
    }
    #[repr(C)]
    pub struct HidSharedMemory {
        pub header: [u8; 1024usize],
        pub touchscreen: root::HidTouchScreen,
        pub mouse: root::HidMouse,
        pub keyboard: root::HidKeyboard,
        pub unkSection1: [u8; 1024usize],
        pub unkSection2: [u8; 1024usize],
        pub unkSection3: [u8; 1024usize],
        pub unkSection4: [u8; 1024usize],
        pub unkSection5: [u8; 512usize],
        pub unkSection6: [u8; 512usize],
        pub unkSection7: [u8; 512usize],
        pub unkSection8: [u8; 2048usize],
        pub controllerSerials: [u8; 16384usize],
        pub controllers: [root::HidController; 10usize],
        pub unkSection9: [u8; 17920usize],
    }
    #[repr(C)]
    pub struct HidVibrationDeviceInfo {
        pub unk_x0: u32,
        #[doc = "< 0x1 for left-joycon, 0x2 for right-joycon."]
        pub unk_x4: u32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HidVibrationValue {
        #[doc = "< Low Band amplitude. 1.0f: Max amplitude."]
        pub amp_low: f32,
        #[doc = "< Low Band frequency in Hz."]
        pub freq_low: f32,
        #[doc = "< High Band amplitude. 1.0f: Max amplitude."]
        pub amp_high: f32,
        #[doc = "< High Band frequency in Hz."]
        pub freq_high: f32,
    }
    extern "C" {
        #[doc = " Initializes hid, called automatically during app startup."]
        pub fn hidInitialize() -> root::Result;
    }
    extern "C" {
        pub fn hidExit();
    }
    extern "C" {
        pub fn hidReset();
    }
    extern "C" {
        pub fn hidGetSessionService() -> *mut root::Service;
    }
    extern "C" {
        pub fn hidGetSharedmemAddr() -> *mut libc::c_void;
    }
    extern "C" {
        pub fn hidSetControllerLayout(
            id: root::HidControllerID,
            layoutType: root::HidControllerLayoutType,
        );
    }
    extern "C" {
        pub fn hidGetControllerLayout(id: root::HidControllerID) -> root::HidControllerLayoutType;
    }
    extern "C" {
        #[doc = " Gets the \\ref HidControllerType for the specified controller."]
        pub fn hidGetControllerType(id: root::HidControllerID) -> root::HidControllerType;
    }
    extern "C" {
        pub fn hidGetControllerColors(
            id: root::HidControllerID,
            colors: *mut root::HidControllerColors,
        );
    }
    extern "C" {
        pub fn hidIsControllerConnected(id: root::HidControllerID) -> bool;
    }
    extern "C" {
        #[doc = " Gets the DeviceType for the specified controller."]
        pub fn hidGetControllerDeviceType(id: root::HidControllerID) -> u32;
    }
    extern "C" {
        #[doc = " Gets the flags for the specified controller."]
        pub fn hidGetControllerFlags(id: root::HidControllerID, flags: *mut root::HidFlags);
    }
    extern "C" {
        #[doc = " Gets the \\ref HidPowerInfo for the specified controller. info is the output array, where total_info is the number of entries. total_info must be 1 or 2: former for the main battery info, latter for reading left/right Joy-Con PowerInfo."]
        pub fn hidGetControllerPowerInfo(
            id: root::HidControllerID,
            info: *mut root::HidPowerInfo,
            total_info: root::size_t,
        );
    }
    extern "C" {
        pub fn hidScanInput();
    }
    extern "C" {
        pub fn hidKeysHeld(id: root::HidControllerID) -> u64;
    }
    extern "C" {
        pub fn hidKeysDown(id: root::HidControllerID) -> u64;
    }
    extern "C" {
        pub fn hidKeysUp(id: root::HidControllerID) -> u64;
    }
    extern "C" {
        pub fn hidMouseButtonsHeld() -> u64;
    }
    extern "C" {
        pub fn hidMouseButtonsDown() -> u64;
    }
    extern "C" {
        pub fn hidMouseButtonsUp() -> u64;
    }
    extern "C" {
        pub fn hidMouseRead(pos: *mut root::MousePosition);
    }
    extern "C" {
        pub fn hidMouseMultiRead(
            entries: *mut root::MousePosition,
            num_entries: u32,
        ) -> u32;
    }
    extern "C" {
        pub fn hidKeyboardModifierHeld(modifier: root::HidKeyboardModifier) -> bool;
    }
    extern "C" {
        pub fn hidKeyboardModifierDown(modifier: root::HidKeyboardModifier) -> bool;
    }
    extern "C" {
        pub fn hidKeyboardModifierUp(modifier: root::HidKeyboardModifier) -> bool;
    }
    extern "C" {
        pub fn hidKeyboardHeld(key: root::HidKeyboardScancode) -> bool;
    }
    extern "C" {
        pub fn hidKeyboardDown(key: root::HidKeyboardScancode) -> bool;
    }
    extern "C" {
        pub fn hidKeyboardUp(key: root::HidKeyboardScancode) -> bool;
    }
    extern "C" {
        pub fn hidTouchCount() -> u32;
    }
    extern "C" {
        pub fn hidTouchRead(pos: *mut root::touchPosition, point_id: u32);
    }
    extern "C" {
        pub fn hidJoystickRead(
            pos: *mut root::JoystickPosition,
            id: root::HidControllerID,
            stick: root::HidControllerJoystick,
        );
    }
    extern "C" {
        pub fn hidSixAxisSensorValuesRead(
            values: *mut root::SixAxisSensorValues,
            id: root::HidControllerID,
            num_entries: u32,
        ) -> u32;
    }
    extern "C" {
        #[doc = " This can be used to check what CONTROLLER_P1_AUTO uses."]
        #[doc = " Returns 0 when CONTROLLER_PLAYER_1 is connected, otherwise returns 1 for handheld-mode."]
        pub fn hidGetHandheldMode() -> bool;
    }
    extern "C" {
        #[doc = " This is automatically called with CONTROLLER_PLAYER_{1-8} and CONTROLLER_HANDHELD in \\ref hidInitialize."]
        #[doc = " count must be <=10. Each entry in buf must be CONTROLLER_PLAYER_{1-8} or CONTROLLER_HANDHELD."]
        pub fn hidSetSupportedNpadIdType(
            buf: *mut root::HidControllerID,
            count: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Sets which controller types are supported. This is automatically called with all types in \\ref hidInitialize."]
        pub fn hidSetSupportedNpadStyleSet(type_: root::HidControllerType) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets an event with the specified autoclear for the input controller."]
        #[doc = " The user *must* close the event when finished with it / before the app exits."]
        #[doc = " This is signaled when the \\ref hidGetControllerType output is updated for the controller."]
        pub fn hidAcquireNpadStyleSetUpdateEventHandle(
            id: root::HidControllerID,
            event: *mut root::Event,
            autoclear: bool,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Sets the hold-type, see \\ref HidJoyHoldType."]
        pub fn hidSetNpadJoyHoldType(type_: root::HidJoyHoldType) -> root::Result;
    }
    extern "C" {
        #[doc = " Use this if you want to use a single joy-con as a dedicated CONTROLLER_PLAYER_*."]
        #[doc = " When used, both joy-cons in a pair should be used with this (CONTROLLER_PLAYER_1 and CONTROLLER_PLAYER_2 for example)."]
        #[doc = " id must be CONTROLLER_PLAYER_*."]
        pub fn hidSetNpadJoyAssignmentModeSingleByDefault(
            id: root::HidControllerID,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Use this if you want to use a pair of joy-cons as a single CONTROLLER_PLAYER_*. Only necessary if you want to use this mode in your application after \\ref hidSetNpadJoyAssignmentModeSingleByDefault was used with this pair of joy-cons."]
        #[doc = " Used automatically during app startup/exit for all controllers."]
        #[doc = " When used, both joy-cons in a pair should be used with this (CONTROLLER_PLAYER_1 and CONTROLLER_PLAYER_2 for example)."]
        #[doc = " id must be CONTROLLER_PLAYER_*."]
        pub fn hidSetNpadJoyAssignmentModeDual(id: root::HidControllerID) -> root::Result;
    }
    extern "C" {
        #[doc = " Merge two single joy-cons into a dual-mode controller. Use this after \\ref hidSetNpadJoyAssignmentModeDual, when \\ref hidSetNpadJoyAssignmentModeSingleByDefault was previously used (this includes using this manually at application exit)."]
        #[doc = " To be successful, id0/id1 must correspond to controller types TYPE_JOYCON_LEFT/TYPE_JOYCON_RIGHT, or TYPE_JOYCON_RIGHT/TYPE_JOYCON_LEFT."]
        #[doc = " If successful, the id of the resulting dual controller is set to id0."]
        pub fn hidMergeSingleJoyAsDualJoy(
            id0: root::HidControllerID,
            id1: root::HidControllerID,
        ) -> root::Result;
    }
    extern "C" {
        pub fn hidInitializeVibrationDevices(
            VibrationDeviceHandles: *mut u32,
            total_handles: root::size_t,
            id: root::HidControllerID,
            type_: root::HidControllerType,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets HidVibrationDeviceInfo for the specified VibrationDeviceHandle."]
        pub fn hidGetVibrationDeviceInfo(
            VibrationDeviceHandle: *mut u32,
            VibrationDeviceInfo: *mut root::HidVibrationDeviceInfo,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Send the VibrationValue to the specified VibrationDeviceHandle."]
        pub fn hidSendVibrationValue(
            VibrationDeviceHandle: *mut u32,
            VibrationValue: *mut root::HidVibrationValue,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets the current HidVibrationValue for the specified VibrationDeviceHandle."]
        pub fn hidGetActualVibrationValue(
            VibrationDeviceHandle: *mut u32,
            VibrationValue: *mut root::HidVibrationValue,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Sets whether vibration is allowed, this also affects the config displayed by System Settings."]
        pub fn hidPermitVibration(flag: bool) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets whether vibration is allowed."]
        pub fn hidIsVibrationPermitted(flag: *mut bool) -> root::Result;
    }
    extern "C" {
        #[doc = " Send VibrationValues[index] to VibrationDeviceHandles[index], where count is the number of entries in the VibrationDeviceHandles/VibrationValues arrays."]
        pub fn hidSendVibrationValues(
            VibrationDeviceHandles: *mut u32,
            VibrationValues: *mut root::HidVibrationValue,
            count: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets SixAxisSensorHandles. total_handles==2 can only be used with TYPE_JOYCON_PAIR."]
        pub fn hidGetSixAxisSensorHandles(
            SixAxisSensorHandles: *mut u32,
            total_handles: root::size_t,
            id: root::HidControllerID,
            type_: root::HidControllerType,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Starts the SixAxisSensor for the specified handle."]
        pub fn hidStartSixAxisSensor(SixAxisSensorHandle: u32) -> root::Result;
    }
    extern "C" {
        #[doc = " Stops the SixAxisSensor for the specified handle."]
        pub fn hidStopSixAxisSensor(SixAxisSensorHandle: u32) -> root::Result;
    }
    extern "C" {
        #[doc = " Starts the SevenSixAxisSensor. Only available on [5.0.0+]."]
        pub fn hidStartSevenSixAxisSensor() -> root::Result;
    }
    extern "C" {
        #[doc = " Stops the SevenSixAxisSensor. Only available on [5.0.0+]."]
        pub fn hidStopSevenSixAxisSensor() -> root::Result;
    }
    extern "C" {
        #[doc = " Initializes the SevenSixAxisSensor. Only available on [5.0.0+]."]
        pub fn hidInitializeSevenSixAxisSensor() -> root::Result;
    }
    extern "C" {
        #[doc = " Finalizes the SevenSixAxisSensor. Also used automatically by \\ref hidExit. Only available on [5.0.0+]."]
        pub fn hidFinalizeSevenSixAxisSensor() -> root::Result;
    }
    extern "C" {
        #[doc = " Sets the SevenSixAxisSensor FusionStrength. Only available on [5.0.0+]."]
        pub fn hidSetSevenSixAxisSensorFusionStrength(strength: f32) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets the SevenSixAxisSensor FusionStrength. Only available on [5.0.0+]."]
        pub fn hidGetSevenSixAxisSensorFusionStrength(strength: *mut f32) -> root::Result;
    }
    extern "C" {
        #[doc = " Resets the timestamp for the SevenSixAxisSensor. Only available on [6.0.0+]."]
        pub fn hidResetSevenSixAxisSensorTimestamp() -> root::Result;
    }
    #[doc = " HdlsDeviceInfo"]
    #[repr(C)]
    pub struct HiddbgHdlsDeviceInfo {
        #[doc = "< Only one bit can be set. BIT(N*4+0) = Pro-Controller, BIT(N*4+1) = Joy-Con Left, BIT(N*4+2) = Joy-Con Right, BIT(N*4+3) = invalid. Where N is 0-1. BIT(8-10) = Pro-Controller, BIT(11) = Famicom-Controller, BIT(12) = Famicom-Controller II with microphone, BIT(13) = NES-Controller(DeviceType=0x200), BIT(14) = NES-Controller(DeviceType=0x400), BIT(15-16) = invalid, BIT(17) = unknown(DeviceType=0x8000), BIT(18-20) = invalid, BIT(21-23) = unknown(DeviceType=0x80000000)."]
        pub type_: u32,
        #[doc = "< RGBA Single Body Color"]
        pub singleColorBody: u32,
        #[doc = "< RGBA Single Buttons Color"]
        pub singleColorButtons: u32,
        #[doc = "< Additional type field used with the above type field (only applies to type bit0-bit2 and bit21), if the value doesn't match one of the following a default is used. Type Pro-Controller: value 0x3 indicates that the controller is connected via USB. Type BIT(21): value 0x3 = unknown. When value is 0x2, state is merged with an existing controller (when the type value is compatible with this). Otherwise, it's a dedicated controller."]
        pub type2: u8,
        #[doc = "< Padding"]
        pub pad: [u8; 3usize],
    }
    #[doc = " HdlsState"]
    #[repr(C)]
    pub struct HiddbgHdlsState {
        #[doc = "< powerConnected for the main PowerInfo, see \\ref HidFlags."]
        pub powerConnected: u8,
        #[doc = "< ORRed with powerConnected to set the value of the first byte for \\ref HidFlags. For example, value 1 here will set isCharging for the main PowerInfo."]
        pub flags: u8,
        #[doc = "< Unknown"]
        pub unk_x2: [u8; 6usize],
        #[doc = "< batteryCharge for the main PowerInfo, see \\ref HidPowerInfo."]
        pub batteryCharge: u32,
        #[doc = "< See \\ref HidControllerKeys."]
        pub buttons: u32,
        #[doc = "< \\ref JoystickPosition"]
        pub joysticks: [root::JoystickPosition; 2usize],
        #[doc = "< Unused for input. Set with output from \\ref hiddbgDumpHdlsStates. Not set by \\ref hiddbgGetAbstractedPadsState."]
        pub unk_x20: u8,
        #[doc = "< Padding"]
        pub padding: [u8; 3usize],
    }
    #[doc = " HdlsNpadAssignmentEntry"]
    #[repr(C)]
    pub struct HiddbgHdlsNpadAssignmentEntry {
        #[doc = "< HdlsHandle"]
        pub HdlsHandle: u64,
        #[doc = "< Unknown"]
        pub unk_x8: u32,
        #[doc = "< Unknown"]
        pub unk_xc: u32,
        #[doc = "< Unknown"]
        pub unk_x10: u64,
        #[doc = "< Unknown"]
        pub unk_x18: u8,
        #[doc = "< Padding"]
        pub pad: [u8; 7usize],
    }
    #[doc = " HdlsNpadAssignment. Same controllers as \\ref HiddbgHdlsStateList, with different entry data."]
    #[repr(C)]
    pub struct HiddbgHdlsNpadAssignment {
        #[doc = "< Total entries for the below entries."]
        pub total_entries: root::s32,
        #[doc = "< Padding"]
        pub pad: u32,
        #[doc = "< \\ref HiddbgHdlsNpadAssignmentEntry"]
        pub entries: [root::HiddbgHdlsNpadAssignmentEntry; 16usize],
    }
    #[doc = " HdlsStateListEntry"]
    #[repr(C)]
    pub struct HiddbgHdlsStateListEntry {
        #[doc = "< HdlsHandle"]
        pub HdlsHandle: u64,
        #[doc = "< \\ref HiddbgHdlsDeviceInfo. With \\ref hiddbgApplyHdlsStateList this is only used when creating new devices."]
        pub device: root::HiddbgHdlsDeviceInfo,
        #[doc = "< \\ref HiddbgHdlsState"]
        pub state: root::HiddbgHdlsState,
    }
    #[doc = " HdlsStateList. This contains a list of all controllers, including non-virtual controllers."]
    #[repr(C)]
    pub struct HiddbgHdlsStateList {
        #[doc = "< Total entries for the below entries."]
        pub total_entries: root::s32,
        #[doc = "< Padding"]
        pub pad: u32,
        #[doc = "< \\ref HiddbgHdlsStateListEntry"]
        pub entries: [root::HiddbgHdlsStateListEntry; 16usize],
    }
    #[doc = " AbstractedPadState"]
    #[repr(C)]
    pub struct HiddbgAbstractedPadState {
        #[doc = "< Type. Converted to HiddbgHdlsDeviceInfo::type internally by \\ref hiddbgSetAutoPilotVirtualPadState. BIT(0) -> BIT(0), BIT(1) -> BIT(15), BIT(2-3) -> BIT(1-2), BIT(4-5) -> BIT(1-2), BIT(6) -> BIT(3). BIT(7-11) -> BIT(11-15), BIT(12-14) -> BIT(12-14), BIT(15) -> BIT(17), BIT(31) -> BIT(21)."]
        pub type_: u32,
        #[doc = "< Flags. Only bit0 is used by \\ref hiddbgSetAutoPilotVirtualPadState: when clear it will skip using the rest of the input and run \\ref hiddbgUnsetAutoPilotVirtualPadState internally."]
        pub flags: u8,
        #[doc = "< Padding"]
        pub pad: [u8; 3usize],
        #[doc = "< RGBA Single Body Color"]
        pub singleColorBody: u32,
        #[doc = "< RGBA Single Buttons Color"]
        pub singleColorButtons: u32,
        #[doc = "< See HiddbgHdlsDeviceInfo::type2."]
        pub type2: u8,
        #[doc = "< Padding"]
        pub pad2: [u8; 3usize],
        #[doc = "< State"]
        pub state: root::HiddbgHdlsState,
        #[doc = "< Unused with \\ref hiddbgSetAutoPilotVirtualPadState. Not set by \\ref hiddbgGetAbstractedPadsState."]
        pub unused: [u8; 96usize],
    }
    extern "C" {
        pub fn hiddbgInitialize() -> root::Result;
    }
    extern "C" {
        pub fn hiddbgExit();
    }
    extern "C" {
        #[doc = " Writes the input RGB colors to the spi-flash for the specified controller (offset 0x6050 size 0x6). See hidsys.h for UniquePadId. Only available with [3.0.0+]."]
        pub fn hiddbgUpdateControllerColor(
            colorBody: u32,
            colorButtons: u32,
            UniquePadId: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Writes the input RGB colors followed by inval to the spi-flash for the specified controller (offset 0x6050 size 0xD). See hidsys.h for UniquePadId. Only available with [5.0.0+]."]
        pub fn hiddbgUpdateDesignInfo(
            colorBody: u32,
            colorButtons: u32,
            colorLeftGrip: u32,
            colorRightGrip: u32,
            inval: u8,
            UniquePadId: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Reads spi-flash for the specified controller. See hidsys.h for UniquePadId."]
        #[doc = " This doesn't seem to be usable?"]
        pub fn hiddbgReadSerialFlash(
            offset: u32,
            buffer: *mut libc::c_void,
            size: root::size_t,
            UniquePadId: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets a list of AbstractedPadHandles, where AbstractedPadHandles is the output array with max entries = count. total_entries is total entries written to the output array. Only available with [5.0.0+]."]
        pub fn hiddbgGetAbstractedPadHandles(
            AbstractedPadHandles: *mut u64,
            count: root::s32,
            total_entries: *mut root::s32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets the state for the specified AbstractedPadHandle. Only available with [5.0.0+]."]
        pub fn hiddbgGetAbstractedPadState(
            AbstractedPadHandle: u64,
            state: *mut root::HiddbgAbstractedPadState,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Similar to \\ref hiddbgGetAbstractedPadHandles except this also returns the state for each pad in output array states. Only available with [5.0.0+]."]
        pub fn hiddbgGetAbstractedPadsState(
            AbstractedPadHandles: *mut u64,
            states: *mut root::HiddbgAbstractedPadState,
            count: root::s32,
            total_entries: *mut root::s32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Sets AutoPilot state for the specified pad."]
        #[doc = " AbstractedVirtualPadId can be any unique value as long as it's within bounds. For example, 0-7 is usable."]
        pub fn hiddbgSetAutoPilotVirtualPadState(
            AbstractedVirtualPadId: root::s8,
            state: *const root::HiddbgAbstractedPadState,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Clears AutoPilot state for the specified pad set by \\ref hiddbgSetAutoPilotVirtualPadState."]
        pub fn hiddbgUnsetAutoPilotVirtualPadState(
            AbstractedVirtualPadId: root::s8,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Clears AutoPilot state for all pads set by \\ref hiddbgSetAutoPilotVirtualPadState."]
        pub fn hiddbgUnsetAllAutoPilotVirtualPadState() -> root::Result;
    }
    extern "C" {
        #[doc = " Initialize Hdls. Hdls is for virtual HID controllers. Only available with [7.0.0+]."]
        pub fn hiddbgAttachHdlsWorkBuffer() -> root::Result;
    }
    extern "C" {
        #[doc = " Exit Hdls, must be called at some point prior to hiddbgExit. Only available with [7.0.0+]."]
        pub fn hiddbgReleaseHdlsWorkBuffer() -> root::Result;
    }
    extern "C" {
        #[doc = " Gets state for \\ref HiddbgHdlsNpadAssignment. Only available with [7.0.0+]."]
        pub fn hiddbgDumpHdlsNpadAssignmentState(
            state: *mut root::HiddbgHdlsNpadAssignment,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets state for \\ref HiddbgHdlsStateList. Only available with [7.0.0+]."]
        pub fn hiddbgDumpHdlsStates(state: *mut root::HiddbgHdlsStateList) -> root::Result;
    }
    extern "C" {
        #[doc = " Sets state for \\ref HiddbgHdlsNpadAssignment. Only available with [7.0.0+]."]
        pub fn hiddbgApplyHdlsNpadAssignmentState(
            state: *const root::HiddbgHdlsNpadAssignment,
            flag: bool,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Sets state for \\ref HiddbgHdlsStateList. Only available with [7.0.0+]."]
        #[doc = " The HiddbgHdlsState will be applied for each HdlsHandle. If a HdlsHandle is not found, code similar to \\ref hiddbgAttachHdlsVirtualDevice will run with the \\ref HiddbgHdlsDeviceInfo, then it will continue with applying state with the new device."]
        pub fn hiddbgApplyHdlsStateList(state: *const root::HiddbgHdlsStateList) -> root::Result;
    }
    extern "C" {
        #[doc = " Attach a device with the input info, where the output handle is written to HdlsHandle. Only available with [7.0.0+]."]
        pub fn hiddbgAttachHdlsVirtualDevice(
            HdlsHandle: *mut u64,
            info: *const root::HiddbgHdlsDeviceInfo,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Detach the specified device. Only available with [7.0.0+]."]
        pub fn hiddbgDetachHdlsVirtualDevice(HdlsHandle: u64) -> root::Result;
    }
    extern "C" {
        #[doc = " Sets state for the specified device. Only available with [7.0.0+]."]
        pub fn hiddbgSetHdlsState(
            HdlsHandle: u64,
            state: *const root::HiddbgHdlsState,
        ) -> root::Result;
    }
    #[doc = " Mini Cycle struct for \\ref HidsysNotificationLedPattern."]
    #[repr(C)]
    pub struct HidsysNotificationLedPatternCycle {
        #[doc = "< Mini Cycle X LED Intensity."]
        pub ledIntensity: u8,
        #[doc = "< Fading Transition Steps to Mini Cycle X (Uses PWM). Value 0x0: Instant. Each step duration is based on HidsysNotificationLedPattern::baseMiniCycleDuration."]
        pub transitionSteps: u8,
        #[doc = "< Final Step Duration Multiplier of Mini Cycle X. Value 0x0: 12.5ms, 0x1 - xF: 1x - 15x. Value is a Multiplier of HidsysNotificationLedPattern::baseMiniCycleDuration."]
        pub finalStepDuration: u8,
        pub pad: u8,
    }
    #[doc = " Structure for \\ref hidsysSetNotificationLedPattern."]
    #[doc = " See also: https://switchbrew.org/wiki/HID_services#NotificationLedPattern"]
    #[doc = " Only the low 4bits of each used byte in this struct is used."]
    #[repr(C)]
    pub struct HidsysNotificationLedPattern {
        #[doc = "< Mini Cycle Base Duration. Value 0x1-0xF: 12.5ms - 187.5ms. Value 0x0 = 0ms/OFF."]
        pub baseMiniCycleDuration: u8,
        #[doc = "< Number of Mini Cycles + 1. Value 0x0-0xF: 1 - 16 mini cycles."]
        pub totalMiniCycles: u8,
        #[doc = "< Number of Full Cycles. Value 0x1-0xF: 1 - 15 full cycles. Value 0x0 is repeat forever, but if baseMiniCycleDuration is set to 0x0, it does the 1st Mini Cycle with a 12.5ms step duration and then the LED stays on with startIntensity."]
        pub totalFullCycles: u8,
        #[doc = "< LED Start Intensity. Value 0x0=0% - 0xF=100%."]
        pub startIntensity: u8,
        #[doc = "< Mini Cycles"]
        pub miniCycles: [root::HidsysNotificationLedPatternCycle; 16usize],
        #[doc = "< Unknown"]
        pub unk_x44: [u8; 2usize],
        #[doc = "< Padding"]
        pub pad_x46: [u8; 2usize],
    }
    extern "C" {
        pub fn hidsysInitialize() -> root::Result;
    }
    extern "C" {
        pub fn hidsysExit();
    }
    extern "C" {
        pub fn hidsysEnableAppletToGetInput(enable: bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Returns an event that fires when the home button is pressed, this will prevent the home menu from opening when the button is pressed. This event does not auto clear."]
        pub fn hidsysAcquireHomeButtonEventHandle(event_out: *mut root::Event) -> root::Result;
    }
    extern "C" {
        pub fn hidsysActivateHomeButton() -> root::Result;
    }
    extern "C" {
        pub fn hidsysActivateSleepButton() -> root::Result;
    }
    extern "C" {
        pub fn hidsysActivateCaptureButton() -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the UniquePadIds for the specified controller."]
        #[doc = " @note Only available on [3.0.0+]."]
        #[doc = " @param id Controller ID. Must not be CONTROLLER_P1_AUTO."]
        #[doc = " @param UniquePadIds Output array of UniquePadIds."]
        #[doc = " @param Max number of entries for the UniquePadIds array."]
        #[doc = " @param total_entries Total output array entries. Optional, can be NULL."]
        pub fn hidsysGetUniquePadsFromNpad(
            id: root::HidControllerID,
            UniquePadIds: *mut u64,
            count: root::size_t,
            total_entries: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets a list of all UniquePadIds."]
        #[doc = " @param UniquePadIds Output array of UniquePadIds."]
        #[doc = " @param Max number of entries for the UniquePadIds array."]
        #[doc = " @param total_entries Total output array entries. Optional, can be NULL."]
        pub fn hidsysGetUniquePadIds(
            UniquePadIds: *mut u64,
            count: root::size_t,
            total_entries: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the HOME-button notification LED pattern, for the specified controller."]
        #[doc = " @param pattern \\ref HidsysNotificationLedPattern"]
        #[doc = " @param UniquePadId UniquePadId for the controller."]
        pub fn hidsysSetNotificationLedPattern(
            pattern: *const root::HidsysNotificationLedPattern,
            UniquePadId: u64,
        ) -> root::Result;
    }
    #[repr(C, packed)]
    pub struct IrsPackedMomentProcessorConfig {
        pub unk_x0: u64,
        pub unk_x8: u8,
        pub unk_x9: u8,
        pub unk_xa: u8,
        pub pad: [u8; 5usize],
        pub unk_x10: u16,
        pub unk_x12: u32,
        pub unk_x16: u16,
        pub unk_constant: u32,
        pub unk_x1c: u8,
        pub unk_x1d: u8,
        pub pad2: [u8; 2usize],
    }
    #[repr(C)]
    pub struct IrsImageTransferProcessorConfig {
        #[doc = "< IR Sensor exposure time in nanoseconds."]
        pub exposure: u64,
        #[doc = "< Controls the IR leds. 0: All leds, 1: Bright group, 2: Dim group, 3: None."]
        pub ir_leds: u32,
        #[doc = "< IR sensor signal's digital gain."]
        pub digital_gain: u32,
        #[doc = "< Inverts the colors of the captured image. 0: Normal image, 1: Negative image."]
        pub color_invert: u8,
        pub pad: [u8; 7usize],
        #[doc = "< IR Sensor resolution. 0: 240x320, 1: 120x160, 2: 60x80."]
        pub sensor_res: u32,
    }
    #[repr(C)]
    pub struct IrsPackedImageTransferProcessorConfig {
        #[doc = "< IR Sensor exposure time in nanoseconds."]
        pub exposure: u64,
        #[doc = "< Controls the IR leds. 0: All leds, 1: Bright group, 2: Dim group, 3: None."]
        pub ir_leds: u8,
        #[doc = "< IR sensor signal's digital gain."]
        pub digital_gain: u8,
        #[doc = "< Inverts the colors of the captured image. 0: Normal image, 1: Negative image."]
        pub color_invert: u8,
        pub pad: [u8; 5usize],
        pub unk_constant: u32,
        #[doc = "< IR Sensor resolution. 0: 240x320, 1: 120x160, 2: 60x80."]
        pub sensor_res: u8,
        pub pad2: [u8; 3usize],
    }
    #[repr(C, packed)]
    pub struct IrsImageTransferProcessorState {
        pub unk_x0: [u8; 16usize],
    }
    extern "C" {
        #[doc = " Initialize irs."]
        pub fn irsInitialize() -> root::Result;
    }
    extern "C" {
        #[doc = " Exit irs."]
        pub fn irsExit();
    }
    extern "C" {
        pub fn irsGetSessionService() -> *mut root::Service;
    }
    extern "C" {
        pub fn irsGetSharedmemAddr() -> *mut libc::c_void;
    }
    extern "C" {
        #[doc = " (De)activate the IR sensor, this is automatically used by \\ref irsExit. Must be called after irsInitialize() to activate the IR sensor."]
        pub fn irsActivateIrsensor(activate: bool) -> root::Result;
    }
    extern "C" {
        pub fn irsGetIrCameraHandle(
            IrCameraHandle: *mut u32,
            id: root::HidControllerID,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Start ImageTransferProcessor."]
        #[doc = " @param[in] IrCameraHandle Camera handle."]
        #[doc = " @param[in] config Input config."]
        #[doc = " @param[in] size Work-buffer size, must be 0x1000-byte aligned."]
        #[doc = " @note Do not use if already started."]
        pub fn irsRunImageTransferProcessor(
            IrCameraHandle: u32,
            config: *mut root::IrsImageTransferProcessorConfig,
            size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn irsGetImageTransferProcessorState(
            IrCameraHandle: u32,
            buffer: *mut libc::c_void,
            size: root::size_t,
            state: *mut root::IrsImageTransferProcessorState,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Stop ImageTransferProcessor. Do not use if already stopped."]
        #[doc = " \\ref irsExit calls this with all IrCameraHandles which were not already used with \\ref irsStopImageProcessor."]
        pub fn irsStopImageProcessor(IrCameraHandle: u32) -> root::Result;
    }
    extern "C" {
        #[doc = " \"Suspend\" ImageTransferProcessor."]
        #[doc = " TODO: What does this really do?"]
        pub fn irsSuspendImageProcessor(IrCameraHandle: u32) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets the default configuration for Image Transfer mode."]
        #[doc = " Defaults are exposure 300us, IR LEDs all ON, 8x digital gain, normal image and resolution 240 x 320."]
        pub fn irsGetDefaultImageTransferProcessorConfig(
            config: *mut root::IrsImageTransferProcessorConfig,
        );
    }
    #[doc = "< Japan, US and Europe"]
    pub const PlSharedFontType_PlSharedFontType_Standard: root::PlSharedFontType = 0;
    #[doc = "< Chinese Simplified"]
    pub const PlSharedFontType_PlSharedFontType_ChineseSimplified: root::PlSharedFontType = 1;
    #[doc = "< Extended Chinese Simplified"]
    pub const PlSharedFontType_PlSharedFontType_ExtChineseSimplified: root::PlSharedFontType = 2;
    #[doc = "< Chinese Traditional"]
    pub const PlSharedFontType_PlSharedFontType_ChineseTraditional: root::PlSharedFontType = 3;
    #[doc = "< Korean (Hangul)"]
    pub const PlSharedFontType_PlSharedFontType_KO: root::PlSharedFontType = 4;
    #[doc = "< Nintendo Extended. This font only has the special Nintendo-specific characters, which aren't available with the other fonts."]
    pub const PlSharedFontType_PlSharedFontType_NintendoExt: root::PlSharedFontType = 5;
    #[doc = "< Total fonts supported by this enum."]
    pub const PlSharedFontType_PlSharedFontType_Total: root::PlSharedFontType = 6;
    pub type PlSharedFontType = u32;
    #[repr(C)]
    pub struct PlFontData {
        pub type_: u32,
        pub offset: u32,
        pub size: u32,
        pub address: *mut libc::c_void,
    }
    extern "C" {
        pub fn plInitialize() -> root::Result;
    }
    extern "C" {
        pub fn plExit();
    }
    extern "C" {
        pub fn plGetSharedmemAddr() -> *mut libc::c_void;
    }
    extern "C" {
        pub fn plGetSharedFontByType(
            font: *mut root::PlFontData,
            SharedFontType: u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn plGetSharedFont(
            LanguageCode: u64,
            fonts: *mut root::PlFontData,
            max_fonts: root::size_t,
            total_fonts: *mut root::size_t,
        ) -> root::Result;
    }
    #[doc = "< Initializes nifm:u."]
    pub const NifmServiceType_NifmServiceType_NotInitialized: root::NifmServiceType = 0;
    #[doc = "< Initializes nifm:u."]
    pub const NifmServiceType_NifmServiceType_User: root::NifmServiceType = 1;
    #[doc = "< Initializes nifm:s."]
    pub const NifmServiceType_NifmServiceType_System: root::NifmServiceType = 2;
    #[doc = "< Initializes nifm:a."]
    pub const NifmServiceType_NifmServiceType_Admin: root::NifmServiceType = 3;
    pub type NifmServiceType = u32;
    #[doc = "< Wi-Fi connection is used."]
    pub const NifmInternetConnectionType_NifmInternetConnectionType_WiFi:
        root::NifmInternetConnectionType = 1;
    #[doc = "< Ethernet connection is used."]
    pub const NifmInternetConnectionType_NifmInternetConnectionType_Ethernet:
        root::NifmInternetConnectionType = 2;
    pub type NifmInternetConnectionType = u32;
    #[doc = "< Unknown internet connection status 1."]
    pub const NifmInternetConnectionStatus_NifmInternetConnectionStatus_ConnectingUnknown1:
        root::NifmInternetConnectionStatus = 0;
    #[doc = "< Unknown internet connection status 2."]
    pub const NifmInternetConnectionStatus_NifmInternetConnectionStatus_ConnectingUnknown2:
        root::NifmInternetConnectionStatus = 1;
    #[doc = "< Unknown internet connection status 3 (conntest?)."]
    pub const NifmInternetConnectionStatus_NifmInternetConnectionStatus_ConnectingUnknown3:
        root::NifmInternetConnectionStatus = 2;
    #[doc = "< Unknown internet connection status 4."]
    pub const NifmInternetConnectionStatus_NifmInternetConnectionStatus_ConnectingUnknown4:
        root::NifmInternetConnectionStatus = 3;
    #[doc = "< Internet is connected."]
    pub const NifmInternetConnectionStatus_NifmInternetConnectionStatus_Connected:
        root::NifmInternetConnectionStatus = 4;
    pub type NifmInternetConnectionStatus = u32;
    extern "C" {
        #[doc = " @brief Sets the \\ref NifmServiceType for initialization. Call this function before \\ref nifmInitialize."]
        #[doc = " @note By default nifm:u will be used."]
        pub fn nifmSetServiceType(serviceType: root::NifmServiceType);
    }
    extern "C" {
        pub fn nifmInitialize() -> root::Result;
    }
    extern "C" {
        pub fn nifmExit();
    }
    extern "C" {
        pub fn nifmGetCurrentIpAddress(out: *mut u32) -> root::Result;
    }
    extern "C" {
        pub fn nifmIsWirelessCommunicationEnabled(out: *mut bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @note Works only if called from nifm:a or nifm:s."]
        pub fn nifmSetWirelessCommunicationEnabled(enable: bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @note Will fail with 0xd46ed if Internet is neither connecting or connected (airplane mode or no known network in reach)."]
        #[doc = " @param wifiStrength Strength of the Wi-Fi signal in number of bars from 0 to 3."]
        pub fn nifmGetInternetConnectionStatus(
            connectionType: *mut root::NifmInternetConnectionType,
            wifiStrength: *mut u32,
            connectionStatus: *mut root::NifmInternetConnectionStatus,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nifmIsEthernetCommunicationEnabled(out: *mut bool) -> root::Result;
    }
    extern "C" {
        pub fn nifmIsAnyForegroundRequestAccepted(out: *mut bool) -> root::Result;
    }
    extern "C" {
        pub fn nifmPutToSleep() -> root::Result;
    }
    extern "C" {
        pub fn nifmWakeUp() -> root::Result;
    }
    #[repr(C)]
    pub struct NsApplicationControlData {
        pub nacp: root::NacpStruct,
        pub icon: [u8; 131072usize],
    }
    #[repr(C)]
    pub struct NsApplicationContentMetaStatus {
        pub title_type: u8,
        pub storageID: u8,
        pub unk_x02: u8,
        pub padding: u8,
        pub title_version: u32,
        pub titleID: u64,
    }
    #[repr(C)]
    pub struct NsApplicationRecord {
        pub titleID: u64,
        pub type_: u8,
        pub unk_x09: u8,
        pub unk_x0A: [u8; 6usize],
        pub unk_x10: u8,
        pub unk_x11: [u8; 7usize],
    }
    #[repr(C)]
    pub struct NsLaunchProperties {
        pub titleID: u64,
        pub version: u32,
        pub storageID: u8,
        pub index: u8,
        pub is_application: u8,
    }
    pub const NsShellEvent_NsShellEvent_None: root::NsShellEvent = 0;
    pub const NsShellEvent_NsShellEvent_Exit: root::NsShellEvent = 1;
    pub const NsShellEvent_NsShellEvent_Start: root::NsShellEvent = 2;
    pub const NsShellEvent_NsShellEvent_Crash: root::NsShellEvent = 3;
    pub const NsShellEvent_NsShellEvent_Debug: root::NsShellEvent = 4;
    pub type NsShellEvent = u32;
    #[repr(C)]
    pub struct NsShellEventInfo {
        pub event: root::NsShellEvent,
        pub process_id: u64,
    }
    extern "C" {
        pub fn nsInitialize() -> root::Result;
    }
    extern "C" {
        pub fn nsExit();
    }
    extern "C" {
        pub fn nsListApplicationRecord(
            buffer: *mut root::NsApplicationRecord,
            size: root::size_t,
            entry_offset: root::size_t,
            out_entrycount: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nsListApplicationContentMetaStatus(
            titleID: u64,
            index: u32,
            buffer: *mut root::NsApplicationContentMetaStatus,
            size: root::size_t,
            out_entrycount: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nsGetApplicationControlData(
            flag: u8,
            titleID: u64,
            buffer: *mut root::NsApplicationControlData,
            size: root::size_t,
            actual_size: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Returns the total storage capacity (used + free) from content manager services."]
        #[doc = " @param storage_id Specified FsStorageId. (Must be FsStorageId_SdCard)"]
        #[doc = " @param size Pointer to output the total storage size to."]
        pub fn nsGetTotalSpaceSize(
            storage_id: root::FsStorageId,
            size: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Returns the available storage capacity from content manager services."]
        #[doc = " @param storage_id Specified FsStorageId. (Must be FsStorageId_SdCard)"]
        #[doc = " @param size Pointer to output the free storage size to."]
        pub fn nsGetFreeSpaceSize(
            storage_id: root::FsStorageId,
            size: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nsvmInitialize() -> root::Result;
    }
    extern "C" {
        pub fn nsvmExit();
    }
    extern "C" {
        pub fn nsvmNeedsUpdateVulnerability(out: *mut bool) -> root::Result;
    }
    extern "C" {
        pub fn nsvmGetSafeSystemVersion(out: *mut u16) -> root::Result;
    }
    extern "C" {
        pub fn nsdevInitialize() -> root::Result;
    }
    extern "C" {
        pub fn nsdevExit();
    }
    extern "C" {
        pub fn nsdevLaunchProgram(
            out_pid: *mut u64,
            properties: *const root::NsLaunchProperties,
            flags: u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nsdevTerminateProcess(pid: u64) -> root::Result;
    }
    extern "C" {
        pub fn nsdevTerminateProgram(tid: u64) -> root::Result;
    }
    extern "C" {
        pub fn nsdevGetShellEvent(out: *mut root::Event) -> root::Result;
    }
    extern "C" {
        pub fn nsdevGetShellEventInfo(out: *mut root::NsShellEventInfo) -> root::Result;
    }
    extern "C" {
        pub fn nsdevTerminateApplication() -> root::Result;
    }
    extern "C" {
        pub fn nsdevPrepareLaunchProgramFromHost(
            out: *mut root::NsLaunchProperties,
            path: *const libc::c_char,
            path_len: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nsdevLaunchApplication(
            out_pid: *mut u64,
            app_title_id: u64,
            flags: u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nsdevLaunchApplicationWithStorageId(
            out_pid: *mut u64,
            app_title_id: u64,
            flags: u32,
            app_storage_id: u8,
            patch_storage_id: u8,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nsdevIsSystemMemoryResourceLimitBoosted(out: *mut bool) -> root::Result;
    }
    extern "C" {
        pub fn nsdevGetRunningApplicationProcessId(out_pid: *mut u64) -> root::Result;
    }
    extern "C" {
        pub fn nsdevSetCurrentApplicationRightsEnvironmentCanBeActive(
            can_be_active: bool,
        ) -> root::Result;
    }
    #[repr(C)]
    pub struct LoaderProgramInfo {
        pub main_thread_priority: u8,
        pub default_cpu_id: u8,
        pub application_type: u16,
        pub main_thread_stack_size: u32,
        pub title_id: u64,
        pub acid_sac_size: u32,
        pub aci0_sac_size: u32,
        pub acid_fac_size: u32,
        pub aci0_fah_size: u32,
        pub ac_buffer: [u8; 992usize],
    }
    #[repr(C)]
    pub struct LoaderModuleInfo {
        pub build_id: [u8; 32usize],
        pub base_address: u64,
        pub size: u64,
    }
    extern "C" {
        pub fn ldrShellInitialize() -> root::Result;
    }
    extern "C" {
        pub fn ldrShellExit();
    }
    extern "C" {
        pub fn ldrShellGetServiceSession() -> *mut root::Service;
    }
    extern "C" {
        pub fn ldrDmntInitialize() -> root::Result;
    }
    extern "C" {
        pub fn ldrDmntExit();
    }
    extern "C" {
        pub fn ldrDmntGetServiceSession() -> *mut root::Service;
    }
    extern "C" {
        pub fn ldrPmInitialize() -> root::Result;
    }
    extern "C" {
        pub fn ldrPmExit();
    }
    extern "C" {
        pub fn ldrPmGetServiceSession() -> *mut root::Service;
    }
    extern "C" {
        pub fn ldrShellAddTitleToLaunchQueue(
            tid: u64,
            args: *const libc::c_void,
            args_size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ldrShellClearLaunchQueue() -> root::Result;
    }
    extern "C" {
        pub fn ldrDmntAddTitleToLaunchQueue(
            tid: u64,
            args: *const libc::c_void,
            args_size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ldrDmntClearLaunchQueue() -> root::Result;
    }
    extern "C" {
        pub fn ldrDmntGetModuleInfos(
            pid: u64,
            out_module_infos: *mut root::LoaderModuleInfo,
            max_out_modules: root::size_t,
            num_out: *mut u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ldrPmCreateProcess(
            flags: u64,
            launch_index: u64,
            reslimit_h: root::Handle,
            out_process_h: *mut root::Handle,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ldrPmGetProgramInfo(
            title_id: u64,
            storage_id: root::FsStorageId,
            out_program_info: *mut root::LoaderProgramInfo,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ldrPmRegisterTitle(
            title_id: u64,
            storage_id: root::FsStorageId,
            out_index: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ldrPmUnregisterTitle(launch_index: u64) -> root::Result;
    }
    extern "C" {
        pub fn ldrRoInitialize() -> root::Result;
    }
    extern "C" {
        pub fn ldrRoExit();
    }
    extern "C" {
        pub fn ro1Initialize() -> root::Result;
    }
    extern "C" {
        pub fn ro1Exit();
    }
    extern "C" {
        pub fn roDmntInitialize() -> root::Result;
    }
    extern "C" {
        pub fn roDmntExit();
    }
    extern "C" {
        pub fn ldrRoLoadNro(
            out_address: *mut u64,
            nro_address: u64,
            nro_size: u64,
            bss_address: u64,
            bss_size: u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ldrRoUnloadNro(nro_address: u64) -> root::Result;
    }
    extern "C" {
        pub fn ldrRoLoadNrr(nrr_address: u64, nrr_size: u64) -> root::Result;
    }
    extern "C" {
        pub fn ldrRoUnloadNrr(nrr_address: u64) -> root::Result;
    }
    extern "C" {
        pub fn ldrRoLoadNrrEx(nrr_address: u64, nrr_size: u64) -> root::Result;
    }
    extern "C" {
        pub fn ro1LoadNro(
            out_address: *mut u64,
            nro_address: u64,
            nro_size: u64,
            bss_address: u64,
            bss_size: u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ro1UnloadNro(nro_address: u64) -> root::Result;
    }
    extern "C" {
        pub fn ro1LoadNrr(nrr_address: u64, nrr_size: u64) -> root::Result;
    }
    extern "C" {
        pub fn ro1UnloadNrr(nrr_address: u64) -> root::Result;
    }
    extern "C" {
        pub fn ro1LoadNrrEx(nrr_address: u64, nrr_size: u64) -> root::Result;
    }
    extern "C" {
        pub fn roDmntGetModuleInfos(
            pid: u64,
            out_module_infos: *mut root::LoaderModuleInfo,
            max_out_modules: root::size_t,
            num_out: *mut u32,
        ) -> root::Result;
    }
    pub const PmLaunchFlag_PmLaunchFlag_None: root::PmLaunchFlag = 0;
    pub const PmLaunchFlag_PmLaunchFlag_SignalOnExit: root::PmLaunchFlag = 1;
    pub const PmLaunchFlag_PmLaunchFlag_SignalOnStart: root::PmLaunchFlag = 2;
    pub const PmLaunchFlag_PmLaunchFlag_SignalOnCrash: root::PmLaunchFlag = 4;
    pub const PmLaunchFlag_PmLaunchFlag_SignalOnDebug: root::PmLaunchFlag = 8;
    pub const PmLaunchFlag_PmLaunchFlag_StartSuspended: root::PmLaunchFlag = 16;
    pub const PmLaunchFlag_PmLaunchFlag_DisableAslr: root::PmLaunchFlag = 32;
    pub const PmLaunchFlag_PmLaunchFlagOld_SignalOnExit: root::PmLaunchFlag = 1;
    pub const PmLaunchFlag_PmLaunchFlagOld_StartSuspended: root::PmLaunchFlag = 2;
    pub const PmLaunchFlag_PmLaunchFlagOld_SignalOnCrash: root::PmLaunchFlag = 4;
    pub const PmLaunchFlag_PmLaunchFlagOld_DisableAslr: root::PmLaunchFlag = 8;
    pub const PmLaunchFlag_PmLaunchFlagOld_SignalOnDebug: root::PmLaunchFlag = 16;
    pub const PmLaunchFlag_PmLaunchFlagOld_SignalOnStart: root::PmLaunchFlag = 32;
    pub type PmLaunchFlag = u32;
    pub const PmProcessEvent_PmProcessEvent_None: root::PmProcessEvent = 0;
    pub const PmProcessEvent_PmProcessEvent_Exit: root::PmProcessEvent = 1;
    pub const PmProcessEvent_PmProcessEvent_Start: root::PmProcessEvent = 2;
    pub const PmProcessEvent_PmProcessEvent_Crash: root::PmProcessEvent = 3;
    pub const PmProcessEvent_PmProcessEvent_DebugStart: root::PmProcessEvent = 4;
    pub const PmProcessEvent_PmProcessEvent_DebugBreak: root::PmProcessEvent = 5;
    pub type PmProcessEvent = u32;
    #[repr(C)]
    pub struct PmProcessEventInfo {
        pub event: root::PmProcessEvent,
        pub process_id: u64,
    }
    pub const PmBootMode_PmBootMode_Normal: root::PmBootMode = 0;
    pub const PmBootMode_PmBootMode_Maintenance: root::PmBootMode = 1;
    pub const PmBootMode_PmBootMode_SafeMode: root::PmBootMode = 2;
    pub type PmBootMode = u32;
    extern "C" {
        pub fn pmdmntInitialize() -> root::Result;
    }
    extern "C" {
        pub fn pmdmntExit();
    }
    extern "C" {
        pub fn pmdmntGetServiceSession() -> *mut root::Service;
    }
    extern "C" {
        pub fn pminfoInitialize() -> root::Result;
    }
    extern "C" {
        pub fn pminfoExit();
    }
    extern "C" {
        pub fn pminfoGetServiceSession() -> *mut root::Service;
    }
    extern "C" {
        pub fn pmshellInitialize() -> root::Result;
    }
    extern "C" {
        pub fn pmshellExit();
    }
    extern "C" {
        pub fn pmshellGetServiceSession() -> *mut root::Service;
    }
    extern "C" {
        pub fn pmbmInitialize() -> root::Result;
    }
    extern "C" {
        pub fn pmbmExit();
    }
    extern "C" {
        pub fn pmbmGetServiceSession() -> *mut root::Service;
    }
    extern "C" {
        pub fn pmdmntGetDebugProcesses(
            out_count: *mut u32,
            out_pids: *mut u64,
            max_pids: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn pmdmntStartProcess(pid: u64) -> root::Result;
    }
    extern "C" {
        pub fn pmdmntGetTitlePid(pid_out: *mut u64, title_id: u64) -> root::Result;
    }
    extern "C" {
        pub fn pmdmntEnableDebugForTitleId(
            handle_out: *mut root::Handle,
            title_id: u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn pmdmntGetApplicationPid(pid_out: *mut u64) -> root::Result;
    }
    extern "C" {
        pub fn pmdmntEnableDebugForApplication(handle_out: *mut root::Handle) -> root::Result;
    }
    extern "C" {
        pub fn pmdmntDisableDebug() -> root::Result;
    }
    extern "C" {
        pub fn pminfoGetTitleId(title_id_out: *mut u64, pid: u64) -> root::Result;
    }
    extern "C" {
        pub fn pmshellLaunchProcess(
            launch_flags: u32,
            titleID: u64,
            storageID: u64,
            pid: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn pmshellTerminateProcessByProcessId(processID: u64) -> root::Result;
    }
    extern "C" {
        pub fn pmshellTerminateProcessByTitleId(titleID: u64) -> root::Result;
    }
    extern "C" {
        pub fn pmshellGetProcessEvent(out: *mut root::Event) -> root::Result;
    }
    extern "C" {
        pub fn pmshellGetProcessEventInfo(out: *mut root::PmProcessEventInfo) -> root::Result;
    }
    extern "C" {
        pub fn pmshellFinalizeDeadProcess(pid: u64) -> root::Result;
    }
    extern "C" {
        pub fn pmshellClearProcessExceptionOccurred(pid: u64) -> root::Result;
    }
    extern "C" {
        pub fn pmshellNotifyBootFinished() -> root::Result;
    }
    extern "C" {
        pub fn pmshellGetApplicationPid(pid_out: *mut u64) -> root::Result;
    }
    extern "C" {
        pub fn pmshellBoostSystemMemoryResourceLimit(boost_size: u64) -> root::Result;
    }
    extern "C" {
        pub fn pmshellBoostSystemThreadResourceLimit() -> root::Result;
    }
    extern "C" {
        pub fn pmbmGetBootMode(out: *mut root::PmBootMode) -> root::Result;
    }
    extern "C" {
        pub fn pmbmSetMaintenanceBoot() -> root::Result;
    }
    pub const ColorSetId_ColorSetId_Light: root::ColorSetId = 0;
    pub const ColorSetId_ColorSetId_Dark: root::ColorSetId = 1;
    pub type ColorSetId = u32;
    #[doc = "< Japanese"]
    pub const SetLanguage_SetLanguage_JA: root::SetLanguage = 0;
    #[doc = "< US English (\"AmericanEnglish\")"]
    pub const SetLanguage_SetLanguage_ENUS: root::SetLanguage = 1;
    #[doc = "< French"]
    pub const SetLanguage_SetLanguage_FR: root::SetLanguage = 2;
    #[doc = "< German"]
    pub const SetLanguage_SetLanguage_DE: root::SetLanguage = 3;
    #[doc = "< Italian"]
    pub const SetLanguage_SetLanguage_IT: root::SetLanguage = 4;
    #[doc = "< Spanish"]
    pub const SetLanguage_SetLanguage_ES: root::SetLanguage = 5;
    #[doc = "< Simplified Chinese (\"Chinese\")"]
    pub const SetLanguage_SetLanguage_ZHCN: root::SetLanguage = 6;
    #[doc = "< Korean"]
    pub const SetLanguage_SetLanguage_KO: root::SetLanguage = 7;
    #[doc = "< Dutch"]
    pub const SetLanguage_SetLanguage_NL: root::SetLanguage = 8;
    #[doc = "< Portuguese"]
    pub const SetLanguage_SetLanguage_PT: root::SetLanguage = 9;
    #[doc = "< Russian"]
    pub const SetLanguage_SetLanguage_RU: root::SetLanguage = 10;
    #[doc = "< Traditional Chinese (\"Taiwanese\")"]
    pub const SetLanguage_SetLanguage_ZHTW: root::SetLanguage = 11;
    #[doc = "< GB English (\"BritishEnglish\")"]
    pub const SetLanguage_SetLanguage_ENGB: root::SetLanguage = 12;
    #[doc = "< CA French (\"CanadianFrench\")"]
    pub const SetLanguage_SetLanguage_FRCA: root::SetLanguage = 13;
    #[doc = "< \"LatinAmericanSpanish\""]
    pub const SetLanguage_SetLanguage_ES419: root::SetLanguage = 14;
    #[doc = "< Total languages supported by this enum."]
    pub const SetLanguage_SetLanguage_Total: root::SetLanguage = 15;
    #[doc = " IDs for Language."]
    pub type SetLanguage = u32;
    #[doc = "< Japan"]
    pub const SetRegion_SetRegion_JPN: root::SetRegion = 0;
    #[doc = "< The Americas"]
    pub const SetRegion_SetRegion_USA: root::SetRegion = 1;
    #[doc = "< Europe"]
    pub const SetRegion_SetRegion_EUR: root::SetRegion = 2;
    #[doc = "< Australia/New Zealand"]
    pub const SetRegion_SetRegion_AUS: root::SetRegion = 3;
    #[doc = " Region codes."]
    pub type SetRegion = u32;
    pub const SetSysFlag_SetSysFlag_LockScreen: root::SetSysFlag = 7;
    pub const SetSysFlag_SetSysFlag_ConsoleInformationUpload: root::SetSysFlag = 25;
    pub const SetSysFlag_SetSysFlag_AutomaticApplicationDownload: root::SetSysFlag = 27;
    pub const SetSysFlag_SetSysFlag_Quest: root::SetSysFlag = 47;
    pub const SetSysFlag_SetSysFlag_Usb30Enable: root::SetSysFlag = 65;
    pub const SetSysFlag_SetSysFlag_NfcEnable: root::SetSysFlag = 69;
    pub const SetSysFlag_SetSysFlag_WirelessLanEnable: root::SetSysFlag = 73;
    pub const SetSysFlag_SetSysFlag_BluetoothEnable: root::SetSysFlag = 88;
    pub const SetSysFlag_SetSysFlag_AutoUpdateEnable: root::SetSysFlag = 95;
    pub const SetSysFlag_SetSysFlag_BatteryPercentage: root::SetSysFlag = 99;
    pub const SetSysFlag_SetSysFlag_ExternalRtcReset: root::SetSysFlag = 101;
    pub const SetSysFlag_SetSysFlag_UsbFullKeyEnable: root::SetSysFlag = 103;
    pub const SetSysFlag_SetSysFlag_BluetoothAfhEnable: root::SetSysFlag = 111;
    pub const SetSysFlag_SetSysFlag_BluetoothBoostEnable: root::SetSysFlag = 113;
    pub const SetSysFlag_SetSysFlag_InRepairProcessEnable: root::SetSysFlag = 115;
    pub const SetSysFlag_SetSysFlag_HeadphoneVolumeUpdate: root::SetSysFlag = 117;
    pub const SetSysFlag_SetSysFlag_RequiresRunRepairTimeReviser: root::SetSysFlag = 141;
    #[doc = " Command IDs for setsysGetFlag/setsysSetFlag."]
    pub type SetSysFlag = u32;
    #[doc = " Structure returned by \\ref setsysGetFirmwareVersion"]
    #[repr(C)]
    pub struct SetSysFirmwareVersion {
        pub major: u8,
        pub minor: u8,
        pub micro: u8,
        pub padding1: u8,
        pub revision_major: u8,
        pub revision_minor: u8,
        pub padding2: u8,
        pub padding3: u8,
        pub platform: [libc::c_char; 32usize],
        pub version_hash: [libc::c_char; 64usize],
        pub display_version: [libc::c_char; 24usize],
        pub display_title: [libc::c_char; 128usize],
    }
    extern "C" {
        pub fn setInitialize() -> root::Result;
    }
    extern "C" {
        pub fn setExit();
    }
    extern "C" {
        #[doc = " Converts LanguageCode to Language."]
        pub fn setMakeLanguage(LanguageCode: u64, Language: *mut root::s32) -> root::Result;
    }
    extern "C" {
        #[doc = " Converts Language to LanguageCode."]
        pub fn setMakeLanguageCode(
            Language: root::s32,
            LanguageCode: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets the current system LanguageCode."]
        #[doc = " Normally this should be used instead of \\ref setGetLanguageCode."]
        #[doc = " LanguageCode is a string, see here: https://switchbrew.org/wiki/Settings_services#LanguageCode"]
        pub fn setGetSystemLanguage(LanguageCode: *mut u64) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets the current LanguageCode, \\ref setGetSystemLanguage should be used instead normally."]
        pub fn setGetLanguageCode(LanguageCode: *mut u64) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets available LanguageCodes."]
        #[doc = " On system-version <4.0.0, max_entries is set to the output from \\ref setGetAvailableLanguageCodeCount if max_entries is larger than that."]
        pub fn setGetAvailableLanguageCodes(
            total_entries: *mut root::s32,
            LanguageCodes: *mut u64,
            max_entries: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets total available LanguageCodes."]
        #[doc = " Output total is overridden with value 0 if the total is <0."]
        pub fn setGetAvailableLanguageCodeCount(total: *mut root::s32) -> root::Result;
    }
    extern "C" {
        #[doc = " Gets the RegionCode."]
        pub fn setGetRegionCode(out: *mut root::SetRegion) -> root::Result;
    }
    extern "C" {
        pub fn setsysInitialize() -> root::Result;
    }
    extern "C" {
        pub fn setsysExit();
    }
    extern "C" {
        #[doc = " Gets the current system theme."]
        pub fn setsysGetColorSetId(out: *mut root::ColorSetId) -> root::Result;
    }
    extern "C" {
        #[doc = " Sets the current system theme."]
        pub fn setsysSetColorSetId(id: root::ColorSetId) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the size of a settings item value."]
        #[doc = " @param name Name string."]
        #[doc = " @param item_key Item key string."]
        #[doc = " @param size_out Pointer to output the size to."]
        pub fn setsysGetSettingsItemValueSize(
            name: *const libc::c_char,
            item_key: *const libc::c_char,
            size_out: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the value of a settings item."]
        #[doc = " @param name Name string."]
        #[doc = " @param item_key Item key string."]
        #[doc = " @param value_out Pointer to output the value to."]
        #[doc = " @param value_out_size Size of the value_out buffer."]
        pub fn setsysGetSettingsItemValue(
            name: *const libc::c_char,
            item_key: *const libc::c_char,
            value_out: *mut libc::c_void,
            value_out_size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the system's serial number."]
        #[doc = " @param serial Pointer to output the serial to. (The buffer size needs to be at least 0x19 bytes)"]
        pub fn setsysGetSerialNumber(serial: *mut libc::c_char) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the status of the specified settings flag."]
        #[doc = " @param flag The specified settings flag."]
        #[doc = " @param out Output pointer for the status."]
        pub fn setsysGetFlag(flag: root::SetSysFlag, out: *mut bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Enables/disables the specified settings flag."]
        #[doc = " @param flag The specified settings flag."]
        #[doc = " @param enable To enable/disable the flag."]
        pub fn setsysSetFlag(flag: root::SetSysFlag, enable: bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the system firmware version."]
        #[doc = " @param out Firmware version to populate."]
        pub fn setsysGetFirmwareVersion(out: *mut root::SetSysFirmwareVersion) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets an event that settings will signal on flag change."]
        #[doc = " @param out Event to bind. Output event will have autoclear=false."]
        pub fn setsysBindFatalDirtyFlagEvent(out: *mut root::Event) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the settings flags that have changed."]
        #[doc = " @param flags_0 Pointer to populate with first 64 flags."]
        #[doc = " @param flags_1 Pointer to populate with second 64 flags."]
        pub fn setsysGetFatalDirtyFlags(
            flags_0: *mut u64,
            flags_1: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Gets the system's nickname."]
        #[doc = " @param nickname Pointer to output the nickname to. (The buffer size needs to be at least 0x80 bytes)"]
        pub fn setsysGetDeviceNickname(nickname: *mut libc::c_char) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the system's nickname."]
        #[doc = " @param nickname Pointer to read the nickname from."]
        pub fn setsysSetDeviceNickname(nickname: *const libc::c_char) -> root::Result;
    }
    pub const NcmContentType_NcmContentType_CNMT: root::NcmContentType = 0;
    pub const NcmContentType_NcmContentType_Program: root::NcmContentType = 1;
    pub const NcmContentType_NcmContentType_Data: root::NcmContentType = 2;
    pub const NcmContentType_NcmContentType_Icon: root::NcmContentType = 3;
    pub const NcmContentType_NcmContentType_Doc: root::NcmContentType = 4;
    pub const NcmContentType_NcmContentType_Info: root::NcmContentType = 5;
    pub type NcmContentType = u32;
    pub const NcmContentMetaType_NcmContentMetaType_SystemProgram: root::NcmContentMetaType = 1;
    pub const NcmContentMetaType_NcmContentMetaType_SystemData: root::NcmContentMetaType = 2;
    pub const NcmContentMetaType_NcmContentMetaType_SystemUpdate: root::NcmContentMetaType = 3;
    pub const NcmContentMetaType_NcmContentMetaType_BootImagePackage: root::NcmContentMetaType = 4;
    pub const NcmContentMetaType_NcmContentMetaType_BootImagePackageSafe: root::NcmContentMetaType =
        5;
    pub const NcmContentMetaType_NcmContentMetaType_Application: root::NcmContentMetaType = 128;
    pub const NcmContentMetaType_NcmContentMetaType_Patch: root::NcmContentMetaType = 129;
    pub const NcmContentMetaType_NcmContentMetaType_AddOnContent: root::NcmContentMetaType = 130;
    pub const NcmContentMetaType_NcmContentMetaType_Delta: root::NcmContentMetaType = 131;
    pub type NcmContentMetaType = u32;
    pub const NcmContentMetaAttribute_NcmContentMetaAttribute_Exfat: root::NcmContentMetaAttribute =
        1;
    pub const NcmContentMetaAttribute_NcmContentMetaAttribute_Rebootless:
        root::NcmContentMetaAttribute = 2;
    pub type NcmContentMetaAttribute = u32;
    #[repr(C)]
    pub struct NcmContentStorage {
        pub s: root::Service,
    }
    #[repr(C)]
    pub struct NcmContentMetaDatabase {
        pub s: root::Service,
    }
    #[repr(C)]
    pub struct NcmNcaId {
        pub c: [u8; 16usize],
    }
    #[repr(C)]
    pub struct NcmMetaRecord {
        pub titleId: u64,
        pub version: u32,
        pub type_: u8,
        pub flags: u8,
        pub padding: [u8; 2usize],
    }
    #[repr(C)]
    pub struct NcmContentRecord {
        pub ncaId: root::NcmNcaId,
        pub size: [u8; 6usize],
        pub type_: u8,
        pub padding: u8,
    }
    #[repr(C)]
    pub struct NcmContentMetaRecordsHeader {
        #[doc = "< Size of optional struct that comes after this one."]
        pub numExtraBytes: u16,
        #[doc = "< Number of NcmContentRecord entries after the extra bytes."]
        pub numContentRecords: u16,
        #[doc = "< Number of NcmMetaRecord entries that come after the NcmContentRecords."]
        pub numMetaRecords: u16,
        #[doc = "< Always zero."]
        pub padding: u16,
    }
    #[repr(C)]
    pub struct NcmApplicationContentMetaKey {
        pub metaRecord: root::NcmMetaRecord,
        pub baseTitleId: u64,
    }
    extern "C" {
        pub fn ncmInitialize() -> root::Result;
    }
    extern "C" {
        pub fn ncmExit();
    }
    extern "C" {
        pub fn ncmOpenContentStorage(
            storage: root::FsStorageId,
            out: *mut root::NcmContentStorage,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmOpenContentMetaDatabase(
            storage: root::FsStorageId,
            out: *mut root::NcmContentMetaDatabase,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageGeneratePlaceHolderId(
            cs: *mut root::NcmContentStorage,
            outputId: *mut root::NcmNcaId,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageCreatePlaceHolder(
            cs: *mut root::NcmContentStorage,
            registeredId: *const root::NcmNcaId,
            placeholderId: *const root::NcmNcaId,
            size: u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageDeletePlaceHolder(
            cs: *mut root::NcmContentStorage,
            placeholderId: *const root::NcmNcaId,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageWritePlaceHolder(
            cs: *mut root::NcmContentStorage,
            placeholderId: *const root::NcmNcaId,
            offset: u64,
            srcData: *const libc::c_void,
            srcDataSize: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageRegister(
            cs: *mut root::NcmContentStorage,
            registeredId: *const root::NcmNcaId,
            placeholderId: *const root::NcmNcaId,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageDelete(
            cs: *mut root::NcmContentStorage,
            registeredId: *const root::NcmNcaId,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageHas(
            cs: *mut root::NcmContentStorage,
            ncaId: *const root::NcmNcaId,
            out: *mut bool,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageGetPath(
            cs: *mut root::NcmContentStorage,
            ncaId: *const root::NcmNcaId,
            out: *mut libc::c_char,
            outSize: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageGetPlaceHolderPath(
            cs: *mut root::NcmContentStorage,
            ncaId: *const root::NcmNcaId,
            out: *mut libc::c_char,
            outSize: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageCleanupAllPlaceHolder(
            cs: *mut root::NcmContentStorage,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageGetSize(
            cs: *mut root::NcmContentStorage,
            ncaId: *const root::NcmNcaId,
            out: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageDisableForcibly(cs: *mut root::NcmContentStorage) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageReadContentIdFile(
            cs: *mut root::NcmContentStorage,
            ncaId: *const root::NcmNcaId,
            offset: u64,
            outBuf: *mut libc::c_void,
            bufSize: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentStorageGetRightsIdFromContentId(
            cs: *mut root::NcmContentStorage,
            ncaId: *const root::NcmNcaId,
            rightsIdOut: *mut root::FsRightsId,
            keyGenerationOut: *mut u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseSet(
            db: *mut root::NcmContentMetaDatabase,
            record: *const root::NcmMetaRecord,
            inDataSize: u64,
            srcRecordsData: *const root::NcmContentMetaRecordsHeader,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseGet(
            db: *mut root::NcmContentMetaDatabase,
            record: *const root::NcmMetaRecord,
            outDataSize: u64,
            outRecordsData: *mut root::NcmContentMetaRecordsHeader,
            sizeRead: *mut u64,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseRemove(
            db: *mut root::NcmContentMetaDatabase,
            record: *const root::NcmMetaRecord,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseGetContentIdByType(
            db: *mut root::NcmContentMetaDatabase,
            contentType: root::NcmContentType,
            record: *const root::NcmMetaRecord,
            out: *mut root::NcmNcaId,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseListContentInfo(
            db: *mut root::NcmContentMetaDatabase,
            record: *const root::NcmMetaRecord,
            index: u32,
            contentRecordsOut: *mut root::NcmContentRecord,
            contentRecordsBufSize: root::size_t,
            numEntriesRead: *mut u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseList(
            db: *mut root::NcmContentMetaDatabase,
            titleType: u32,
            titleIdExact: u64,
            titleIdLow: u64,
            titleIdHigh: u64,
            metaRecordsOut: *mut root::NcmMetaRecord,
            metaRecordsBufSize: root::size_t,
            numEntriesWritten: *mut u32,
            numEntriesTotal: *mut u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseGetLatestContentMetaKey(
            db: *mut root::NcmContentMetaDatabase,
            titleId: u64,
            out: *mut root::NcmMetaRecord,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseListApplication(
            db: *mut root::NcmContentMetaDatabase,
            filter: u8,
            outBuf: *mut root::NcmApplicationContentMetaKey,
            outBufSize: root::size_t,
            numEntriesWritten: *mut u32,
            numEntriesTotal: *mut u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseHas(
            db: *mut root::NcmContentMetaDatabase,
            record: *const root::NcmMetaRecord,
            out: *mut bool,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseDisableForcibly(
            db: *mut root::NcmContentMetaDatabase,
        ) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseCommit(db: *mut root::NcmContentMetaDatabase) -> root::Result;
    }
    extern "C" {
        pub fn ncmContentMetaDatabaseGetAttributes(
            db: *mut root::NcmContentMetaDatabase,
            record: *const root::NcmMetaRecord,
            out: *mut u8,
        ) -> root::Result;
    }
    #[doc = "< Everything is awake."]
    pub const PscPmState_PscPmState_Awake: root::PscPmState = 0;
    #[doc = "< Preparing to transition to awake."]
    pub const PscPmState_PscPmState_ReadyAwaken: root::PscPmState = 1;
    #[doc = "< Preparing to transition to sleep."]
    pub const PscPmState_PscPmState_ReadySleep: root::PscPmState = 2;
    #[doc = "< Critical services are ready to sleep."]
    pub const PscPmState_PscPmState_ReadySleepCritical: root::PscPmState = 3;
    #[doc = "< Critical services are ready to wake up."]
    pub const PscPmState_PscPmState_ReadyAwakenCritical: root::PscPmState = 4;
    #[doc = "< Preparing to transition to shutdown."]
    pub const PscPmState_PscPmState_ReadyShutdown: root::PscPmState = 5;
    pub type PscPmState = u32;
    #[repr(C)]
    pub struct PscPmModule {
        pub event: root::Event,
        pub srv: root::Service,
        pub module_id: u16,
    }
    extern "C" {
        pub fn pscInitialize() -> root::Result;
    }
    extern "C" {
        pub fn pscExit();
    }
    extern "C" {
        pub fn pscGetPmModule(
            out: *mut root::PscPmModule,
            module_id: u16,
            dependencies: *const u16,
            dependency_count: root::size_t,
            autoclear: bool,
        ) -> root::Result;
    }
    extern "C" {
        pub fn pscPmModuleGetRequest(
            module: *mut root::PscPmModule,
            out_state: *mut root::PscPmState,
            out_flags: *mut u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn pscPmModuleAcknowledge(
            module: *mut root::PscPmModule,
            state: root::PscPmState,
        ) -> root::Result;
    }
    extern "C" {
        pub fn pscPmModuleFinalize(module: *mut root::PscPmModule) -> root::Result;
    }
    #[repr(C, packed)]
    pub struct NfpuTagInfo {
        pub uuid: [u8; 10usize],
        pub uuid_length: u8,
        pub reserved1: [u8; 21usize],
        pub protocol: u32,
        pub tag_type: u32,
        pub reserved2: [u8; 48usize],
    }
    #[repr(C, packed)]
    pub struct NfpuCommonInfo {
        pub last_write_year: u16,
        pub last_write_month: u8,
        pub last_write_day: u8,
        pub write_counter: u16,
        pub version: u16,
        pub application_area_size: u32,
        pub reserved: [u8; 52usize],
    }
    #[repr(C, packed)]
    pub struct NfpuModelInfo {
        pub amiibo_id: [u8; 8usize],
        pub reserved: [u8; 56usize],
    }
    #[repr(C, packed)]
    pub struct NfpuMiiCharInfo {
        pub unk_x0: [u8; 16usize],
        #[doc = "< utf-16be, null-terminated"]
        pub mii_name: [u16; 11usize],
        pub unk_x26: u8,
        pub mii_color: u8,
        pub mii_sex: u8,
        pub mii_height: u8,
        pub mii_width: u8,
        pub unk_x2b: [u8; 2usize],
        pub mii_face_shape: u8,
        pub mii_face_color: u8,
        pub mii_wrinkles_style: u8,
        pub mii_makeup_style: u8,
        pub mii_hair_style: u8,
        pub mii_hair_color: u8,
        pub mii_has_hair_flipped: u8,
        pub mii_eye_style: u8,
        pub mii_eye_color: u8,
        pub mii_eye_size: u8,
        pub mii_eye_thickness: u8,
        pub mii_eye_angle: u8,
        pub mii_eye_pos_x: u8,
        pub mii_eye_pos_y: u8,
        pub mii_eyebrow_style: u8,
        pub mii_eyebrow_color: u8,
        pub mii_eyebrow_size: u8,
        pub mii_eyebrow_thickness: u8,
        pub mii_eyebrow_angle: u8,
        pub mii_eyebrow_pos_x: u8,
        pub mii_eyebrow_pos_y: u8,
        pub mii_nose_style: u8,
        pub mii_nose_size: u8,
        pub mii_nose_pos: u8,
        pub mii_mouth_style: u8,
        pub mii_mouth_color: u8,
        pub mii_mouth_size: u8,
        pub mii_mouth_thickness: u8,
        pub mii_mouth_pos: u8,
        pub mii_facial_hair_color: u8,
        pub mii_beard_style: u8,
        pub mii_mustache_style: u8,
        pub mii_mustache_size: u8,
        pub mii_mustache_pos: u8,
        pub mii_glasses_style: u8,
        pub mii_glasses_color: u8,
        pub mii_glasses_size: u8,
        pub mii_glasses_pos: u8,
        pub mii_has_mole: u8,
        pub mii_mole_size: u8,
        pub mii_mole_pos_x: u8,
        pub mii_mole_pos_y: u8,
        pub unk_x57: u8,
    }
    #[repr(C, packed)]
    pub struct NfpuRegisterInfo {
        pub mii: root::NfpuMiiCharInfo,
        pub first_write_year: u16,
        pub first_write_month: u8,
        pub first_write_day: u8,
        #[doc = "< utf-8, null-terminated"]
        pub amiibo_name: [libc::c_char; 11usize],
        pub reserved: [u8; 153usize],
    }
    #[repr(C)]
    pub struct NfpuInitConfig {
        pub unk1: u64,
        pub reserved1: [u64; 3usize],
        pub unk2: u64,
        pub reserved2: [u64; 3usize],
    }
    pub const NfpuState_NfpuState_NonInitialized: root::NfpuState = 0;
    pub const NfpuState_NfpuState_Initialized: root::NfpuState = 1;
    pub type NfpuState = u32;
    pub const NfpuDeviceState_NfpuDeviceState_Initialized: root::NfpuDeviceState = 0;
    pub const NfpuDeviceState_NfpuDeviceState_SearchingForTag: root::NfpuDeviceState = 1;
    pub const NfpuDeviceState_NfpuDeviceState_TagFound: root::NfpuDeviceState = 2;
    pub const NfpuDeviceState_NfpuDeviceState_TagRemoved: root::NfpuDeviceState = 3;
    pub const NfpuDeviceState_NfpuDeviceState_TagMounted: root::NfpuDeviceState = 4;
    pub const NfpuDeviceState_NfpuDeviceState_Unavailable: root::NfpuDeviceState = 5;
    pub const NfpuDeviceState_NfpuDeviceState_Finalized: root::NfpuDeviceState = 6;
    pub type NfpuDeviceState = u32;
    pub const NfpuDeviceType_NfpuDeviceType_Amiibo: root::NfpuDeviceType = 0;
    pub type NfpuDeviceType = u32;
    pub const NfpuMountTarget_NfpuMountTarget_Rom: root::NfpuMountTarget = 1;
    pub const NfpuMountTarget_NfpuMountTarget_Ram: root::NfpuMountTarget = 2;
    pub const NfpuMountTarget_NfpuMountTarget_All: root::NfpuMountTarget = 3;
    pub type NfpuMountTarget = u32;
    extern "C" {
        pub fn nfpuInitialize(config: *const root::NfpuInitConfig) -> root::Result;
    }
    extern "C" {
        pub fn nfpuExit();
    }
    extern "C" {
        pub fn nfpuGetInterface() -> *mut root::Service;
    }
    extern "C" {
        pub fn nfpuStartDetection(id: root::HidControllerID) -> root::Result;
    }
    extern "C" {
        pub fn nfpuStopDetection(id: root::HidControllerID) -> root::Result;
    }
    extern "C" {
        #[doc = " Returned event will have autoclear off."]
        pub fn nfpuAttachActivateEvent(
            id: root::HidControllerID,
            out: *mut root::Event,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Returned event will have autoclear off."]
        pub fn nfpuAttachDeactivateEvent(
            id: root::HidControllerID,
            out: *mut root::Event,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Returned event will have autoclear on."]
        pub fn nfpuAttachAvailabilityChangeEvent(out: *mut root::Event) -> root::Result;
    }
    extern "C" {
        pub fn nfpuGetState(out: *mut root::NfpuState) -> root::Result;
    }
    extern "C" {
        pub fn nfpuGetDeviceState(
            id: root::HidControllerID,
            out: *mut root::NfpuDeviceState,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuListDevices(
            count: *mut u32,
            out: *mut root::HidControllerID,
            num_elements: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuGetNpadId(id: root::HidControllerID, out: *mut u32) -> root::Result;
    }
    extern "C" {
        pub fn nfpuMount(
            id: root::HidControllerID,
            device_type: root::NfpuDeviceType,
            mount_target: root::NfpuMountTarget,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuUnmount(id: root::HidControllerID) -> root::Result;
    }
    extern "C" {
        pub fn nfpuGetTagInfo(
            id: root::HidControllerID,
            out: *mut root::NfpuTagInfo,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuGetRegisterInfo(
            id: root::HidControllerID,
            out: *mut root::NfpuRegisterInfo,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuGetCommonInfo(
            id: root::HidControllerID,
            out: *mut root::NfpuCommonInfo,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuGetModelInfo(
            id: root::HidControllerID,
            out: *mut root::NfpuModelInfo,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuOpenApplicationArea(
            id: root::HidControllerID,
            app_id: u32,
            npad_id: *mut u32,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuGetApplicationArea(
            id: root::HidControllerID,
            buf: *mut libc::c_void,
            buf_size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuSetApplicationArea(
            id: root::HidControllerID,
            buf: *const libc::c_void,
            buf_size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuCreateApplicationArea(
            id: root::HidControllerID,
            app_id: u32,
            buf: *const libc::c_void,
            buf_size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        pub fn nfpuFlush(id: root::HidControllerID) -> root::Result;
    }
    extern "C" {
        pub fn nfpuRestore(id: root::HidControllerID) -> root::Result;
    }
    extern "C" {
        #[doc = " Calls nfc:user."]
        pub fn nfpuIsNfcEnabled(out: *mut bool) -> root::Result;
    }
    #[doc = "< WLAN is disabled or enabled and not connected."]
    pub const WlanInfState_WlanInfState_NotConnected: root::WlanInfState = 1;
    #[doc = "< WLAN is connecting."]
    pub const WlanInfState_WlanInfState_Connecting: root::WlanInfState = 2;
    #[doc = "< WLAN is connected."]
    pub const WlanInfState_WlanInfState_Connected: root::WlanInfState = 3;
    #[doc = " WLAN State."]
    pub type WlanInfState = u32;
    extern "C" {
        pub fn wlaninfInitialize() -> root::Result;
    }
    extern "C" {
        pub fn wlaninfExit();
    }
    extern "C" {
        pub fn wlaninfGetState(out: *mut root::WlanInfState) -> root::Result;
    }
    extern "C" {
        #[doc = " Value goes from -30 (really good signal) to -90 (barely enough to stay connected)"]
        #[doc = " on a logarithmic scale"]
        pub fn wlaninfGetRSSI(out: *mut root::s32) -> root::Result;
    }
    extern "C" {
        pub fn pctlInitialize() -> root::Result;
    }
    extern "C" {
        pub fn pctlExit();
    }
    extern "C" {
        #[doc = " Confirm whether VrMode is allowed. Only available with [4.0.0+]."]
        pub fn pctlConfirmStereoVisionPermission() -> root::Result;
    }
    extern "C" {
        #[doc = " Gets whether Parental Controls are enabled."]
        pub fn pctlIsRestrictionEnabled(flag: *mut bool) -> root::Result;
    }
    extern "C" {
        #[doc = " Reset the confirmation done by \\ref pctlConfirmStereoVisionPermission. Only available with [5.0.0+]."]
        pub fn pctlResetConfirmedStereoVisionPermission() -> root::Result;
    }
    extern "C" {
        #[doc = " Gets whether VrMode is allowed. Only available with [5.0.0+]."]
        pub fn pctlIsStereoVisionPermitted(flag: *mut bool) -> root::Result;
    }
    #[doc = " CommonArguments"]
    #[repr(C)]
    pub struct LibAppletArgs {
        pub CommonArgs_version: u32,
        pub CommonArgs_size: u32,
        #[doc = "< LibraryApplet API version"]
        pub LaVersion: u32,
        #[doc = "< Set to the output from \\ref appletGetThemeColorType by \\ref libappletArgsCreate."]
        pub ExpectedThemeColor: root::s32,
        #[doc = "< bool flag, default is false."]
        pub PlayStartupSound: u8,
        pub pad: [u8; 7usize],
        pub tick: u64,
    }
    extern "C" {
        #[doc = " @brief Creates a LibAppletArgs struct."]
        #[doc = " @param a LibAppletArgs struct."]
        #[doc = " @param version LaVersion for \\ref LibAppletArgs."]
        pub fn libappletArgsCreate(a: *mut root::LibAppletArgs, version: u32);
    }
    extern "C" {
        #[doc = " @brief Sets the PlayStartupSound field in \\ref LibAppletArgs."]
        #[doc = " @param a LibAppletArgs struct."]
        #[doc = " @param flag Value for \\ref LibAppletArgs PlayStartupSound."]
        pub fn libappletArgsSetPlayStartupSound(a: *mut root::LibAppletArgs, flag: bool);
    }
    extern "C" {
        #[doc = " @brief Creates an AppletStorage with the specified size and writes the buffer contents to that storage at offset 0."]
        #[doc = " @param[out] s Storage object."]
        #[doc = " @param buffer Input buffer."]
        #[doc = " @param size Size to write."]
        pub fn libappletCreateWriteStorage(
            s: *mut root::AppletStorage,
            buffer: *const libc::c_void,
            size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Reads data from offset 0 from the specified storage into the buffer. If the storage-size is smaller than the size param, the storage-size is used instead."]
        #[doc = " @param s Storage object."]
        #[doc = " @param buffer Output buffer."]
        #[doc = " @param size Size to read."]
        #[doc = " @param transfer_size Optional output size field for the actual size used for the read, can be NULL."]
        pub fn libappletReadStorage(
            s: *mut root::AppletStorage,
            buffer: *mut libc::c_void,
            size: root::size_t,
            transfer_size: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the tick field in LibAppletArgs, then creates a storage with it which is pushed to the AppletHolder via \\ref appletHolderPushInData."]
        #[doc = " @param a LibAppletArgs struct."]
        #[doc = " @param h AppletHolder object."]
        pub fn libappletArgsPush(
            a: *mut root::LibAppletArgs,
            h: *mut root::AppletHolder,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a storage using the input buffer which is pushed to the AppletHolder via \\ref appletHolderPushInData."]
        #[doc = " @param h AppletHolder object."]
        #[doc = " @param buffer Input data buffer."]
        #[doc = " @param size Input data size."]
        pub fn libappletPushInData(
            h: *mut root::AppletHolder,
            buffer: *const libc::c_void,
            size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Pops a storage via \\ref appletHolderPopOutData, uses \\ref libappletReadStorage, then closes the storage."]
        #[doc = " @param h AppletHolder object."]
        #[doc = " @param buffer Output buffer."]
        #[doc = " @param size Size to read."]
        #[doc = " @param transfer_size Optional output size field for the actual size used for the read, can be NULL."]
        pub fn libappletPopOutData(
            h: *mut root::AppletHolder,
            buffer: *mut libc::c_void,
            size: root::size_t,
            transfer_size: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Starts the applet and waits for it to finish, then checks the \\ref LibAppletExitReason."]
        #[doc = " @note Uses \\ref appletHolderStart and \\ref appletHolderJoin."]
        #[doc = " @param h AppletHolder object."]
        pub fn libappletStart(h: *mut root::AppletHolder) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a LibraryApplet with the specified input storage data, uses \\ref libappletStart, and reads the output storage reply data via \\ref libappletPopOutData."]
        #[doc = " @param id \\ref AppletId"]
        #[doc = " @param commonargs \\ref LibAppletArgs struct."]
        #[doc = " @param arg Input storage data buffer. Optional, can be NULL."]
        #[doc = " @param arg_size Size of the arg buffer."]
        #[doc = " @param reply Output storage data buffer. Optional, can be NULL."]
        #[doc = " @param reply_size Size to read for the reply buffer."]
        #[doc = " @param out_reply_size Actual read reply data size, see \\ref libappletPopOutData."]
        pub fn libappletLaunch(
            id: root::AppletId,
            commonargs: *mut root::LibAppletArgs,
            arg: *const libc::c_void,
            arg_size: root::size_t,
            reply: *mut libc::c_void,
            reply_size: root::size_t,
            out_reply_size: *mut root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Wrapper for \\ref appletPushToGeneralChannel, see appletPushToGeneralChannel regarding the requirements for using this."]
        #[doc = " Returns to the main Home Menu, equivalent to pressing the HOME button."]
        pub fn libappletRequestHomeMenu() -> root::Result;
    }
    extern "C" {
        #[doc = " Wrapper for \\ref appletPushToGeneralChannel, see appletPushToGeneralChannel regarding the requirements for using this."]
        #[doc = " Equivalent to entering \"System Update\" under System Settings. When leaving this, it returns to the main Home Menu."]
        pub fn libappletRequestJumpToSystemUpdate() -> root::Result;
    }
    #[doc = "< ShowParentalAuthentication"]
    pub const PctlAuthType_PctlAuthType_Show: root::PctlAuthType = 0;
    #[doc = "< RegisterParentalPasscode"]
    pub const PctlAuthType_PctlAuthType_RegisterPasscode: root::PctlAuthType = 1;
    #[doc = "< ChangeParentalPasscode"]
    pub const PctlAuthType_PctlAuthType_ChangePasscode: root::PctlAuthType = 2;
    #[doc = " Type values for PctlAuthArg::type."]
    pub type PctlAuthType = u32;
    #[doc = " Input arg storage for the applet."]
    #[repr(C)]
    pub struct PctlAuthArg {
        #[doc = "< Always set to 0 by the user-process."]
        pub unk_x0: u32,
        #[doc = "< \\ref PctlAuthType"]
        pub type_: root::PctlAuthType,
        #[doc = "< Arg0"]
        pub arg0: u8,
        #[doc = "< Arg1"]
        pub arg1: u8,
        #[doc = "< Arg2"]
        pub arg2: u8,
        #[doc = "< Padding"]
        pub pad: u8,
    }
    extern "C" {
        #[doc = " @brief Launches the applet."]
        #[doc = " @note Should not be used if a PIN is not already registered. See \\ref pctlIsRestrictionEnabled."]
        #[doc = " @param flag Input flag. false = temporarily disable Parental Controls. true = validate the input PIN."]
        pub fn pctlauthShow(flag: bool) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Launches the applet. Only available with [4.0.0+]."]
        #[doc = " @param arg0 Value for PctlAuthArg.arg0."]
        #[doc = " @param arg1 Value for PctlAuthArg.arg1."]
        #[doc = " @param arg2 Value for PctlAuthArg.arg2."]
        pub fn pctlauthShowEx(arg0: u8, arg1: u8, arg2: u8) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Just calls: pctlauthShowEx(1, 0, 1). Launches the applet for checking the PIN, used when changing system-settings."]
        #[doc = " @note Should not be used if a PIN is not already registered. See \\ref pctlIsRestrictionEnabled."]
        pub fn pctlauthShowForConfiguration() -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Launches the applet for registering the Parental Controls PIN."]
        pub fn pctlauthRegisterPasscode() -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Launches the applet for changing the Parental Controls PIN."]
        #[doc = " @note Should not be used if a PIN is not already registered. See \\ref pctlIsRestrictionEnabled."]
        pub fn pctlauthChangePasscode() -> root::Result;
    }
    #[doc = "< Normal"]
    pub const ErrorType_ErrorType_Normal: root::ErrorType = 0;
    #[doc = "< System"]
    pub const ErrorType_ErrorType_System: root::ErrorType = 1;
    #[doc = "< Application"]
    pub const ErrorType_ErrorType_Application: root::ErrorType = 2;
    #[doc = "< EULA"]
    pub const ErrorType_ErrorType_Eula: root::ErrorType = 3;
    #[doc = "< Parental Controls"]
    pub const ErrorType_ErrorType_Pctl: root::ErrorType = 4;
    #[doc = "< Record"]
    pub const ErrorType_ErrorType_Record: root::ErrorType = 5;
    #[doc = "< SystemUpdateEula"]
    pub const ErrorType_ErrorType_SystemUpdateEula: root::ErrorType = 8;
    #[doc = " Error type for ErrorCommonHeader.type."]
    pub type ErrorType = u32;
    #[doc = " Stores error-codes which are displayed as XXXX-XXXX, low for the former and desc for the latter."]
    #[repr(C)]
    pub struct ErrorCode {
        #[doc = "< The module portion of the error, normally this should be set to module + 2000."]
        pub low: u32,
        #[doc = "< The error description."]
        pub desc: u32,
    }
    #[doc = " Error context."]
    #[repr(C)]
    pub struct ErrorContext {
        #[doc = "< Type"]
        pub type_: u8,
        #[doc = "< Padding"]
        pub pad: [u8; 7usize],
        #[doc = "< Data"]
        pub data: [u8; 500usize],
        #[doc = "< Result"]
        pub res: root::Result,
    }
    #[doc = " Common header for the start of the arg storage."]
    #[repr(C)]
    pub struct ErrorCommonHeader {
        #[doc = "< Type, see \\ref ErrorType."]
        pub type_: u8,
        #[doc = "< When clear, this indicates WithoutJump."]
        pub jumpFlag: u8,
        #[doc = "< Unknown"]
        pub unk_x2: [u8; 3usize],
        #[doc = "< When set with ::ErrorType_Normal, indicates that an additional storage is pushed for \\ref ErrorResultBacktrace. [4.0.0+] Otherwise, when set indicates that an additional storage is pushed for \\ref ErrorContext."]
        pub contextFlag: u8,
        #[doc = "< ErrorCommonArg: When clear, errorCode is used, otherwise the applet generates the error-code from res."]
        pub resultFlag: u8,
        #[doc = "< Similar to contextFlag except for ErrorCommonArg, indicating \\ref ErrorContext is used."]
        pub contextFlag2: u8,
    }
    #[doc = " Common error arg data."]
    #[repr(C)]
    pub struct ErrorCommonArg {
        #[doc = "< Common header."]
        pub hdr: root::ErrorCommonHeader,
        #[doc = "< \\ref ErrorCode"]
        pub errorCode: root::ErrorCode,
        #[doc = "< Result"]
        pub res: root::Result,
    }
    #[doc = " Error arg data for certain errors with module PCTL."]
    #[repr(C)]
    pub struct ErrorPctlArg {
        #[doc = "< Common header."]
        pub hdr: root::ErrorCommonHeader,
        #[doc = "< Result"]
        pub res: root::Result,
    }
    #[doc = " ResultBacktrace"]
    #[repr(C)]
    pub struct ErrorResultBacktrace {
        #[doc = "< Total entries in the backtrace array."]
        pub count: root::s32,
        #[doc = "< Result backtrace."]
        pub backtrace: [root::Result; 32usize],
    }
    #[doc = " Error arg data for EULA."]
    #[repr(C)]
    pub struct ErrorEulaArg {
        #[doc = "< Common header."]
        pub hdr: root::ErrorCommonHeader,
        #[doc = "< \\ref SetRegion"]
        pub regionCode: root::SetRegion,
    }
    #[doc = " Additional input storage data for \\ref errorSystemUpdateEulaShow."]
    #[repr(C)]
    pub struct ErrorEulaData {
        #[doc = "< data"]
        pub data: [u8; 131072usize],
    }
    #[doc = " Error arg data for Record."]
    #[repr(C)]
    pub struct ErrorRecordArg {
        #[doc = "< Common header."]
        pub hdr: root::ErrorCommonHeader,
        #[doc = "< \\ref ErrorCode"]
        pub errorCode: root::ErrorCode,
        #[doc = "< POSIX timestamp."]
        pub timestamp: u64,
    }
    #[doc = " SystemErrorArg"]
    #[repr(C)]
    pub struct ErrorSystemArg {
        #[doc = "< Common header."]
        pub hdr: root::ErrorCommonHeader,
        #[doc = "< \\ref ErrorCode"]
        pub errorCode: root::ErrorCode,
        #[doc = "< See set.h."]
        pub languageCode: u64,
        #[doc = "< UTF-8 Dialog message."]
        pub dialogMessage: [libc::c_char; 2048usize],
        #[doc = "< UTF-8 Fullscreen message (displayed when the user clicks on \"Details\")."]
        pub fullscreenMessage: [libc::c_char; 2048usize],
    }
    #[doc = " Error system config."]
    #[repr(C)]
    pub struct ErrorSystemConfig {
        #[doc = "< Arg data."]
        pub arg: root::ErrorSystemArg,
        #[doc = "< Optional error context."]
        pub ctx: root::ErrorContext,
    }
    #[doc = " ApplicationErrorArg"]
    #[repr(C, packed)]
    pub struct ErrorApplicationArg {
        #[doc = "< Common header."]
        pub hdr: root::ErrorCommonHeader,
        #[doc = "< Raw decimal error number which is displayed in the dialog."]
        pub errorNumber: u32,
        #[doc = "< See set.h."]
        pub languageCode: u64,
        #[doc = "< UTF-8 Dialog message."]
        pub dialogMessage: [libc::c_char; 2048usize],
        #[doc = "< UTF-8 Fullscreen message (displayed when the user clicks on \"Details\")."]
        pub fullscreenMessage: [libc::c_char; 2048usize],
    }
    #[doc = " Error application config."]
    #[repr(C)]
    pub struct ErrorApplicationConfig {
        #[doc = "< Arg data."]
        pub arg: root::ErrorApplicationArg,
    }
    extern "C" {
        #[doc = " @brief Launches the applet for displaying the specified Result."]
        #[doc = " @param res Result"]
        #[doc = " @param jumpFlag Jump flag, normally this is true."]
        #[doc = " @param ctx Optional \\ref ErrorContext, can be NULL. Unused when jumpFlag=false. Ignored on pre-4.0.0, since it's only available for [4.0.0+]."]
        #[doc = " @note Sets the following fields: jumpFlag and contextFlag2. Uses ::ErrorType_Normal normally."]
        #[doc = " @note For module=PCTL errors with desc 100-119 this sets uses ::ErrorType_Pctl, in which case the applet will display the following special dialog: \"This software is restricted by Parental Controls\"."]
        #[doc = " @note If the input Result is 0xC8A2, the applet will display a special dialog regarding the current application requiring a software update, with buttons \"Later\" and \"Restart\"."]
        #[doc = " @note [3.0.0+] If the input Result is 0xCAA2, the applet will display a special dialog related to DLC version."]
        #[doc = " @warning This applet creates an error report that is logged in the system, when not handling the above special dialogs. Proceed at your own risk!"]
        pub fn errorResultShow(
            res: root::Result,
            jumpFlag: bool,
            ctx: *const root::ErrorContext,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Launches the applet for displaying the specified ErrorCode."]
        #[doc = " @param errorCode \\ref ErrorCode"]
        #[doc = " @param jumpFlag Jump flag, normally this is true."]
        #[doc = " @param ctx Optional \\ref ErrorContext, can be NULL. Unused when jumpFlag=false. Ignored on pre-4.0.0, since it's only available for [4.0.0+]."]
        #[doc = " @note Sets the following fields: jumpFlag and contextFlag2. resultFlag=1. Uses ::ErrorType_Normal."]
        #[doc = " @warning This applet creates an error report that is logged in the system. Proceed at your own risk!"]
        pub fn errorCodeShow(
            errorCode: root::ErrorCode,
            jumpFlag: bool,
            ctx: *const root::ErrorContext,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates an ErrorResultBacktrace struct."]
        #[doc = " @param backtrace \\ref ErrorResultBacktrace struct."]
        #[doc = " @param count Total number of entries."]
        #[doc = " @param entries Input array of Result."]
        pub fn errorResultBacktraceCreate(
            backtrace: *mut root::ErrorResultBacktrace,
            count: root::s32,
            entries: *const root::Result,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Launches the applet for \\ref ErrorResultBacktrace."]
        #[doc = " @param backtrace ErrorResultBacktrace struct."]
        #[doc = " @param res Result"]
        #[doc = " @note Sets the following fields: jumpFlag=1, contextFlag=1, and uses ::ErrorType_Normal."]
        #[doc = " @warning This applet creates an error report that is logged in the system. Proceed at your own risk!"]
        pub fn errorResultBacktraceShow(
            res: root::Result,
            backtrace: *const root::ErrorResultBacktrace,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Launches the applet for displaying the EULA."]
        #[doc = " @param RegionCode \\ref SetRegion"]
        #[doc = " @note Sets the following fields: jumpFlag=1, regionCode, and uses ::ErrorType_Eula."]
        pub fn errorEulaShow(RegionCode: root::SetRegion) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Launches the applet for displaying the system-update EULA."]
        #[doc = " @param RegionCode \\ref SetRegion"]
        #[doc = " @param eula EULA data. Address must be 0x1000-byte aligned."]
        #[doc = " @note Sets the following fields: jumpFlag=1, regionCode, and uses ::ErrorType_SystemUpdateEula."]
        pub fn errorSystemUpdateEulaShow(
            RegionCode: root::SetRegion,
            eula: *const root::ErrorEulaData,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Launches the applet for displaying an error full-screen, using the specified ErrorCode and timestamp."]
        #[doc = " @param errorCode \\ref ErrorCode"]
        #[doc = " @param timestamp POSIX timestamp."]
        #[doc = " @note Sets the following fields: jumpFlag=1, errorCode, timestamp, and uses ::ErrorType_Record."]
        #[doc = " @note The applet does not log an error report for this. error*RecordShow is used by qlaunch for displaying previously logged error reports."]
        pub fn errorCodeRecordShow(
            errorCode: root::ErrorCode,
            timestamp: u64,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates an ErrorSystemConfig struct."]
        #[doc = " @param c ErrorSystemConfig struct."]
        #[doc = " @param dialog_message UTF-8 dialog message."]
        #[doc = " @param fullscreen_message UTF-8 fullscreen message, displayed when the user clicks on \"Details\". Optional, can be NULL (which disables displaying Details)."]
        #[doc = " @note Sets the following fields: {strings}, and uses ::ErrorType_System. The rest are cleared."]
        #[doc = " @note On pre-5.0.0 this will initialize languageCode by using: setInitialize(), setMakeLanguageCode(SetLanguage_ENUS, ...), and setExit(). This is needed since an empty languageCode wasn't supported until [5.0.0+] (which would also use SetLanguage_ENUS)."]
        #[doc = " @warning This applet creates an error report that is logged in the system. Proceed at your own risk!"]
        pub fn errorSystemCreate(
            c: *mut root::ErrorSystemConfig,
            dialog_message: *const libc::c_char,
            fullscreen_message: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Launches the applet with the specified config."]
        #[doc = " @param c ErrorSystemConfig struct."]
        pub fn errorSystemShow(c: *mut root::ErrorSystemConfig) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the ErrorContext."]
        #[doc = " @note Only available on [4.0.0+], on older versions this will return without setting the context."]
        #[doc = " @param c   ErrorSystemConfig struct."]
        #[doc = " @param ctx ErrorContext, NULL to clear it."]
        pub fn errorSystemSetContext(
            c: *mut root::ErrorSystemConfig,
            ctx: *const root::ErrorContext,
        );
    }
    extern "C" {
        #[doc = " @brief Creates an ErrorApplicationConfig struct."]
        #[doc = " @param c ErrorApplicationConfig struct."]
        #[doc = " @param dialog_message UTF-8 dialog message."]
        #[doc = " @param fullscreen_message UTF-8 fullscreen message, displayed when the user clicks on \"Details\". Optional, can be NULL (which disables displaying Details)."]
        #[doc = " @note Sets the following fields: jumpFlag=1, {strings}, and uses ::ErrorType_Application. The rest are cleared."]
        #[doc = " @note On pre-5.0.0 this will initialize languageCode by using: setInitialize(), setMakeLanguageCode(SetLanguage_ENUS, ...), and setExit(). This is needed since an empty languageCode wasn't supported until [5.0.0+] (which would also use SetLanguage_ENUS)."]
        #[doc = " @warning This applet creates an error report that is logged in the system. Proceed at your own risk!"]
        pub fn errorApplicationCreate(
            c: *mut root::ErrorApplicationConfig,
            dialog_message: *const libc::c_char,
            fullscreen_message: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Launches the applet with the specified config."]
        #[doc = " @param c ErrorApplicationConfig struct."]
        pub fn errorApplicationShow(c: *mut root::ErrorApplicationConfig) -> root::Result;
    }
    #[doc = "< Success, valid string."]
    pub const SwkbdTextCheckResult_SwkbdTextCheckResult_OK: root::SwkbdTextCheckResult = 0;
    #[doc = "< Failure, invalid string. Error message is displayed in a message-box, pressing OK will return to swkbd again."]
    pub const SwkbdTextCheckResult_SwkbdTextCheckResult_Bad: root::SwkbdTextCheckResult = 1;
    #[doc = "< Failure, invalid string. Error message is displayed in a message-box, pressing Cancel will return to swkbd again, while pressing OK will continue as if the text was valid."]
    pub const SwkbdTextCheckResult_SwkbdTextCheckResult_Prompt: root::SwkbdTextCheckResult = 2;
    #[doc = "< Failure, invalid string. With value 3 and above, swkbd will silently not accept the string, without displaying any error."]
    pub const SwkbdTextCheckResult_SwkbdTextCheckResult_Silent: root::SwkbdTextCheckResult = 3;
    #[doc = " Output result returned by \\ref SwkbdTextCheckCb."]
    pub type SwkbdTextCheckResult = u32;
    #[doc = "< Normal keyboard."]
    pub const SwkbdType_SwkbdType_Normal: root::SwkbdType = 0;
    #[doc = "< Number pad. The buttons at the bottom left/right are only available when they're set by \\ref swkbdConfigSetLeftOptionalSymbolKey / \\ref swkbdConfigSetRightOptionalSymbolKey."]
    pub const SwkbdType_SwkbdType_NumPad: root::SwkbdType = 1;
    #[doc = "< QWERTY (and variants) keyboard only."]
    pub const SwkbdType_SwkbdType_QWERTY: root::SwkbdType = 2;
    #[doc = " Type of keyboard."]
    pub type SwkbdType = u32;
    #[doc = "< Disable space-bar."]
    pub const SwkbdKeyDisableBitmask_Space: root::_bindgen_ty_6 = 2;
    #[doc = "< Disable '@'."]
    pub const SwkbdKeyDisableBitmask_At: root::_bindgen_ty_6 = 4;
    #[doc = "< Disable '%'."]
    pub const SwkbdKeyDisableBitmask_Percent: root::_bindgen_ty_6 = 8;
    #[doc = "< Disable '/'."]
    pub const SwkbdKeyDisableBitmask_ForwardSlash: root::_bindgen_ty_6 = 16;
    #[doc = "< Disable '\\'."]
    pub const SwkbdKeyDisableBitmask_Backslash: root::_bindgen_ty_6 = 32;
    #[doc = "< Disable numbers."]
    pub const SwkbdKeyDisableBitmask_Numbers: root::_bindgen_ty_6 = 64;
    #[doc = "< Used for \\ref swkbdConfigMakePresetDownloadCode."]
    pub const SwkbdKeyDisableBitmask_DownloadCode: root::_bindgen_ty_6 = 128;
    #[doc = "< Used for \\ref swkbdConfigMakePresetUserName. Disables '@', '%', and '\\'."]
    pub const SwkbdKeyDisableBitmask_UserName: root::_bindgen_ty_6 = 256;
    #[doc = " Bitmask for SwkbdArgCommon::keySetDisableBitmask. This disables keys on the keyboard when the corresponding bit(s) are set."]
    pub type _bindgen_ty_6 = u32;
    #[doc = "< The text will be displayed on a line. Also enables displaying the Header and Sub text."]
    pub const SwkbdTextDrawType_SwkbdTextDrawType_Line: root::SwkbdTextDrawType = 0;
    #[doc = "< The text will be displayed in a box."]
    pub const SwkbdTextDrawType_SwkbdTextDrawType_Box: root::SwkbdTextDrawType = 1;
    #[doc = "< Used by \\ref swkbdConfigMakePresetDownloadCode on 5.0.0+. Enables using \\ref SwkbdArgV7 unk_x3e0."]
    pub const SwkbdTextDrawType_SwkbdTextDrawType_DownloadCode: root::SwkbdTextDrawType = 2;
    #[doc = " Value for SwkbdArgCommon::textDrawType. Only applies when stringLenMax is 1..32, otherwise swkbd will only use SwkbdTextDrawType_Box."]
    pub type SwkbdTextDrawType = u32;
    pub const SwkbdRequestCommand_SwkbdRequestCommand_Finalize: root::SwkbdRequestCommand = 4;
    pub const SwkbdRequestCommand_SwkbdRequestCommand_SetUserWordInfo: root::SwkbdRequestCommand =
        6;
    pub const SwkbdRequestCommand_SwkbdRequestCommand_SetCustomizeDic: root::SwkbdRequestCommand =
        7;
    pub const SwkbdRequestCommand_SwkbdRequestCommand_Calc: root::SwkbdRequestCommand = 10;
    pub const SwkbdRequestCommand_SwkbdRequestCommand_SetCustomizedDictionaries:
        root::SwkbdRequestCommand = 11;
    pub const SwkbdRequestCommand_SwkbdRequestCommand_UnsetCustomizedDictionaries:
        root::SwkbdRequestCommand = 12;
    pub const SwkbdRequestCommand_SwkbdRequestCommand_SetChangedStringV2Flag:
        root::SwkbdRequestCommand = 13;
    pub const SwkbdRequestCommand_SwkbdRequestCommand_SetMovedCursorV2Flag:
        root::SwkbdRequestCommand = 14;
    #[doc = " SwkbdInline Interactive input storage request ID."]
    pub type SwkbdRequestCommand = u32;
    pub const SwkbdReplyType_SwkbdReplyType_FinishedInitialize: root::SwkbdReplyType = 0;
    pub const SwkbdReplyType_SwkbdReplyType_ChangedString: root::SwkbdReplyType = 2;
    pub const SwkbdReplyType_SwkbdReplyType_MovedCursor: root::SwkbdReplyType = 3;
    pub const SwkbdReplyType_SwkbdReplyType_MovedTab: root::SwkbdReplyType = 4;
    pub const SwkbdReplyType_SwkbdReplyType_DecidedEnter: root::SwkbdReplyType = 5;
    pub const SwkbdReplyType_SwkbdReplyType_DecidedCancel: root::SwkbdReplyType = 6;
    pub const SwkbdReplyType_SwkbdReplyType_ChangedStringUtf8: root::SwkbdReplyType = 7;
    pub const SwkbdReplyType_SwkbdReplyType_MovedCursorUtf8: root::SwkbdReplyType = 8;
    pub const SwkbdReplyType_SwkbdReplyType_DecidedEnterUtf8: root::SwkbdReplyType = 9;
    pub const SwkbdReplyType_SwkbdReplyType_UnsetCustomizeDic: root::SwkbdReplyType = 10;
    pub const SwkbdReplyType_SwkbdReplyType_ReleasedUserWordInfo: root::SwkbdReplyType = 11;
    pub const SwkbdReplyType_SwkbdReplyType_UnsetCustomizedDictionaries: root::SwkbdReplyType = 12;
    pub const SwkbdReplyType_SwkbdReplyType_ChangedStringV2: root::SwkbdReplyType = 13;
    pub const SwkbdReplyType_SwkbdReplyType_MovedCursorV2: root::SwkbdReplyType = 14;
    pub const SwkbdReplyType_SwkbdReplyType_ChangedStringUtf8V2: root::SwkbdReplyType = 15;
    pub const SwkbdReplyType_SwkbdReplyType_MovedCursorUtf8V2: root::SwkbdReplyType = 16;
    #[doc = " SwkbdInline Interactive output storage reply ID."]
    pub type SwkbdReplyType = u32;
    #[doc = "< Default state from \\ref swkbdInlineCreate, before a state is set by \\ref swkbdInlineUpdate when a reply is received. Also indicates that the applet is no longer running."]
    pub const SwkbdState_SwkbdState_Inactive: root::SwkbdState = 0;
    #[doc = "< Applet is initialized."]
    pub const SwkbdState_SwkbdState_Initialized: root::SwkbdState = 1;
    pub const SwkbdState_SwkbdState_Unknown2: root::SwkbdState = 2;
    #[doc = "< Text is available since a ChangedString* reply was received."]
    pub const SwkbdState_SwkbdState_TextAvailable: root::SwkbdState = 3;
    #[doc = "< The user pressed the ok-button, submitting the text and closing the applet."]
    pub const SwkbdState_SwkbdState_Submitted: root::SwkbdState = 4;
    pub const SwkbdState_SwkbdState_Unknown5: root::SwkbdState = 5;
    #[doc = " SwkbdInline State"]
    pub type SwkbdState = u32;
    #[doc = "< LibAppletMode_Unknown3. This is the default. The user-process must handle displaying the swkbd gfx on the screen. Attempting to get the swkbd gfx data for this currently throws an error (unknown why), SwkbdInlineMode_AppletDisplay should be used instead."]
    pub const SwkbdInlineMode_SwkbdInlineMode_UserDisplay: root::SwkbdInlineMode = 0;
    #[doc = "< LibAppletMode_Background. The applet will handle displaying gfx on the screen."]
    pub const SwkbdInlineMode_SwkbdInlineMode_AppletDisplay: root::SwkbdInlineMode = 1;
    #[doc = " Value for \\ref SwkbdInitializeArg mode. Controls the LibAppletMode when launching the applet."]
    pub type SwkbdInlineMode = u32;
    #[doc = " TextCheck callback set by \\ref swkbdConfigSetTextCheckCallback, for validating the input string when the swkbd ok-button is pressed. This buffer contains an UTF-8 string. This callback should validate the input string, then return a \\ref SwkbdTextCheckResult indicating success/failure. On failure, this function must write an error message to the tmp_string buffer, which will then be displayed by swkbd."]
    pub type SwkbdTextCheckCb = ::core::option::Option<
        unsafe extern "C" fn(
            tmp_string: *mut libc::c_char,
            tmp_string_size: root::size_t,
        ) -> root::SwkbdTextCheckResult,
    >;
    #[doc = " User dictionary word."]
    #[repr(C)]
    pub struct SwkbdDictWord {
        pub unk_x0: [u8; 100usize],
    }
    #[doc = " Input data for SwkbdInline request SetCustomizeDic."]
    #[repr(C)]
    pub struct SwkbdCustomizeDicInfo {
        pub unk_x0: [u8; 112usize],
    }
    #[repr(C, packed)]
    pub struct SwkbdCustomizedDictionarySet {
        #[doc = "< 0x1000-byte aligned buffer."]
        pub buffer: *mut libc::c_void,
        #[doc = "< 0x1000-byte aligned buffer size."]
        pub buffer_size: u32,
        pub entries: [u64; 24usize],
        pub total_entries: u16,
    }
    #[doc = " Base swkbd arg struct."]
    #[repr(C)]
    pub struct SwkbdArgCommon {
        #[doc = "< See \\ref SwkbdType."]
        pub type_: root::SwkbdType,
        pub okButtonText: [u16; 9usize],
        pub leftButtonText: u16,
        pub rightButtonText: u16,
        #[doc = "< Enables dictionary usage when non-zero (including the system dictionary)."]
        pub dicFlag: u8,
        pub pad_x1b: u8,
        #[doc = "< See SwkbdKeyDisableBitmask_*."]
        pub keySetDisableBitmask: u32,
        #[doc = "< Initial cursor position in the string: 0 = start, 1 = end."]
        pub initialCursorPos: u32,
        pub headerText: [u16; 65usize],
        pub subText: [u16; 129usize],
        pub guideText: [u16; 257usize],
        pub pad_x3aa: u16,
        #[doc = "< When non-zero, specifies the max string length. When the input is too long, swkbd will stop accepting more input until text is deleted via the B button (Backspace). See also \\ref SwkbdTextDrawType."]
        pub stringLenMax: u32,
        #[doc = "< When non-zero, specifies the max string length. When the input is too long, swkbd will display an icon and disable the ok-button."]
        pub stringLenMaxExt: u32,
        #[doc = "< Use password: 0 = disable, 1 = enable."]
        pub passwordFlag: u32,
        #[doc = "< See \\ref SwkbdTextDrawType."]
        pub textDrawType: root::SwkbdTextDrawType,
        #[doc = "< Controls whether the Return button is enabled, for newlines input. 0 = disabled, non-zero = enabled."]
        pub returnButtonFlag: u16,
        #[doc = "< When enabled with value 1, the background is blurred."]
        pub blurBackground: u8,
        pub pad_x3bf: u8,
        pub initialStringOffset: u32,
        pub initialStringSize: u32,
        pub userDicOffset: u32,
        pub userDicEntries: root::s32,
        pub textCheckFlag: u8,
    }
    #[repr(C)]
    pub struct SwkbdArgV0 {
        pub arg: root::SwkbdArgCommon,
        pub pad_x3d1: [u8; 7usize],
        #[doc = "< This really doesn't belong in a struct sent to another process, but official sw does this."]
        pub textCheckCb: root::SwkbdTextCheckCb,
    }
    #[doc = " Arg struct for version 0x30007+."]
    #[repr(C)]
    pub struct SwkbdArgV7 {
        pub arg: root::SwkbdArgV0,
        #[doc = "< When set and enabled via \\ref SwkbdTextDrawType, controls displayed text grouping (inserts spaces, without affecting output string)."]
        pub textGrouping: [u32; 8usize],
    }
    #[doc = " Arg struct for version 0x6000B+."]
    #[repr(C)]
    pub struct SwkbdArgVB {
        pub arg: root::SwkbdArgCommon,
        pub pad_x3d1: [u8; 3usize],
        #[doc = "< Same as SwkbdArgV7::textGrouping."]
        pub textGrouping: [u32; 8usize],
        #[doc = "< This is SwkbdCustomizedDictionarySet::entries."]
        pub entries: [u64; 24usize],
        #[doc = "< This is SwkbdCustomizedDictionarySet::total_entries."]
        pub total_entries: u8,
        #[doc = "< [8.0.0+]"]
        pub unkFlag: u8,
        pub pad_x4b6: [u8; 13usize],
        #[doc = "< [8.0.0+]"]
        pub trigger: u8,
        pub pad_x4c4: [u8; 4usize],
    }
    #[repr(C)]
    pub struct SwkbdConfig {
        pub arg: root::SwkbdArgV7,
        pub workbuf: *mut u8,
        pub workbuf_size: root::size_t,
        pub max_dictwords: root::s32,
        pub customizedDictionarySet: root::SwkbdCustomizedDictionarySet,
        pub unkFlag: u8,
        pub trigger: u8,
        pub version: u32,
    }
    #[doc = " InitializeArg for SwkbdInline."]
    #[repr(C)]
    pub struct SwkbdInitializeArg {
        pub unk_x0: u32,
        #[doc = "< See \\ref SwkbdInlineMode. (u8 bool)"]
        pub mode: u8,
        #[doc = "< Only set on 5.0.0+."]
        pub unk_x5: u8,
        pub pad: [u8; 2usize],
    }
    #[repr(C, packed)]
    pub struct SwkbdAppearArg {
        #[doc = "< See \\ref SwkbdType."]
        pub type_: root::SwkbdType,
        pub okButtonText: [u16; 9usize],
        pub leftButtonText: u16,
        pub rightButtonText: u16,
        #[doc = "< Enables dictionary usage when non-zero (including the system dictionary)."]
        pub dicFlag: u8,
        pub unk_x1b: u8,
        #[doc = "< See SwkbdKeyDisableBitmask_*."]
        pub keySetDisableBitmask: u32,
        pub unk_x20: root::s32,
        pub unk_x24: root::s32,
        #[doc = "< Controls whether the Return button is enabled, for newlines input. 0 = disabled, non-zero = enabled."]
        pub returnButtonFlag: u8,
        pub unk_x29: u16,
        pub unk_x2b: u8,
        #[doc = "< Bitmask 0x4: unknown."]
        pub flags: u32,
        pub unk_x30: u8,
        pub unk_x31: [u8; 23usize],
    }
    #[repr(C, packed)]
    pub struct SwkbdInlineCalcArg {
        pub unk_x0: u32,
        #[doc = "< Size of this struct."]
        pub size: u16,
        pub unk_x6: u8,
        pub unk_x7: u8,
        pub flags: u64,
        #[doc = "< Flags bitmask 0x1."]
        pub initArg: root::SwkbdInitializeArg,
        #[doc = "< Flags bitmask 0x2."]
        pub volume: f32,
        #[doc = "< Flags bitmask 0x10."]
        pub cursorPos: root::s32,
        pub appearArg: root::SwkbdAppearArg,
        #[doc = "< Flags bitmask 0x8."]
        pub inputText: [u16; 506usize],
        #[doc = "< Flags bitmask 0x20."]
        pub utf8Mode: u8,
        pub unk_x45d: u8,
        #[doc = "< Flags bitmask 0x8000. Only available with 5.0.0+."]
        pub enableBackspace: u8,
        pub unk_x45f: [u8; 3usize],
        #[doc = "< Flags bitmask 0x200."]
        pub keytopAsFloating: u8,
        #[doc = "< Flags bitmask 0x100."]
        pub footerScalable: u8,
        #[doc = "< Flags bitmask 0x100."]
        pub alphaEnabledInInputMode: u8,
        #[doc = "< Flags bitmask 0x100."]
        pub inputModeFadeType: u8,
        #[doc = "< Flags bitmask 0x200."]
        pub disableTouch: u8,
        #[doc = "< Flags bitmask 0x800."]
        pub disableUSBKeyboard: u8,
        pub unk_x468: [u8; 5usize],
        pub unk_x46d: u16,
        pub unk_x46f: u8,
        #[doc = "< Flags bitmask 0x200."]
        pub keytopScaleX: f32,
        #[doc = "< Flags bitmask 0x200."]
        pub keytopScaleY: f32,
        #[doc = "< Flags bitmask 0x200."]
        pub keytopTranslateX: f32,
        #[doc = "< Flags bitmask 0x200."]
        pub keytopTranslateY: f32,
        #[doc = "< Flags bitmask 0x100."]
        pub keytopBgAlpha: f32,
        #[doc = "< Flags bitmask 0x100."]
        pub footerBgAlpha: f32,
        #[doc = "< Flags bitmask 0x200."]
        pub balloonScale: f32,
        pub unk_x48c: f32,
        pub unk_x490: [u8; 12usize],
        #[doc = "< Flags bitmask: enable=0x2000, disable=0x4000. Only available with 5.0.0+."]
        pub seGroup: u8,
        #[doc = "< [6.0.0+] Enables using the trigger field when set."]
        pub triggerFlag: u8,
        #[doc = "< [6.0.0+] Trigger"]
        pub trigger: u8,
        pub pad_x49f: u8,
    }
    #[doc = " Struct data for SwkbdInline Interactive reply storage ChangedString*, at the end following the string."]
    #[repr(C)]
    pub struct SwkbdChangedStringArg {
        #[doc = "< String length in characters, without NUL-terminator."]
        pub stringLen: u32,
        #[doc = "< Starting cursorPos for the current dictionary word in the current text string. -1 for none."]
        pub dicStartCursorPos: root::s32,
        #[doc = "< Ending cursorPos for the current dictionary word in the current text string. -1 for none."]
        pub dicEndCursorPos: root::s32,
        #[doc = "< Cursor position."]
        pub cursorPos: root::s32,
    }
    #[doc = " Struct data for SwkbdInline Interactive reply storage MovedCursor*, at the end following the string."]
    #[repr(C)]
    pub struct SwkbdMovedCursorArg {
        #[doc = "< String length in characters, without NUL-terminator."]
        pub stringLen: u32,
        #[doc = "< Cursor position."]
        pub cursorPos: root::s32,
    }
    #[doc = " Struct data for SwkbdInline Interactive reply storage MovedTab*, at the end following the string."]
    #[repr(C)]
    pub struct SwkbdMovedTabArg {
        pub unk_x0: u32,
        pub unk_x4: u32,
    }
    #[doc = " Struct data for SwkbdInline Interactive reply storage DecidedEnter*, at the end following the string."]
    #[repr(C)]
    pub struct SwkbdDecidedEnterArg {
        #[doc = "< String length in characters, without NUL-terminator."]
        pub stringLen: u32,
    }
    #[doc = " This callback is used by \\ref swkbdInlineUpdate when handling ChangedString* replies (text changed by the user or by \\ref swkbdInlineSetInputText)."]
    #[doc = " str is the UTF-8 string for the current text."]
    pub type SwkbdChangedStringCb = ::core::option::Option<
        unsafe extern "C" fn(str: *const libc::c_char, arg: *mut root::SwkbdChangedStringArg),
    >;
    #[doc = " This callback is used by \\ref swkbdInlineUpdate when handling ChangedString*V2 replies (text changed by the user or by \\ref swkbdInlineSetInputText)."]
    #[doc = " str is the UTF-8 string for the current text."]
    pub type SwkbdChangedStringV2Cb = ::core::option::Option<
        unsafe extern "C" fn(
            str: *const libc::c_char,
            arg: *mut root::SwkbdChangedStringArg,
            flag: bool,
        ),
    >;
    #[doc = " This callback is used by \\ref swkbdInlineUpdate when handling MovedCursor* replies."]
    #[doc = " str is the UTF-8 string for the current text."]
    pub type SwkbdMovedCursorCb = ::core::option::Option<
        unsafe extern "C" fn(str: *const libc::c_char, arg: *mut root::SwkbdMovedCursorArg),
    >;
    #[doc = " This callback is used by \\ref swkbdInlineUpdate when handling MovedCursor*V2 replies."]
    #[doc = " str is the UTF-8 string for the current text."]
    pub type SwkbdMovedCursorV2Cb = ::core::option::Option<
        unsafe extern "C" fn(
            str: *const libc::c_char,
            arg: *mut root::SwkbdMovedCursorArg,
            flag: bool,
        ),
    >;
    #[doc = " This callback is used by \\ref swkbdInlineUpdate when handling MovedTab* replies."]
    #[doc = " str is the UTF-8 string for the current text."]
    pub type SwkbdMovedTabCb = ::core::option::Option<
        unsafe extern "C" fn(str: *const libc::c_char, arg: *mut root::SwkbdMovedTabArg),
    >;
    #[doc = " This callback is used by \\ref swkbdInlineUpdate when handling DecidedEnter* replies (when the final text was submitted via the button)."]
    #[doc = " str is the UTF-8 string for the current text."]
    pub type SwkbdDecidedEnterCb = ::core::option::Option<
        unsafe extern "C" fn(str: *const libc::c_char, arg: *mut root::SwkbdDecidedEnterArg),
    >;
    #[doc = " InlineKeyboard"]
    #[repr(C)]
    pub struct SwkbdInline {
        pub version: u32,
        pub holder: root::AppletHolder,
        pub calcArg: root::SwkbdInlineCalcArg,
        pub directionalButtonAssignFlag: bool,
        pub state: root::SwkbdState,
        pub dicCustomInitialized: bool,
        pub customizedDictionariesInitialized: bool,
        pub dicStorage: root::AppletStorage,
        pub wordInfoInitialized: bool,
        pub wordInfoStorage: root::AppletStorage,
        pub interactive_tmpbuf: *mut u8,
        pub interactive_tmpbuf_size: root::size_t,
        pub interactive_strbuf: *mut libc::c_char,
        pub interactive_strbuf_size: root::size_t,
        pub finishedInitializeCb: root::VoidFn,
        pub decidedCancelCb: root::VoidFn,
        pub changedStringCb: root::SwkbdChangedStringCb,
        pub changedStringV2Cb: root::SwkbdChangedStringV2Cb,
        pub movedCursorCb: root::SwkbdMovedCursorCb,
        pub movedCursorV2Cb: root::SwkbdMovedCursorV2Cb,
        pub movedTabCb: root::SwkbdMovedTabCb,
        pub decidedEnterCb: root::SwkbdDecidedEnterCb,
        pub releasedUserWordInfoCb: root::VoidFn,
    }
    extern "C" {
        #[doc = " @brief Creates a SwkbdConfig struct."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param max_dictwords Max \\ref SwkbdDictWord entries, 0 for none."]
        pub fn swkbdCreate(c: *mut root::SwkbdConfig, max_dictwords: root::s32) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Closes a SwkbdConfig struct."]
        #[doc = " @param c SwkbdConfig struct."]
        pub fn swkbdClose(c: *mut root::SwkbdConfig);
    }
    extern "C" {
        #[doc = " @brief Clears the args in the SwkbdConfig struct and initializes it with the Default Preset."]
        #[doc = " @note Do not use this before \\ref swkbdCreate."]
        #[doc = " @note Uses the following: swkbdConfigSetType() with \\ref SwkbdType_QWERTY, swkbdConfigSetInitialCursorPos() with value 1, swkbdConfigSetReturnButtonFlag() with value 1, and swkbdConfigSetBlurBackground() with value 1. Pre-5.0.0: swkbdConfigSetTextDrawType() with \\ref SwkbdTextDrawType_Box."]
        #[doc = " @param c SwkbdConfig struct."]
        pub fn swkbdConfigMakePresetDefault(c: *mut root::SwkbdConfig);
    }
    extern "C" {
        #[doc = " @brief Clears the args in the SwkbdConfig struct and initializes it with the Password Preset."]
        #[doc = " @note Do not use this before \\ref swkbdCreate."]
        #[doc = " @note Uses the following: swkbdConfigSetType() with \\ref SwkbdType_QWERTY, swkbdConfigSetInitialCursorPos() with value 1, swkbdConfigSetPasswordFlag() with value 1, and swkbdConfigSetBlurBackground() with value 1."]
        #[doc = " @param c SwkbdConfig struct."]
        pub fn swkbdConfigMakePresetPassword(c: *mut root::SwkbdConfig);
    }
    extern "C" {
        #[doc = " @brief Clears the args in the SwkbdConfig struct and initializes it with the UserName Preset."]
        #[doc = " @note Do not use this before \\ref swkbdCreate."]
        #[doc = " @note Uses the following: swkbdConfigSetType() with \\ref SwkbdType_Normal, swkbdConfigSetKeySetDisableBitmask() with SwkbdKeyDisableBitmask_UserName, swkbdConfigSetInitialCursorPos() with value 1, and swkbdConfigSetBlurBackground() with value 1."]
        #[doc = " @param c SwkbdConfig struct."]
        pub fn swkbdConfigMakePresetUserName(c: *mut root::SwkbdConfig);
    }
    extern "C" {
        #[doc = " @brief Clears the args in the SwkbdConfig struct and initializes it with the DownloadCode Preset."]
        #[doc = " @note Do not use this before \\ref swkbdCreate."]
        #[doc = " @note Uses the following: swkbdConfigSetType() with \\ref SwkbdType_Normal (\\ref SwkbdType_QWERTY on 5.0.0+), swkbdConfigSetKeySetDisableBitmask() with SwkbdKeyDisableBitmask_DownloadCode, swkbdConfigSetInitialCursorPos() with value 1, and swkbdConfigSetBlurBackground() with value 1. 5.0.0+: swkbdConfigSetStringLenMax() with value 16, swkbdConfigSetStringLenMaxExt() with value 1, and swkbdConfigSetTextDrawType() with SwkbdTextDrawType_DownloadCode. Uses swkbdConfigSetTextGrouping() for [0-2] with: 0x3, 0x7, and 0xb."]
        #[doc = " @param c SwkbdConfig struct."]
        pub fn swkbdConfigMakePresetDownloadCode(c: *mut root::SwkbdConfig);
    }
    extern "C" {
        #[doc = " @brief Sets the Ok button text. The default is \"\"."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param str UTF-8 input string."]
        pub fn swkbdConfigSetOkButtonText(c: *mut root::SwkbdConfig, str: *const libc::c_char);
    }
    extern "C" {
        #[doc = " @brief Sets the LeftOptionalSymbolKey, for \\ref SwkbdType_NumPad. The default is \"\"."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param str UTF-8 input string."]
        pub fn swkbdConfigSetLeftOptionalSymbolKey(
            c: *mut root::SwkbdConfig,
            str: *const libc::c_char,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the RightOptionalSymbolKey, for \\ref SwkbdType_NumPad. The default is \"\"."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param str UTF-8 input string."]
        pub fn swkbdConfigSetRightOptionalSymbolKey(
            c: *mut root::SwkbdConfig,
            str: *const libc::c_char,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the Header text. The default is \"\"."]
        #[doc = " @note See SwkbdArgCommon::stringLenMax."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param str UTF-8 input string."]
        pub fn swkbdConfigSetHeaderText(c: *mut root::SwkbdConfig, str: *const libc::c_char);
    }
    extern "C" {
        #[doc = " @brief Sets the Sub text. The default is \"\"."]
        #[doc = " @note See SwkbdArgCommon::stringLenMax."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param str UTF-8 input string."]
        pub fn swkbdConfigSetSubText(c: *mut root::SwkbdConfig, str: *const libc::c_char);
    }
    extern "C" {
        #[doc = " @brief Sets the Guide text. The default is \"\"."]
        #[doc = " @note The swkbd applet only displays this when the current displayed cursor position is 0."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param str UTF-8 input string."]
        pub fn swkbdConfigSetGuideText(c: *mut root::SwkbdConfig, str: *const libc::c_char);
    }
    extern "C" {
        #[doc = " @brief Sets the Initial text. The default is \"\"."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param str UTF-8 input string."]
        pub fn swkbdConfigSetInitialText(c: *mut root::SwkbdConfig, str: *const libc::c_char);
    }
    extern "C" {
        #[doc = " @brief Sets the user dictionary."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param input Input data."]
        #[doc = " @param entries Total entries in the buffer."]
        pub fn swkbdConfigSetDictionary(
            c: *mut root::SwkbdConfig,
            input: *const root::SwkbdDictWord,
            entries: root::s32,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the CustomizedDictionaries."]
        #[doc = " @note Only available on [6.0.0+]."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param dic Input \\ref SwkbdCustomizedDictionarySet"]
        pub fn swkbdConfigSetCustomizedDictionaries(
            c: *mut root::SwkbdConfig,
            dic: *const root::SwkbdCustomizedDictionarySet,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the TextCheck callback."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param cb \\ref SwkbdTextCheckCb callback."]
        pub fn swkbdConfigSetTextCheckCallback(
            c: *mut root::SwkbdConfig,
            cb: root::SwkbdTextCheckCb,
        );
    }
    extern "C" {
        #[doc = " @brief Launch swkbd with the specified config. This will return once swkbd is finished running."]
        #[doc = " @note The string buffer is also used for the buffer passed to the \\ref SwkbdTextCheckCb, when it's set. Hence, in that case this buffer should be large enough to handle TextCheck string input/output. The size passed to the callback is the same size passed here, -1."]
        #[doc = " @param c SwkbdConfig struct."]
        #[doc = " @param out_string UTF-8 Output string buffer."]
        #[doc = " @param out_string_size UTF-8 Output string buffer size, including NUL-terminator."]
        pub fn swkbdShow(
            c: *mut root::SwkbdConfig,
            out_string: *mut libc::c_char,
            out_string_size: root::size_t,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Creates a SwkbdInline object. Only available on [2.0.0+]."]
        #[doc = " @note This is essentially an asynchronous version of the regular swkbd."]
        #[doc = " @note This calls \\ref swkbdInlineSetUtf8Mode internally with flag=true."]
        #[doc = " @param s SwkbdInline object."]
        pub fn swkbdInlineCreate(s: *mut root::SwkbdInline) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Closes a SwkbdInline object. If the applet is running, this will tell the applet to exit, then wait for the applet to exit + applet exit handling."]
        #[doc = " @param s SwkbdInline object."]
        pub fn swkbdInlineClose(s: *mut root::SwkbdInline) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Does setup for \\ref SwkbdInitializeArg and launches the applet with the SwkbdInline object."]
        #[doc = " @note The initArg is cleared, and on [5.0.0+] unk_x5 is set to 1."]
        #[doc = " @param s SwkbdInline object."]
        pub fn swkbdInlineLaunch(s: *mut root::SwkbdInline) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Same as \\ref swkbdInlineLaunch, except mode and unk_x5 for \\ref SwkbdInitializeArg are set to the input params."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param mode Value for SwkbdInitializeArg::mode."]
        #[doc = " @param unk_x5 Value for SwkbdInitializeArg::unk_x5."]
        pub fn swkbdInlineLaunchForLibraryApplet(
            s: *mut root::SwkbdInline,
            mode: u8,
            unk_x5: u8,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Handles updating SwkbdInline state, this should be called periodically."]
        #[doc = " @note Handles applet exit if needed, and also sends the \\ref SwkbdInlineCalcArg to the applet if needed. Hence, this should be called at some point after writing to \\ref SwkbdInlineCalcArg."]
        #[doc = " @note Handles applet Interactive storage output when needed."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param out_state Optional output \\ref SwkbdState."]
        pub fn swkbdInlineUpdate(
            s: *mut root::SwkbdInline,
            out_state: *mut root::SwkbdState,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the FinishedInitialize callback, used by \\ref swkbdInlineUpdate. The default is NULL for none."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param cb Callback"]
        pub fn swkbdInlineSetFinishedInitializeCallback(
            s: *mut root::SwkbdInline,
            cb: root::VoidFn,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the DecidedCancel callback, used by \\ref swkbdInlineUpdate. The default is NULL for none."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param cb Callback"]
        pub fn swkbdInlineSetDecidedCancelCallback(s: *mut root::SwkbdInline, cb: root::VoidFn);
    }
    extern "C" {
        #[doc = " @brief Sets the ChangedString callback, used by \\ref swkbdInlineUpdate. The default is NULL for none."]
        #[doc = " @note This clears the callback set by \\ref swkbdInlineSetChangedStringV2Callback."]
        #[doc = " @note This should be called after \\ref swkbdInlineLaunch / \\ref swkbdInlineLaunchForLibraryApplet."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param cb \\ref SwkbdChangedStringCb Callback"]
        pub fn swkbdInlineSetChangedStringCallback(
            s: *mut root::SwkbdInline,
            cb: root::SwkbdChangedStringCb,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the ChangedStringV2 callback, used by \\ref swkbdInlineUpdate. The default is NULL for none."]
        #[doc = " @note Only available with [8.0.0+]."]
        #[doc = " @note This must be called after \\ref swkbdInlineLaunch / \\ref swkbdInlineLaunchForLibraryApplet."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param cb \\ref SwkbdChangedStringV2Cb Callback"]
        pub fn swkbdInlineSetChangedStringV2Callback(
            s: *mut root::SwkbdInline,
            cb: root::SwkbdChangedStringV2Cb,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the MovedCursor callback, used by \\ref swkbdInlineUpdate. The default is NULL for none."]
        #[doc = " @note This clears the callback set by \\ref swkbdInlineSetMovedCursorV2Callback."]
        #[doc = " @note This should be called after \\ref swkbdInlineLaunch / \\ref swkbdInlineLaunchForLibraryApplet."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param cb \\ref SwkbdMovedCursorCb Callback"]
        pub fn swkbdInlineSetMovedCursorCallback(
            s: *mut root::SwkbdInline,
            cb: root::SwkbdMovedCursorCb,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the MovedCursorV2 callback, used by \\ref swkbdInlineUpdate. The default is NULL for none."]
        #[doc = " @note Only available with [8.0.0+]."]
        #[doc = " @note This must be called after \\ref swkbdInlineLaunch / \\ref swkbdInlineLaunchForLibraryApplet."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param cb \\ref SwkbdMovedCursorV2Cb Callback"]
        pub fn swkbdInlineSetMovedCursorV2Callback(
            s: *mut root::SwkbdInline,
            cb: root::SwkbdMovedCursorV2Cb,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the MovedTab callback, used by \\ref swkbdInlineUpdate. The default is NULL for none."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param cb \\ref SwkbdMovedTabCb Callback"]
        pub fn swkbdInlineSetMovedTabCallback(s: *mut root::SwkbdInline, cb: root::SwkbdMovedTabCb);
    }
    extern "C" {
        #[doc = " @brief Sets the DecidedEnter callback, used by \\ref swkbdInlineUpdate. The default is NULL for none."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param cb \\ref SwkbdDecidedEnterCb Callback"]
        pub fn swkbdInlineSetDecidedEnterCallback(
            s: *mut root::SwkbdInline,
            cb: root::SwkbdDecidedEnterCb,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the ReleasedUserWordInfo callback, used by \\ref swkbdInlineUpdate. The default is NULL for none."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param cb Callback"]
        pub fn swkbdInlineSetReleasedUserWordInfoCallback(
            s: *mut root::SwkbdInline,
            cb: root::VoidFn,
        );
    }
    extern "C" {
        #[doc = " @brief Appear the kbd and set \\ref SwkbdAppearArg."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @note Wrapper for \\ref swkbdInlineAppearEx, with trigger=0."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param arg Input SwkbdAppearArg."]
        pub fn swkbdInlineAppear(s: *mut root::SwkbdInline, arg: *const root::SwkbdAppearArg);
    }
    extern "C" {
        #[doc = " @brief Appear the kbd and set \\ref SwkbdAppearArg."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param arg Input SwkbdAppearArg."]
        #[doc = " @param trigger Trigger, default is 0. Requires [6.0.0+], on eariler versions this will always use value 0 internally."]
        pub fn swkbdInlineAppearEx(
            s: *mut root::SwkbdInline,
            arg: *const root::SwkbdAppearArg,
            trigger: u8,
        );
    }
    extern "C" {
        #[doc = " @brief Disappear the kbd."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        pub fn swkbdInlineDisappear(s: *mut root::SwkbdInline);
    }
    extern "C" {
        #[doc = " @brief Creates a \\ref SwkbdAppearArg which can then be passed to \\ref swkbdInlineAppear. arg is initialized with the defaults, with type being set to the input type."]
        #[doc = " @param arg Output \\ref SwkbdAppearArg."]
        #[doc = " @param type \\ref SwkbdType type"]
        pub fn swkbdInlineMakeAppearArg(arg: *mut root::SwkbdAppearArg, type_: root::SwkbdType);
    }
    extern "C" {
        #[doc = " @brief Sets okButtonText for the specified SwkbdAppearArg, which was previously initialized with \\ref swkbdInlineMakeAppearArg."]
        #[doc = " @param arg \\ref SwkbdAppearArg"]
        #[doc = " @param str Input UTF-8 string for the Ok button text, this can be empty/NULL to use the default."]
        pub fn swkbdInlineAppearArgSetOkButtonText(
            arg: *mut root::SwkbdAppearArg,
            str: *const libc::c_char,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the LeftButtonText, for \\ref SwkbdType_NumPad. The default is \"\". Equivalent to \\ref swkbdConfigSetLeftOptionalSymbolKey."]
        #[doc = " @param arg \\ref SwkbdAppearArg, previously initialized by \\ref swkbdInlineMakeAppearArg."]
        #[doc = " @param str UTF-8 input string."]
        pub fn swkbdInlineAppearArgSetLeftButtonText(
            arg: *mut root::SwkbdAppearArg,
            str: *const libc::c_char,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the RightButtonText, for \\ref SwkbdType_NumPad. The default is \"\". Equivalent to \\ref swkbdConfigSetRightOptionalSymbolKey."]
        #[doc = " @param arg \\ref SwkbdAppearArg, previously initialized by \\ref swkbdInlineMakeAppearArg."]
        #[doc = " @param str UTF-8 input string."]
        pub fn swkbdInlineAppearArgSetRightButtonText(
            arg: *mut root::SwkbdAppearArg,
            str: *const libc::c_char,
        );
    }
    extern "C" {
        #[doc = " @brief Sets the audio volume."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param volume Volume"]
        pub fn swkbdInlineSetVolume(s: *mut root::SwkbdInline, volume: f32);
    }
    extern "C" {
        #[doc = " @brief Sets the current input text string. Overrides the entire user input string if the user previously entered any text."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @note This will not affect the cursor position, see \\ref swkbdInlineSetCursorPos for that."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param str UTF-8 input string."]
        pub fn swkbdInlineSetInputText(s: *mut root::SwkbdInline, str: *const libc::c_char);
    }
    extern "C" {
        #[doc = " @brief Sets the cursor character position in the string."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param pos Position"]
        pub fn swkbdInlineSetCursorPos(s: *mut root::SwkbdInline, pos: root::s32);
    }
    extern "C" {
        #[doc = " @brief Sets the UserWordInfo."]
        #[doc = " @note Not avilable when \\ref SwkbdState is above ::SwkbdState_Initialized. Can't be used if this was already used previously."]
        #[doc = " @note The specified buffer must not be used after this, until \\ref swkbdInlineClose is used."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards."]
        #[doc = " @note If input==NULL or total_entries==0, this will just call \\ref swkbdInlineUnsetUserWordInfo internally."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param input Input data."]
        #[doc = " @param entries Total entries in the buffer."]
        pub fn swkbdInlineSetUserWordInfo(
            s: *mut root::SwkbdInline,
            input: *const root::SwkbdDictWord,
            entries: root::s32,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Request UnsetUserWordInfo."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @note Not avilable when \\ref SwkbdState is above ::SwkbdState_Initialized."]
        #[doc = " @param s SwkbdInline object."]
        pub fn swkbdInlineUnsetUserWordInfo(s: *mut root::SwkbdInline) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets the utf8Mode."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @note Automatically used internally by \\ref swkbdInlineCreate."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param flag Flag"]
        pub fn swkbdInlineSetUtf8Mode(s: *mut root::SwkbdInline, flag: bool);
    }
    extern "C" {
        #[doc = " @brief Sets the CustomizeDic."]
        #[doc = " @note Not avilable when \\ref SwkbdState is above ::SwkbdState_Initialized. Can't be used if this or \\ref swkbdInlineSetCustomizedDictionaries was already used previously."]
        #[doc = " @note The specified buffer must not be used after this, until \\ref swkbdInlineClose is used. However, it will also become available once \\ref swkbdInlineUpdate handles SwkbdReplyType_UnsetCustomizeDic internally."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param buffer 0x1000-byte aligned buffer."]
        #[doc = " @param size 0x1000-byte aligned buffer size."]
        #[doc = " @param info Input \\ref SwkbdCustomizeDicInfo"]
        pub fn swkbdInlineSetCustomizeDic(
            s: *mut root::SwkbdInline,
            buffer: *mut libc::c_void,
            size: root::size_t,
            info: *mut root::SwkbdCustomizeDicInfo,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Request UnsetCustomizeDic."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @note Not avilable when \\ref SwkbdState is above ::SwkbdState_Initialized."]
        #[doc = " @param s SwkbdInline object."]
        pub fn swkbdInlineUnsetCustomizeDic(s: *mut root::SwkbdInline);
    }
    extern "C" {
        #[doc = " @brief Sets the CustomizedDictionaries."]
        #[doc = " @note Not avilable when \\ref SwkbdState is above ::SwkbdState_Initialized. Can't be used if this or \\ref swkbdInlineSetCustomizeDic was already used previously."]
        #[doc = " @note The specified buffer in dic must not be used after this, until \\ref swkbdInlineClose is used. However, it will also become available once \\ref swkbdInlineUpdate handles SwkbdReplyType_UnsetCustomizedDictionaries internally."]
        #[doc = " @note Only available on [6.0.0+]."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param dic Input \\ref SwkbdCustomizedDictionarySet"]
        pub fn swkbdInlineSetCustomizedDictionaries(
            s: *mut root::SwkbdInline,
            dic: *const root::SwkbdCustomizedDictionarySet,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Request UnsetCustomizedDictionaries."]
        #[doc = " @note Not avilable when \\ref SwkbdState is above ::SwkbdState_Initialized."]
        #[doc = " @note Only available on [6.0.0+]."]
        #[doc = " @param s SwkbdInline object."]
        pub fn swkbdInlineUnsetCustomizedDictionaries(s: *mut root::SwkbdInline) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Sets InputModeFadeType."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param type Type"]
        pub fn swkbdInlineSetInputModeFadeType(s: *mut root::SwkbdInline, type_: u8);
    }
    extern "C" {
        #[doc = " @brief Sets AlphaEnabledInInputMode."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param flag Flag"]
        pub fn swkbdInlineSetAlphaEnabledInInputMode(s: *mut root::SwkbdInline, flag: bool);
    }
    extern "C" {
        #[doc = " @brief Sets KeytopBgAlpha."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param alpha Alpha, clamped to range 0.0f..1.0f."]
        pub fn swkbdInlineSetKeytopBgAlpha(s: *mut root::SwkbdInline, alpha: f32);
    }
    extern "C" {
        #[doc = " @brief Sets FooterBgAlpha."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param alpha Alpha, clamped to range 0.0f..1.0f."]
        pub fn swkbdInlineSetFooterBgAlpha(s: *mut root::SwkbdInline, alpha: f32);
    }
    extern "C" {
        #[doc = " @brief Sets gfx scaling. Configures KeytopScale* and BalloonScale based on the input value."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param scale Scale"]
        pub fn swkbdInlineSetKeytopScale(s: *mut root::SwkbdInline, scale: f32);
    }
    extern "C" {
        #[doc = " @brief Sets gfx translation for the displayed swkbd image position."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param x X"]
        #[doc = " @param y Y"]
        pub fn swkbdInlineSetKeytopTranslate(s: *mut root::SwkbdInline, x: f32, y: f32);
    }
    extern "C" {
        #[doc = " @brief Sets KeytopAsFloating."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param flag Flag"]
        pub fn swkbdInlineSetKeytopAsFloating(s: *mut root::SwkbdInline, flag: bool);
    }
    extern "C" {
        #[doc = " @brief Sets FooterScalable."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param flag Flag"]
        pub fn swkbdInlineSetFooterScalable(s: *mut root::SwkbdInline, flag: bool);
    }
    extern "C" {
        #[doc = " @brief Sets whether touch is enabled. The default is enabled."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param flag Flag"]
        pub fn swkbdInlineSetTouchFlag(s: *mut root::SwkbdInline, flag: bool);
    }
    extern "C" {
        #[doc = " @brief Sets whether USB-keyboard is enabled. The default is enabled."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param flag Flag"]
        pub fn swkbdInlineSetUSBKeyboardFlag(s: *mut root::SwkbdInline, flag: bool);
    }
    extern "C" {
        #[doc = " @brief Sets whether DirectionalButtonAssign is enabled. The default is disabled."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @note Only available on [4.0.0+]."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param flag Flag"]
        pub fn swkbdInlineSetDirectionalButtonAssignFlag(s: *mut root::SwkbdInline, flag: bool);
    }
    extern "C" {
        #[doc = " @brief Sets whether the specified SeGroup (sound effect) is enabled. The default is enabled."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect. If called again with a different seGroup, \\ref swkbdInlineUpdate must be called prior to calling this again."]
        #[doc = " @note Only available on [5.0.0+]."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param seGroup SeGroup"]
        #[doc = " @param flag Flag"]
        pub fn swkbdInlineSetSeGroup(s: *mut root::SwkbdInline, seGroup: u8, flag: bool);
    }
    extern "C" {
        #[doc = " @brief Sets whether the backspace button is enabled. The default is enabled."]
        #[doc = " @note \\ref swkbdInlineUpdate must be called at some point afterwards for this to take affect."]
        #[doc = " @note Only available on [5.0.0+]."]
        #[doc = " @param s SwkbdInline object."]
        #[doc = " @param flag Flag"]
        pub fn swkbdInlineSetBackspaceFlag(s: *mut root::SwkbdInline, flag: bool);
    }
    #[doc = " Structure representing an entry in the homebrew environment configuration."]
    #[repr(C)]
    pub struct ConfigEntry {
        #[doc = "< Type of entry"]
        pub Key: u32,
        #[doc = "< Entry flags"]
        pub Flags: u32,
        #[doc = "< Entry arguments (type-specific)"]
        pub Value: [u64; 2usize],
    }
    #[doc = "< Specifies that the entry **must** be processed by the homebrew application."]
    pub const EntryFlag_IsMandatory: root::_bindgen_ty_7 = 1;
    #[doc = " Entry flags"]
    pub type _bindgen_ty_7 = u32;
    #[doc = "< Entry list terminator."]
    pub const EntryType_EndOfList: root::_bindgen_ty_8 = 0;
    #[doc = "< Provides the handle to the main thread."]
    pub const EntryType_MainThreadHandle: root::_bindgen_ty_8 = 1;
    #[doc = "< Provides a buffer containing information about the next homebrew application to load."]
    pub const EntryType_NextLoadPath: root::_bindgen_ty_8 = 2;
    #[doc = "< Provides heap override information."]
    pub const EntryType_OverrideHeap: root::_bindgen_ty_8 = 3;
    #[doc = "< Provides service override information."]
    pub const EntryType_OverrideService: root::_bindgen_ty_8 = 4;
    #[doc = "< Provides argv."]
    pub const EntryType_Argv: root::_bindgen_ty_8 = 5;
    #[doc = "< Provides syscall availability hints."]
    pub const EntryType_SyscallAvailableHint: root::_bindgen_ty_8 = 6;
    #[doc = "< Provides APT applet type."]
    pub const EntryType_AppletType: root::_bindgen_ty_8 = 7;
    #[doc = "< Indicates that APT is broken and should not be used."]
    pub const EntryType_AppletWorkaround: root::_bindgen_ty_8 = 8;
    #[doc = "< Unused/reserved entry type, formerly used by StdioSockets."]
    pub const EntryType_Reserved9: root::_bindgen_ty_8 = 9;
    #[doc = "< Provides the process handle."]
    pub const EntryType_ProcessHandle: root::_bindgen_ty_8 = 10;
    #[doc = "< Provides the last load result."]
    pub const EntryType_LastLoadResult: root::_bindgen_ty_8 = 11;
    #[doc = "< Provides random data used to seed the pseudo-random number generator."]
    pub const EntryType_RandomSeed: root::_bindgen_ty_8 = 14;
    pub type _bindgen_ty_8 = u32;
    #[doc = "< Use AppletType_Application instead of AppletType_SystemApplication."]
    pub const EnvAppletFlags_ApplicationOverride: root::_bindgen_ty_9 = 1;
    pub type _bindgen_ty_9 = u32;
    #[doc = " Loader return function."]
    pub type LoaderReturnFn =
        ::core::option::Option<unsafe extern "C" fn(result_code: libc::c_int)>;
    extern "C" {
        #[doc = " @brief Parses the homebrew loader environment block (internally called)."]
        #[doc = " @param ctx Reserved."]
        #[doc = " @param main_thread Reserved."]
        #[doc = " @param saved_lr Reserved."]
        pub fn envSetup(
            ctx: *mut libc::c_void,
            main_thread: root::Handle,
            saved_lr: root::LoaderReturnFn,
        );
    }
    extern "C" {
        #[doc = " Retrieves the handle to the main thread."]
        pub fn envGetMainThreadHandle() -> root::Handle;
    }
    extern "C" {
        #[doc = " Returns true if the application is running as NSO, otherwise NRO."]
        pub fn envIsNso() -> bool;
    }
    extern "C" {
        #[doc = " Returns true if the environment has a heap override."]
        pub fn envHasHeapOverride() -> bool;
    }
    extern "C" {
        #[doc = " Returns the address of the overriden heap."]
        pub fn envGetHeapOverrideAddr() -> *mut libc::c_void;
    }
    extern "C" {
        #[doc = " Returns the size of the overriden heap."]
        pub fn envGetHeapOverrideSize() -> u64;
    }
    extern "C" {
        #[doc = " Returns true if the environment has an argv array."]
        pub fn envHasArgv() -> bool;
    }
    extern "C" {
        #[doc = " Returns the pointer to the argv array."]
        pub fn envGetArgv() -> *mut libc::c_void;
    }
    extern "C" {
        #[doc = " @brief Returns whether a syscall is hinted to be available."]
        #[doc = " @param svc Syscall number to test."]
        #[doc = " @returns true if the syscall is available."]
        pub fn envIsSyscallHinted(svc: u8) -> bool;
    }
    extern "C" {
        #[doc = " Returns the handle to the running homebrew process."]
        pub fn envGetOwnProcessHandle() -> root::Handle;
    }
    extern "C" {
        #[doc = " Returns the loader's return function, to be called on program exit."]
        pub fn envGetExitFuncPtr() -> root::LoaderReturnFn;
    }
    extern "C" {
        #[doc = " Sets the return function to be called on program exit."]
        pub fn envSetExitFuncPtr(addr: root::LoaderReturnFn);
    }
    extern "C" {
        #[doc = " @brief Configures the next homebrew application to load."]
        #[doc = " @param path Path to the next homebrew application to load (.nro)."]
        #[doc = " @param argv Argument string to pass."]
        pub fn envSetNextLoad(path: *const libc::c_char, argv: *const libc::c_char)
            -> root::Result;
    }
    extern "C" {
        #[doc = " Returns true if the environment supports envSetNextLoad."]
        pub fn envHasNextLoad() -> bool;
    }
    extern "C" {
        #[doc = " Returns the Result from the last NRO."]
        pub fn envGetLastLoadResult() -> root::Result;
    }
    extern "C" {
        #[doc = " Returns true if the environment provides a random seed."]
        pub fn envHasRandomSeed() -> bool;
    }
    extern "C" {
        #[doc = " @brief Retrieves the random seed provided by the environment."]
        #[doc = " @param out Pointer to a u64[2] buffer which will contain the random seed on return."]
        pub fn envGetRandomSeed(out: *mut u64);
    }
    extern "C" {
        #[doc = " Returns the current HOS version that was previously set with \\ref hosversionSet. If version initialization fails during startup (such as in the case set:sys is not available), this function returns zero."]
        pub fn hosversionGet() -> u32;
    }
    extern "C" {
        #[doc = " Sets or overrides the current HOS version. This function is normally called automatically by libnx on startup with the version info obtained with \\ref setsysGetFirmwareVersion."]
        pub fn hosversionSet(version: u32);
    }
    pub type _ssize_t = libc::c_long;
    pub type u_int8_t = root::__uint8_t;
    pub type u_int16_t = root::__uint16_t;
    pub type u_int32_t = root::__uint32_t;
    pub type u_int64_t = root::__uint64_t;
    pub type register_t = libc::c_int;
    pub type __blkcnt_t = libc::c_long;
    pub type __blksize_t = libc::c_long;
    pub type __fsblkcnt_t = root::__uint64_t;
    pub type __fsfilcnt_t = root::__uint32_t;
    pub type _off_t = libc::c_long;
    pub type __pid_t = libc::c_int;
    pub type __dev_t = libc::c_short;
    pub type __uid_t = libc::c_ushort;
    pub type __gid_t = libc::c_ushort;
    pub type __id_t = root::__uint32_t;
    pub type __ino_t = libc::c_ushort;
    pub type __mode_t = root::__uint32_t;
    pub type _off64_t = libc::c_longlong;
    pub type __off_t = root::_off_t;
    pub type __loff_t = root::_off64_t;
    pub type __key_t = libc::c_long;
    pub type _fpos_t = libc::c_long;
    pub type __size_t = libc::c_ulong;
    pub type __ssize_t = root::_ssize_t;
    pub type wint_t = libc::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct _mbstate_t {
        pub __count: libc::c_int,
        pub __value: root::_mbstate_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union _mbstate_t__bindgen_ty_1 {
        pub __wch: root::wint_t,
        pub __wchb: [libc::c_uchar; 4usize],
        _bindgen_union_align: u32,
    }
    pub type _flock_t = root::_LOCK_RECURSIVE_T;
    pub type _iconv_t = *mut libc::c_void;
    pub type __clock_t = libc::c_ulong;
    pub type __time_t = libc::c_long;
    pub type __clockid_t = libc::c_ulong;
    pub type __timer_t = libc::c_ulong;
    pub type __sa_family_t = root::__uint8_t;
    pub type __socklen_t = root::__uint32_t;
    pub type __nl_item = libc::c_int;
    pub type __nlink_t = libc::c_ushort;
    pub type __suseconds_t = libc::c_long;
    pub type __useconds_t = libc::c_ulong;
    pub type __sigset_t = libc::c_ulong;
    pub type suseconds_t = root::__suseconds_t;
    pub type time_t = libc::c_long;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::time_t,
        pub tv_usec: root::suseconds_t,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::time_t,
        pub tv_nsec: libc::c_long,
    }
    extern "C" {
        pub fn timespec2nsec(ts: *const root::timespec) -> root::__uint64_t;
    }
    extern "C" {
        pub fn abstimespec2nsec(
            clock_id: root::__clockid_t,
            ts: *const root::timespec,
        ) -> root::__uint64_t;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct itimerspec {
        pub it_interval: root::timespec,
        pub it_value: root::timespec,
    }
    pub type sigset_t = root::__sigset_t;
    pub type fd_mask = libc::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _types_fd_set {
        pub fds_bits: [root::fd_mask; 1usize],
    }
    extern "C" {
        pub fn select(
            __n: libc::c_int,
            __readfds: *mut root::_types_fd_set,
            __writefds: *mut root::_types_fd_set,
            __exceptfds: *mut root::_types_fd_set,
            __timeout: *mut root::timeval,
        ) -> libc::c_int;
    }
    extern "C" {
        pub fn pselect(
            __n: libc::c_int,
            __readfds: *mut root::_types_fd_set,
            __writefds: *mut root::_types_fd_set,
            __exceptfds: *mut root::_types_fd_set,
            __timeout: *const root::timespec,
            __set: *const root::sigset_t,
        ) -> libc::c_int;
    }
    pub type in_addr_t = root::__uint32_t;
    pub type in_port_t = root::__uint16_t;
    pub type u_char = libc::c_uchar;
    pub type u_short = libc::c_ushort;
    pub type u_int = libc::c_uint;
    pub type u_long = libc::c_ulong;
    pub type ushort = libc::c_ushort;
    pub type uint = libc::c_uint;
    pub type ulong = libc::c_ulong;
    pub type blkcnt_t = root::__blkcnt_t;
    pub type blksize_t = root::__blksize_t;
    pub type clock_t = libc::c_ulong;
    pub type daddr_t = libc::c_long;
    pub type caddr_t = *mut libc::c_char;
    pub type fsblkcnt_t = root::__fsblkcnt_t;
    pub type fsfilcnt_t = root::__fsfilcnt_t;
    pub type id_t = root::__id_t;
    pub type ino_t = root::__ino_t;
    pub type off_t = root::__off_t;
    pub type dev_t = root::__dev_t;
    pub type uid_t = root::__uid_t;
    pub type gid_t = root::__gid_t;
    pub type pid_t = root::__pid_t;
    pub type key_t = root::__key_t;
    pub type ssize_t = root::_ssize_t;
    pub type mode_t = root::__mode_t;
    pub type nlink_t = root::__nlink_t;
    pub type clockid_t = root::__clockid_t;
    pub type timer_t = root::__timer_t;
    pub type useconds_t = root::__useconds_t;
    pub type sbintime_t = root::__int64_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sched_param {
        pub sched_priority: libc::c_int,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __pthread_t {
        _unused: [u8; 0],
    }
    pub type pthread_t = *mut root::__pthread_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct pthread_attr_t {
        pub stackaddr: *mut libc::c_void,
        pub stacksize: libc::c_int,
        pub schedparam: root::sched_param,
        pub detachstate: libc::c_int,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct pthread_mutex_t {
        pub type_: libc::c_int,
        pub __bindgen_anon_1: root::pthread_mutex_t__bindgen_ty_1,
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union pthread_mutex_t__bindgen_ty_1 {
        pub normal: root::_LOCK_T,
        pub recursive: root::_LOCK_RECURSIVE_T,
        _bindgen_union_align: [u32; 3usize],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct pthread_mutexattr_t {
        pub _address: u8,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct pthread_cond_t {
        pub clock_id: root::clockid_t,
        pub cond: root::_COND_T,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct pthread_condattr_t {
        pub clock_id: root::clockid_t,
    }
    pub type pthread_key_t = root::__uint32_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct pthread_once_t {
        pub status: libc::c_int,
    }
    extern "C" {
        #[doc = " Convert a UTF-8 sequence into a UTF-32 codepoint"]
        #[doc = ""]
        #[doc = "  @param[out] out Output codepoint"]
        #[doc = "  @param[in]  in  Input sequence"]
        #[doc = ""]
        #[doc = "  @returns number of input code units consumed"]
        #[doc = "  @returns -1 for error"]
        pub fn decode_utf8(out: *mut u32, in_: *const u8) -> root::ssize_t;
    }
    extern "C" {
        #[doc = " Convert a UTF-16 sequence into a UTF-32 codepoint"]
        #[doc = ""]
        #[doc = "  @param[out] out Output codepoint"]
        #[doc = "  @param[in]  in  Input sequence"]
        #[doc = ""]
        #[doc = "  @returns number of input code units consumed"]
        #[doc = "  @returns -1 for error"]
        pub fn decode_utf16(out: *mut u32, in_: *const u16) -> root::ssize_t;
    }
    extern "C" {
        #[doc = " Convert a UTF-32 codepoint into a UTF-8 sequence"]
        #[doc = ""]
        #[doc = "  @param[out] out Output sequence"]
        #[doc = "  @param[in]  in  Input codepoint"]
        #[doc = ""]
        #[doc = "  @returns number of output code units produced"]
        #[doc = "  @returns -1 for error"]
        #[doc = ""]
        #[doc = "  @note \\a out must be able to store 4 code units"]
        pub fn encode_utf8(out: *mut u8, in_: u32) -> root::ssize_t;
    }
    extern "C" {
        #[doc = " Convert a UTF-32 codepoint into a UTF-16 sequence"]
        #[doc = ""]
        #[doc = "  @param[out] out Output sequence"]
        #[doc = "  @param[in]  in  Input codepoint"]
        #[doc = ""]
        #[doc = "  @returns number of output code units produced"]
        #[doc = "  @returns -1 for error"]
        #[doc = ""]
        #[doc = "  @note \\a out must be able to store 2 code units"]
        pub fn encode_utf16(out: *mut u16, in_: u32) -> root::ssize_t;
    }
    extern "C" {
        #[doc = " Convert a UTF-8 sequence into a UTF-16 sequence"]
        #[doc = ""]
        #[doc = "  Fills the output buffer up to \\a len code units."]
        #[doc = "  Returns the number of code units that the input would produce;"]
        #[doc = "  if it returns greater than \\a len, the output has been"]
        #[doc = "  truncated."]
        #[doc = ""]
        #[doc = "  @param[out] out Output sequence"]
        #[doc = "  @param[in]  in  Input sequence (null-terminated)"]
        #[doc = "  @param[in]  len Output length"]
        #[doc = ""]
        #[doc = "  @returns number of output code units produced"]
        #[doc = "  @returns -1 for error"]
        #[doc = ""]
        #[doc = "  @note \\a out is not null-terminated"]
        pub fn utf8_to_utf16(out: *mut u16, in_: *const u8, len: root::size_t) -> root::ssize_t;
    }
    extern "C" {
        #[doc = " Convert a UTF-8 sequence into a UTF-32 sequence"]
        #[doc = ""]
        #[doc = "  Fills the output buffer up to \\a len code units."]
        #[doc = "  Returns the number of code units that the input would produce;"]
        #[doc = "  if it returns greater than \\a len, the output has been"]
        #[doc = "  truncated."]
        #[doc = ""]
        #[doc = "  @param[out] out Output sequence"]
        #[doc = "  @param[in]  in  Input sequence (null-terminated)"]
        #[doc = "  @param[in]  len Output length"]
        #[doc = ""]
        #[doc = "  @returns number of output code units produced"]
        #[doc = "  @returns -1 for error"]
        #[doc = ""]
        #[doc = "  @note \\a out is not null-terminated"]
        pub fn utf8_to_utf32(out: *mut u32, in_: *const u8, len: root::size_t) -> root::ssize_t;
    }
    extern "C" {
        #[doc = " Convert a UTF-16 sequence into a UTF-8 sequence"]
        #[doc = ""]
        #[doc = "  Fills the output buffer up to \\a len code units."]
        #[doc = "  Returns the number of code units that the input would produce;"]
        #[doc = "  if it returns greater than \\a len, the output has been"]
        #[doc = "  truncated."]
        #[doc = ""]
        #[doc = "  @param[out] out Output sequence"]
        #[doc = "  @param[in]  in  Input sequence (null-terminated)"]
        #[doc = "  @param[in]  len Output length"]
        #[doc = ""]
        #[doc = "  @returns number of output code units produced"]
        #[doc = "  @returns -1 for error"]
        #[doc = ""]
        #[doc = "  @note \\a out is not null-terminated"]
        pub fn utf16_to_utf8(out: *mut u8, in_: *const u16, len: root::size_t) -> root::ssize_t;
    }
    extern "C" {
        #[doc = " Convert a UTF-16 sequence into a UTF-32 sequence"]
        #[doc = ""]
        #[doc = "  Fills the output buffer up to \\a len code units."]
        #[doc = "  Returns the number of code units that the input would produce;"]
        #[doc = "  if it returns greater than \\a len, the output has been"]
        #[doc = "  truncated."]
        #[doc = ""]
        #[doc = "  @param[out] out Output sequence"]
        #[doc = "  @param[in]  in  Input sequence (null-terminated)"]
        #[doc = "  @param[in]  len Output length"]
        #[doc = ""]
        #[doc = "  @returns number of output code units produced"]
        #[doc = "  @returns -1 for error"]
        #[doc = ""]
        #[doc = "  @note \\a out is not null-terminated"]
        pub fn utf16_to_utf32(out: *mut u32, in_: *const u16, len: root::size_t) -> root::ssize_t;
    }
    extern "C" {
        #[doc = " Convert a UTF-32 sequence into a UTF-8 sequence"]
        #[doc = ""]
        #[doc = "  Fills the output buffer up to \\a len code units."]
        #[doc = "  Returns the number of code units that the input would produce;"]
        #[doc = "  if it returns greater than \\a len, the output has been"]
        #[doc = "  truncated."]
        #[doc = ""]
        #[doc = "  @param[out] out Output sequence"]
        #[doc = "  @param[in]  in  Input sequence (null-terminated)"]
        #[doc = "  @param[in]  len Output length"]
        #[doc = ""]
        #[doc = "  @returns number of output code units produced"]
        #[doc = "  @returns -1 for error"]
        #[doc = ""]
        #[doc = "  @note \\a out is not null-terminated"]
        pub fn utf32_to_utf8(out: *mut u8, in_: *const u32, len: root::size_t) -> root::ssize_t;
    }
    extern "C" {
        #[doc = " Convert a UTF-32 sequence into a UTF-16 sequence"]
        #[doc = ""]
        #[doc = "  @param[out] out Output sequence"]
        #[doc = "  @param[in]  in  Input sequence (null-terminated)"]
        #[doc = "  @param[in]  len Output length"]
        #[doc = ""]
        #[doc = "  @returns number of output code units produced"]
        #[doc = "  @returns -1 for error"]
        #[doc = ""]
        #[doc = "  @note \\a out is not null-terminated"]
        pub fn utf32_to_utf16(out: *mut u16, in_: *const u32, len: root::size_t) -> root::ssize_t;
    }
    #[doc = " Renderer interface for the console."]
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ConsoleRenderer {
        pub init:
            ::core::option::Option<unsafe extern "C" fn(con: *mut root::PrintConsole) -> bool>,
        pub deinit: ::core::option::Option<unsafe extern "C" fn(con: *mut root::PrintConsole)>,
        pub drawChar: ::core::option::Option<
            unsafe extern "C" fn(
                con: *mut root::PrintConsole,
                x: libc::c_int,
                y: libc::c_int,
                c: libc::c_int,
            ),
        >,
        pub scrollWindow:
            ::core::option::Option<unsafe extern "C" fn(con: *mut root::PrintConsole)>,
        pub flushAndSwap:
            ::core::option::Option<unsafe extern "C" fn(con: *mut root::PrintConsole)>,
    }
    #[doc = " A font struct for the console."]
    #[repr(C)]
    pub struct ConsoleFont {
        #[doc = "< A pointer to the font graphics"]
        pub gfx: *const libc::c_void,
        #[doc = "< Offset to the first valid character in the font table"]
        pub asciiOffset: u16,
        #[doc = "< Number of characters in the font graphics"]
        pub numChars: u16,
        pub tileWidth: u16,
        pub tileHeight: u16,
    }
    #[doc = " @brief Console structure used to store the state of a console render context."]
    #[doc = ""]
    #[doc = " Default values from consoleGetDefault();"]
    #[doc = " @code"]
    #[doc = " PrintConsole defaultConsole ="]
    #[doc = " {"]
    #[doc = " \t//Font:"]
    #[doc = " \t{"]
    #[doc = " \t\tdefault_font_bin, //font gfx"]
    #[doc = " \t\t0, //first ascii character in the set"]
    #[doc = " \t\t256, //number of characters in the font set"]
    #[doc = " \t\t16, //tile width"]
    #[doc = " \t\t16, //tile height"]
    #[doc = "\t},"]
    #[doc = "\tNULL, //renderer"]
    #[doc = "\t0,0, //cursorX cursorY"]
    #[doc = "\t0,0, //prevcursorX prevcursorY"]
    #[doc = "\t80, //console width"]
    #[doc = "\t45, //console height"]
    #[doc = "\t0,  //window x"]
    #[doc = "\t0,  //window y"]
    #[doc = "\t80, //window width"]
    #[doc = "\t45, //window height"]
    #[doc = "\t3, //tab size"]
    #[doc = "\t7, // foreground color"]
    #[doc = "\t0, // background color"]
    #[doc = "\t0, // flags"]
    #[doc = "\tfalse //console initialized"]
    #[doc = " };"]
    #[doc = " @endcode"]
    #[repr(C)]
    pub struct PrintConsole {
        #[doc = "< Font of the console"]
        pub font: root::ConsoleFont,
        #[doc = "< Renderer of the console"]
        pub renderer: *mut root::ConsoleRenderer,
        #[doc = "< Current X location of the cursor (as a tile offset by default)"]
        pub cursorX: libc::c_int,
        #[doc = "< Current Y location of the cursor (as a tile offset by default)"]
        pub cursorY: libc::c_int,
        #[doc = "< Internal state"]
        pub prevCursorX: libc::c_int,
        #[doc = "< Internal state"]
        pub prevCursorY: libc::c_int,
        #[doc = "< Width of the console hardware layer in characters"]
        pub consoleWidth: libc::c_int,
        #[doc = "< Height of the console hardware layer in characters"]
        pub consoleHeight: libc::c_int,
        #[doc = "< Window X location in characters"]
        pub windowX: libc::c_int,
        #[doc = "< Window Y location in characters"]
        pub windowY: libc::c_int,
        #[doc = "< Window width in characters"]
        pub windowWidth: libc::c_int,
        #[doc = "< Window height in characters"]
        pub windowHeight: libc::c_int,
        #[doc = "< Size of a tab"]
        pub tabSize: libc::c_int,
        #[doc = "< Foreground color"]
        pub fg: libc::c_int,
        #[doc = "< Background color"]
        pub bg: libc::c_int,
        #[doc = "< Reverse/bright flags"]
        pub flags: libc::c_int,
        #[doc = "< True if the console is initialized"]
        pub consoleInitialised: bool,
    }
    #[doc = "< Swallows prints to stderr"]
    pub const debugDevice_debugDevice_NULL: root::debugDevice = 0;
    #[doc = "< Outputs stderr debug statements using svcOutputDebugString, which can then be captured by interactive debuggers"]
    pub const debugDevice_debugDevice_SVC: root::debugDevice = 1;
    #[doc = "< Directs stderr debug statements to Switch console window"]
    pub const debugDevice_debugDevice_CONSOLE: root::debugDevice = 2;
    pub const debugDevice_debugDevice_3DMOO: root::debugDevice = 1;
    #[doc = " Console debug devices supported by libnx."]
    pub type debugDevice = u32;
    extern "C" {
        #[doc = " @brief Loads the font into the console."]
        #[doc = " @param console Pointer to the console to update, if NULL it will update the current console."]
        #[doc = " @param font The font to load."]
        pub fn consoleSetFont(console: *mut root::PrintConsole, font: *mut root::ConsoleFont);
    }
    extern "C" {
        #[doc = " @brief Sets the print window."]
        #[doc = " @param console Console to set, if NULL it will set the current console window."]
        #[doc = " @param x X location of the window."]
        #[doc = " @param y Y location of the window."]
        #[doc = " @param width Width of the window."]
        #[doc = " @param height Height of the window."]
        pub fn consoleSetWindow(
            console: *mut root::PrintConsole,
            x: libc::c_int,
            y: libc::c_int,
            width: libc::c_int,
            height: libc::c_int,
        );
    }
    extern "C" {
        #[doc = " @brief Gets a pointer to the console with the default values."]
        #[doc = " This should only be used when using a single console or without changing the console that is returned, otherwise use consoleInit()."]
        #[doc = " @return A pointer to the console with the default values."]
        pub fn consoleGetDefault() -> *mut root::PrintConsole;
    }
    extern "C" {
        #[doc = " @brief Make the specified console the render target."]
        #[doc = " @param console A pointer to the console struct (must have been initialized with consoleInit(PrintConsole* console))."]
        #[doc = " @return A pointer to the previous console."]
        pub fn consoleSelect(console: *mut root::PrintConsole) -> *mut root::PrintConsole;
    }
    extern "C" {
        #[doc = " @brief Initialise the console."]
        #[doc = " @param console A pointer to the console data to initialize (if it's NULL, the default console will be used)."]
        #[doc = " @return A pointer to the current console."]
        pub fn consoleInit(console: *mut root::PrintConsole) -> *mut root::PrintConsole;
    }
    extern "C" {
        #[doc = " @brief Deinitialise the console."]
        #[doc = " @param console A pointer to the console data to initialize (if it's NULL, the default console will be used)."]
        pub fn consoleExit(console: *mut root::PrintConsole);
    }
    extern "C" {
        #[doc = " @brief Updates the console, submitting a new frame to the display."]
        #[doc = " @param console A pointer to the console data to initialize (if it's NULL, the default console will be used)."]
        #[doc = " @remark This function should be called periodically. Failure to call this function will result in lack of screen updating."]
        pub fn consoleUpdate(console: *mut root::PrintConsole);
    }
    extern "C" {
        #[doc = " @brief Initializes debug console output on stderr to the specified device."]
        #[doc = " @param device The debug device (or devices) to output debug print statements to."]
        pub fn consoleDebugInit(device: root::debugDevice);
    }
    extern "C" {
        #[doc = " Clears the screan by using printf(\"\\x1b[2J\");"]
        pub fn consoleClear();
    }
    #[doc = " Open directory struct"]
    #[repr(C)]
    pub struct fsdev_dir_t {
        #[doc = "< \"fsdv\""]
        pub magic: u32,
        #[doc = "< File descriptor"]
        pub fd: root::FsDir,
        #[doc = "< Current entry index"]
        pub index: root::ssize_t,
        #[doc = "< Current batch size"]
        pub size: root::size_t,
        #[doc = "< Temporary storage for reading entries"]
        pub entry_data: [root::FsDirectoryEntry; 32usize],
    }
    extern "C" {
        #[doc = " Initializes and mounts the sdmc device if accessible. Also initializes current working directory to point to the folder containing the path to the executable (argv[0]), if it is provided by the environment."]
        pub fn fsdevMountSdmc() -> root::Result;
    }
    extern "C" {
        #[doc = " Mounts the input fs with the specified device name. fsdev will handle closing the fs when required, including when fsdevMountDevice() fails."]
        #[doc = " Returns -1 when any errors occur."]
        pub fn fsdevMountDevice(name: *const libc::c_char, fs: root::FsFileSystem) -> libc::c_int;
    }
    extern "C" {
        #[doc = " Unmounts the specified device."]
        pub fn fsdevUnmountDevice(name: *const libc::c_char) -> libc::c_int;
    }
    extern "C" {
        #[doc = " Uses fsFsCommit() with the specified device. This must be used after any savedata-write operations(not just file-write). This should be used after each file-close where file-writing was done."]
        #[doc = " This is not used automatically at device unmount."]
        pub fn fsdevCommitDevice(name: *const libc::c_char) -> root::Result;
    }
    extern "C" {
        #[doc = " Returns the FsFileSystem for the specified device. Returns NULL when the specified device isn't found."]
        pub fn fsdevGetDeviceFileSystem(name: *const libc::c_char) -> *mut root::FsFileSystem;
    }
    extern "C" {
        #[doc = " Returns the FsFileSystem for the default device (SD card), if mounted. Used internally by romfs_dev."]
        pub fn fsdevGetDefaultFileSystem() -> *mut root::FsFileSystem;
    }
    extern "C" {
        #[doc = " Writes the FS-path to outpath (which has buffer size FS_MAX_PATH), for the input path (as used in stdio). The FsFileSystem is also written to device when not NULL."]
        pub fn fsdevTranslatePath(
            path: *const libc::c_char,
            device: *mut *mut root::FsFileSystem,
            outpath: *mut libc::c_char,
        ) -> libc::c_int;
    }
    extern "C" {
        #[doc = " This calls fsFsSetArchiveBit on the filesystem specified by the input path (as used in stdio)."]
        pub fn fsdevSetArchiveBit(path: *const libc::c_char) -> root::Result;
    }
    extern "C" {
        #[doc = " This calls fsFsCreateFile on the filesystem specified by the input path (as used in stdio)."]
        pub fn fsdevCreateFile(
            path: *const libc::c_char,
            size: root::size_t,
            flags: libc::c_int,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Recursively deletes the directory specified by the input path (as used in stdio)."]
        pub fn fsdevDeleteDirectoryRecursively(path: *const libc::c_char) -> root::Result;
    }
    extern "C" {
        #[doc = " Unmounts all devices and cleans up any resources used by the FS driver."]
        pub fn fsdevUnmountAll() -> root::Result;
    }
    extern "C" {
        #[doc = " Retrieves the last native result code generated during a failed fsdev operation."]
        pub fn fsdevGetLastResult() -> root::Result;
    }
    #[doc = " RomFS header."]
    #[repr(C)]
    pub struct romfs_header {
        #[doc = "< Size of the header."]
        pub headerSize: u64,
        #[doc = "< Offset of the directory hash table."]
        pub dirHashTableOff: u64,
        #[doc = "< Size of the directory hash table."]
        pub dirHashTableSize: u64,
        #[doc = "< Offset of the directory table."]
        pub dirTableOff: u64,
        #[doc = "< Size of the directory table."]
        pub dirTableSize: u64,
        #[doc = "< Offset of the file hash table."]
        pub fileHashTableOff: u64,
        #[doc = "< Size of the file hash table."]
        pub fileHashTableSize: u64,
        #[doc = "< Offset of the file table."]
        pub fileTableOff: u64,
        #[doc = "< Size of the file table."]
        pub fileTableSize: u64,
        #[doc = "< Offset of the file data."]
        pub fileDataOff: u64,
    }
    #[doc = " RomFS directory."]
    #[repr(C)]
    pub struct romfs_dir {
        #[doc = "< Offset of the parent directory."]
        pub parent: u32,
        #[doc = "< Offset of the next sibling directory."]
        pub sibling: u32,
        #[doc = "< Offset of the first child directory."]
        pub childDir: u32,
        #[doc = "< Offset of the first file."]
        pub childFile: u32,
        #[doc = "< Directory hash table pointer."]
        pub nextHash: u32,
        #[doc = "< Name length."]
        pub nameLen: u32,
        #[doc = "< Name. (UTF-8)"]
        pub name: root::__IncompleteArrayField<u8>,
    }
    #[doc = " RomFS file."]
    #[repr(C)]
    pub struct romfs_file {
        #[doc = "< Offset of the parent directory."]
        pub parent: u32,
        #[doc = "< Offset of the next sibling file."]
        pub sibling: u32,
        #[doc = "< Offset of the file's data."]
        pub dataOff: u64,
        #[doc = "< Length of the file's data."]
        pub dataSize: u64,
        #[doc = "< File hash table pointer."]
        pub nextHash: u32,
        #[doc = "< Name length."]
        pub nameLen: u32,
        #[doc = "< Name. (UTF-8)"]
        pub name: root::__IncompleteArrayField<u8>,
    }
    extern "C" {
        #[doc = " @brief Mounts the Application's RomFS."]
        #[doc = " @param name Device mount name."]
        pub fn romfsMount(name: *const libc::c_char) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Mounts RomFS from an open file."]
        #[doc = " @param file FsFile of the RomFS image."]
        #[doc = " @param offset Offset of the RomFS within the file."]
        #[doc = " @param name Device mount name."]
        pub fn romfsMountFromFile(
            file: root::FsFile,
            offset: u64,
            name: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Mounts RomFS from an open storage."]
        #[doc = " @param storage FsStorage of the RomFS image."]
        #[doc = " @param offset Offset of the RomFS within the storage."]
        #[doc = " @param name Device mount name."]
        pub fn romfsMountFromStorage(
            storage: root::FsStorage,
            offset: u64,
            name: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Mounts RomFS using the current process host title RomFS."]
        #[doc = " @param name Device mount name."]
        pub fn romfsMountFromCurrentProcess(name: *const libc::c_char) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Mounts RomFS from a file path in a mounted fsdev device."]
        #[doc = " @param path File path."]
        #[doc = " @param offset Offset of the RomFS within the file."]
        #[doc = " @param name Device mount name."]
        pub fn romfsMountFromFsdev(
            path: *const libc::c_char,
            offset: u64,
            name: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " @brief Mounts RomFS from a system data archive."]
        #[doc = " @param dataId Title ID of system data archive to mount."]
        #[doc = " @param storageId Storage ID to mount from."]
        #[doc = " @param name Device mount name."]
        pub fn romfsMountFromDataArchive(
            dataId: u64,
            storageId: root::FsStorageId,
            name: *const libc::c_char,
        ) -> root::Result;
    }
    extern "C" {
        #[doc = " Unmounts the RomFS device."]
        pub fn romfsUnmount(name: *const libc::c_char) -> root::Result;
    }
    #[doc = " Configuration structure for socketInitalize"]
    #[repr(C)]
    pub struct SocketInitConfig {
        #[doc = "< Observed 1 on 2.0 LibAppletWeb, 2 on 3.0."]
        pub bsdsockets_version: u32,
        #[doc = "< Size of the TCP transfer (send) buffer (initial or fixed)."]
        pub tcp_tx_buf_size: u32,
        #[doc = "< Size of the TCP recieve buffer (initial or fixed)."]
        pub tcp_rx_buf_size: u32,
        #[doc = "< Maximum size of the TCP transfer (send) buffer. If it is 0, the size of the buffer is fixed to its initial value."]
        pub tcp_tx_buf_max_size: u32,
        #[doc = "< Maximum size of the TCP receive buffer. If it is 0, the size of the buffer is fixed to its initial value."]
        pub tcp_rx_buf_max_size: u32,
        #[doc = "< Size of the UDP transfer (send) buffer (typically 0x2400 bytes)."]
        pub udp_tx_buf_size: u32,
        #[doc = "< Size of the UDP receive buffer (typically 0xA500 bytes)."]
        pub udp_rx_buf_size: u32,
        #[doc = "< Number of buffers for each socket (standard values range from 1 to 8)."]
        pub sb_efficiency: u32,
        #[doc = "< For getaddrinfo."]
        pub serialized_out_addrinfos_max_size: root::size_t,
        #[doc = "< For gethostbyname/gethostbyaddr."]
        pub serialized_out_hostent_max_size: root::size_t,
        #[doc = "< For name gethostbyname/getaddrinfo: bypass the Name Server Daemon."]
        pub bypass_nsd: bool,
        #[doc = "< For DNS requests: timeout or 0."]
        pub dns_timeout: libc::c_int,
    }
    extern "C" {
        #[doc = " Fetch the default configuration for the socket driver."]
        pub fn socketGetDefaultInitConfig() -> *const root::SocketInitConfig;
    }
    extern "C" {
        #[doc = " Initalize the socket driver."]
        pub fn socketInitialize(config: *const root::SocketInitConfig) -> root::Result;
    }
    extern "C" {
        #[doc = " Fetch the last bsd:u/s Switch result code (thread-local)."]
        pub fn socketGetLastBsdResult() -> root::Result;
    }
    extern "C" {
        #[doc = " Fetch the last sfdnsres Switch result code (thread-local)."]
        pub fn socketGetLastSfdnsresResult() -> root::Result;
    }
    extern "C" {
        #[doc = " Deinitialize the socket driver."]
        pub fn socketExit();
    }
    #[doc = " Context for AES-128 operations."]
    #[repr(C)]
    pub struct Aes128Context {
        pub round_keys: [[u8; 16usize]; 11usize],
    }
    #[doc = " Context for AES-192 operations."]
    #[repr(C)]
    pub struct Aes192Context {
        pub round_keys: [[u8; 16usize]; 13usize],
    }
    #[doc = " Context for AES-256 operations."]
    #[repr(C)]
    pub struct Aes256Context {
        pub round_keys: [[u8; 16usize]; 15usize],
    }
    extern "C" {
        #[doc = " Initialize a 128-bit AES context."]
        pub fn aes128ContextCreate(
            out: *mut root::Aes128Context,
            key: *const libc::c_void,
            is_encryptor: bool,
        );
    }
    extern "C" {
        #[doc = " Encrypt using an AES context (Requires is_encryptor when initializing)"]
        pub fn aes128EncryptBlock(
            ctx: *const root::Aes128Context,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
        );
    }
    extern "C" {
        #[doc = " Decrypt using an AES context (Requires !is_encryptor when initializing)"]
        pub fn aes128DecryptBlock(
            ctx: *const root::Aes128Context,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
        );
    }
    extern "C" {
        #[doc = " Initialize a 192-bit AES context."]
        pub fn aes192ContextCreate(
            out: *mut root::Aes192Context,
            key: *const libc::c_void,
            is_encryptor: bool,
        );
    }
    extern "C" {
        #[doc = " Encrypt using an AES context (Requires is_encryptor when initializing)"]
        pub fn aes192EncryptBlock(
            ctx: *const root::Aes192Context,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
        );
    }
    extern "C" {
        #[doc = " Decrypt using an AES context (Requires !is_encryptor when initializing)"]
        pub fn aes192DecryptBlock(
            ctx: *const root::Aes192Context,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
        );
    }
    extern "C" {
        #[doc = " Initialize a 256-bit AES context."]
        pub fn aes256ContextCreate(
            out: *mut root::Aes256Context,
            key: *const libc::c_void,
            is_encryptor: bool,
        );
    }
    extern "C" {
        #[doc = " Encrypt using an AES context (Requires is_encryptor when initializing)"]
        pub fn aes256EncryptBlock(
            ctx: *const root::Aes256Context,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
        );
    }
    extern "C" {
        #[doc = " Decrypt using an AES context (Requires !is_encryptor when initializing)"]
        pub fn aes256DecryptBlock(
            ctx: *const root::Aes256Context,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
        );
    }
    #[doc = " Context for AES-128 CBC."]
    #[repr(C)]
    pub struct Aes128CbcContext {
        pub aes_ctx: root::Aes128Context,
        pub iv: [u8; 16usize],
        pub buffer: [u8; 16usize],
        pub num_buffered: root::size_t,
    }
    #[doc = " Context for AES-192 CBC."]
    #[repr(C)]
    pub struct Aes192CbcContext {
        pub aes_ctx: root::Aes192Context,
        pub iv: [u8; 16usize],
        pub buffer: [u8; 16usize],
        pub num_buffered: root::size_t,
    }
    #[doc = " Context for AES-256 CBC."]
    #[repr(C)]
    pub struct Aes256CbcContext {
        pub aes_ctx: root::Aes256Context,
        pub iv: [u8; 16usize],
        pub buffer: [u8; 16usize],
        pub num_buffered: root::size_t,
    }
    extern "C" {
        #[doc = " 128-bit CBC API."]
        pub fn aes128CbcContextCreate(
            out: *mut root::Aes128CbcContext,
            key: *const libc::c_void,
            iv: *const libc::c_void,
            is_encryptor: bool,
        );
    }
    extern "C" {
        pub fn aes128CbcContextResetIv(ctx: *mut root::Aes128CbcContext, iv: *const libc::c_void);
    }
    extern "C" {
        pub fn aes128CbcEncrypt(
            ctx: *mut root::Aes128CbcContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn aes128CbcDecrypt(
            ctx: *mut root::Aes128CbcContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        #[doc = " 192-bit CBC API."]
        pub fn aes192CbcContextCreate(
            out: *mut root::Aes192CbcContext,
            key: *const libc::c_void,
            iv: *const libc::c_void,
            is_encryptor: bool,
        );
    }
    extern "C" {
        pub fn aes192CbcContextResetIv(ctx: *mut root::Aes192CbcContext, iv: *const libc::c_void);
    }
    extern "C" {
        pub fn aes192CbcEncrypt(
            ctx: *mut root::Aes192CbcContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn aes192CbcDecrypt(
            ctx: *mut root::Aes192CbcContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        #[doc = " 256-bit CBC API."]
        pub fn aes256CbcContextCreate(
            out: *mut root::Aes256CbcContext,
            key: *const libc::c_void,
            iv: *const libc::c_void,
            is_encryptor: bool,
        );
    }
    extern "C" {
        pub fn aes256CbcContextResetIv(ctx: *mut root::Aes256CbcContext, iv: *const libc::c_void);
    }
    extern "C" {
        pub fn aes256CbcEncrypt(
            ctx: *mut root::Aes256CbcContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn aes256CbcDecrypt(
            ctx: *mut root::Aes256CbcContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    #[doc = " Context for AES-128 CTR."]
    #[repr(C)]
    pub struct Aes128CtrContext {
        pub aes_ctx: root::Aes128Context,
        pub ctr: [u8; 16usize],
        pub enc_ctr_buffer: [u8; 16usize],
        pub buffer_offset: root::size_t,
    }
    #[doc = " Context for AES-192 CTR."]
    #[repr(C)]
    pub struct Aes192CtrContext {
        pub aes_ctx: root::Aes192Context,
        pub ctr: [u8; 16usize],
        pub enc_ctr_buffer: [u8; 16usize],
        pub buffer_offset: root::size_t,
    }
    #[doc = " Context for AES-256 CTR."]
    #[repr(C)]
    pub struct Aes256CtrContext {
        pub aes_ctx: root::Aes256Context,
        pub ctr: [u8; 16usize],
        pub enc_ctr_buffer: [u8; 16usize],
        pub buffer_offset: root::size_t,
    }
    extern "C" {
        #[doc = " 128-bit CTR API."]
        pub fn aes128CtrContextCreate(
            out: *mut root::Aes128CtrContext,
            key: *const libc::c_void,
            ctr: *const libc::c_void,
        );
    }
    extern "C" {
        pub fn aes128CtrContextResetCtr(ctx: *mut root::Aes128CtrContext, ctr: *const libc::c_void);
    }
    extern "C" {
        pub fn aes128CtrCrypt(
            ctx: *mut root::Aes128CtrContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " 192-bit CTR API."]
        pub fn aes192CtrContextCreate(
            out: *mut root::Aes192CtrContext,
            key: *const libc::c_void,
            ctr: *const libc::c_void,
        );
    }
    extern "C" {
        pub fn aes192CtrContextResetCtr(ctx: *mut root::Aes192CtrContext, ctr: *const libc::c_void);
    }
    extern "C" {
        pub fn aes192CtrCrypt(
            ctx: *mut root::Aes192CtrContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " 256-bit CTR API."]
        pub fn aes256CtrContextCreate(
            out: *mut root::Aes256CtrContext,
            key: *const libc::c_void,
            ctr: *const libc::c_void,
        );
    }
    extern "C" {
        pub fn aes256CtrContextResetCtr(ctx: *mut root::Aes256CtrContext, ctr: *const libc::c_void);
    }
    extern "C" {
        pub fn aes256CtrCrypt(
            ctx: *mut root::Aes256CtrContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    #[doc = " Context for AES-128 XTS."]
    #[repr(C)]
    pub struct Aes128XtsContext {
        pub aes_ctx: root::Aes128Context,
        pub tweak_ctx: root::Aes128Context,
        pub tweak: [u8; 16usize],
        pub buffer: [u8; 16usize],
        pub num_buffered: root::size_t,
    }
    #[doc = " Context for AES-192 XTS."]
    #[repr(C)]
    pub struct Aes192XtsContext {
        pub aes_ctx: root::Aes192Context,
        pub tweak_ctx: root::Aes192Context,
        pub tweak: [u8; 16usize],
        pub buffer: [u8; 16usize],
        pub num_buffered: root::size_t,
    }
    #[doc = " Context for AES-256 XTS."]
    #[repr(C)]
    pub struct Aes256XtsContext {
        pub aes_ctx: root::Aes256Context,
        pub tweak_ctx: root::Aes256Context,
        pub tweak: [u8; 16usize],
        pub buffer: [u8; 16usize],
        pub num_buffered: root::size_t,
    }
    extern "C" {
        #[doc = " 128-bit XTS API."]
        pub fn aes128XtsContextCreate(
            out: *mut root::Aes128XtsContext,
            key0: *const libc::c_void,
            key1: *const libc::c_void,
            is_encryptor: bool,
        );
    }
    extern "C" {
        pub fn aes128XtsContextResetTweak(
            ctx: *mut root::Aes128XtsContext,
            tweak: *const libc::c_void,
        );
    }
    extern "C" {
        pub fn aes128XtsContextResetSector(
            ctx: *mut root::Aes128XtsContext,
            sector: u64,
            is_nintendo: bool,
        );
    }
    extern "C" {
        pub fn aes128XtsEncrypt(
            ctx: *mut root::Aes128XtsContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn aes128XtsDecrypt(
            ctx: *mut root::Aes128XtsContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        #[doc = " 192-bit XTS API."]
        pub fn aes192XtsContextCreate(
            out: *mut root::Aes192XtsContext,
            key0: *const libc::c_void,
            key1: *const libc::c_void,
            is_encryptor: bool,
        );
    }
    extern "C" {
        pub fn aes192XtsContextResetTweak(
            ctx: *mut root::Aes192XtsContext,
            tweak: *const libc::c_void,
        );
    }
    extern "C" {
        pub fn aes192XtsContextResetSector(
            ctx: *mut root::Aes192XtsContext,
            sector: u64,
            is_nintendo: bool,
        );
    }
    extern "C" {
        pub fn aes192XtsEncrypt(
            ctx: *mut root::Aes192XtsContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn aes192XtsDecrypt(
            ctx: *mut root::Aes192XtsContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        #[doc = " 256-bit XTS API."]
        pub fn aes256XtsContextCreate(
            out: *mut root::Aes256XtsContext,
            key0: *const libc::c_void,
            key1: *const libc::c_void,
            is_encryptor: bool,
        );
    }
    extern "C" {
        pub fn aes256XtsContextResetTweak(
            ctx: *mut root::Aes256XtsContext,
            tweak: *const libc::c_void,
        );
    }
    extern "C" {
        pub fn aes256XtsContextResetSector(
            ctx: *mut root::Aes256XtsContext,
            sector: u64,
            is_nintendo: bool,
        );
    }
    extern "C" {
        pub fn aes256XtsEncrypt(
            ctx: *mut root::Aes256XtsContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    extern "C" {
        pub fn aes256XtsDecrypt(
            ctx: *mut root::Aes256XtsContext,
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        ) -> root::size_t;
    }
    #[doc = " Context for AES-128 CMAC."]
    #[repr(C)]
    pub struct Aes128CmacContext {
        pub ctx: root::Aes128Context,
        pub subkey: [u8; 16usize],
        pub mac: [u8; 16usize],
        pub buffer: [u8; 16usize],
        pub num_buffered: root::size_t,
        pub finalized: bool,
    }
    #[doc = " Context for AES-192 CMAC."]
    #[repr(C)]
    pub struct Aes192CmacContext {
        pub ctx: root::Aes192Context,
        pub subkey: [u8; 16usize],
        pub mac: [u8; 16usize],
        pub buffer: [u8; 16usize],
        pub num_buffered: root::size_t,
        pub finalized: bool,
    }
    #[doc = " Context for AES-256 CMAC."]
    #[repr(C)]
    pub struct Aes256CmacContext {
        pub ctx: root::Aes256Context,
        pub subkey: [u8; 16usize],
        pub mac: [u8; 16usize],
        pub buffer: [u8; 16usize],
        pub num_buffered: root::size_t,
        pub finalized: bool,
    }
    extern "C" {
        #[doc = " Initialize an AES-128-CMAC context."]
        pub fn cmacAes128ContextCreate(out: *mut root::Aes128CmacContext, key: *const libc::c_void);
    }
    extern "C" {
        #[doc = " Updates AES-128-CMAC context with data to hash"]
        pub fn cmacAes128ContextUpdate(
            ctx: *mut root::Aes128CmacContext,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Gets the context's output mac, finalizes the context."]
        pub fn cmacAes128ContextGetMac(ctx: *mut root::Aes128CmacContext, dst: *mut libc::c_void);
    }
    extern "C" {
        #[doc = " Simple all-in-one AES-128-CMAC calculator."]
        pub fn cmacAes128CalculateMac(
            dst: *mut libc::c_void,
            key: *const libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Initialize an AES-192-CMAC context."]
        pub fn cmacAes192ContextCreate(out: *mut root::Aes192CmacContext, key: *const libc::c_void);
    }
    extern "C" {
        #[doc = " Updates AES-192-CMAC context with data to hash"]
        pub fn cmacAes192ContextUpdate(
            ctx: *mut root::Aes192CmacContext,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Gets the context's output mac, finalizes the context."]
        pub fn cmacAes192ContextGetMac(ctx: *mut root::Aes192CmacContext, dst: *mut libc::c_void);
    }
    extern "C" {
        #[doc = " Simple all-in-one AES-192-CMAC calculator."]
        pub fn cmacAes192CalculateMac(
            dst: *mut libc::c_void,
            key: *const libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Initialize an AES-256-CMAC context."]
        pub fn cmacAes256ContextCreate(out: *mut root::Aes256CmacContext, key: *const libc::c_void);
    }
    extern "C" {
        #[doc = " Updates AES-256-CMAC context with data to hash"]
        pub fn cmacAes256ContextUpdate(
            ctx: *mut root::Aes256CmacContext,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Gets the context's output mac, finalizes the context."]
        pub fn cmacAes256ContextGetMac(ctx: *mut root::Aes256CmacContext, dst: *mut libc::c_void);
    }
    extern "C" {
        #[doc = " Simple all-in-one AES-256-CMAC calculator."]
        pub fn cmacAes256CalculateMac(
            dst: *mut libc::c_void,
            key: *const libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    #[doc = " Context for SHA256 operations."]
    #[repr(C)]
    pub struct Sha256Context {
        pub intermediate_hash: [u32; 8usize],
        pub buffer: [u8; 64usize],
        pub bits_consumed: u64,
        pub num_buffered: root::size_t,
        pub finalized: bool,
    }
    extern "C" {
        #[doc = " Initialize a SHA256 context."]
        pub fn sha256ContextCreate(out: *mut root::Sha256Context);
    }
    extern "C" {
        #[doc = " Updates SHA256 context with data to hash"]
        pub fn sha256ContextUpdate(
            ctx: *mut root::Sha256Context,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Gets the context's output hash, finalizes the context."]
        pub fn sha256ContextGetHash(ctx: *mut root::Sha256Context, dst: *mut libc::c_void);
    }
    extern "C" {
        #[doc = " Simple all-in-one SHA256 calculator."]
        pub fn sha256CalculateHash(
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    #[doc = " Context for SHA1 operations."]
    #[repr(C)]
    pub struct Sha1Context {
        pub intermediate_hash: [u32; 5usize],
        pub buffer: [u8; 64usize],
        pub bits_consumed: u64,
        pub num_buffered: root::size_t,
        pub finalized: bool,
    }
    extern "C" {
        #[doc = " Initialize a SHA1 context."]
        pub fn sha1ContextCreate(out: *mut root::Sha1Context);
    }
    extern "C" {
        #[doc = " Updates SHA1 context with data to hash"]
        pub fn sha1ContextUpdate(
            ctx: *mut root::Sha1Context,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Gets the context's output hash, finalizes the context."]
        pub fn sha1ContextGetHash(ctx: *mut root::Sha1Context, dst: *mut libc::c_void);
    }
    extern "C" {
        #[doc = " Simple all-in-one SHA1 calculator."]
        pub fn sha1CalculateHash(
            dst: *mut libc::c_void,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    #[doc = " Context for HMAC-SHA1 operations."]
    #[repr(C)]
    pub struct HmacSha1Context {
        pub sha_ctx: root::Sha1Context,
        pub key: [u32; 16usize],
        pub mac: [u32; 5usize],
        pub finalized: bool,
    }
    #[doc = " Context for HMAC-SHA256 operations."]
    #[repr(C)]
    pub struct HmacSha256Context {
        pub sha_ctx: root::Sha256Context,
        pub key: [u32; 16usize],
        pub mac: [u32; 8usize],
        pub finalized: bool,
    }
    extern "C" {
        #[doc = " Initialize a HMAC-SHA256 context."]
        pub fn hmacSha256ContextCreate(
            out: *mut root::HmacSha256Context,
            key: *const libc::c_void,
            key_size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Updates HMAC-SHA256 context with data to hash"]
        pub fn hmacSha256ContextUpdate(
            ctx: *mut root::HmacSha256Context,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Gets the context's output mac, finalizes the context."]
        pub fn hmacSha256ContextGetMac(ctx: *mut root::HmacSha256Context, dst: *mut libc::c_void);
    }
    extern "C" {
        #[doc = " Simple all-in-one HMAC-SHA256 calculator."]
        pub fn hmacSha256CalculateMac(
            dst: *mut libc::c_void,
            key: *const libc::c_void,
            key_size: root::size_t,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Initialize a HMAC-SHA1 context."]
        pub fn hmacSha1ContextCreate(
            out: *mut root::HmacSha1Context,
            key: *const libc::c_void,
            key_size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Updates HMAC-SHA1 context with data to hash"]
        pub fn hmacSha1ContextUpdate(
            ctx: *mut root::HmacSha1Context,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    extern "C" {
        #[doc = " Gets the context's output mac, finalizes the context."]
        pub fn hmacSha1ContextGetMac(ctx: *mut root::HmacSha1Context, dst: *mut libc::c_void);
    }
    extern "C" {
        #[doc = " Simple all-in-one HMAC-SHA1 calculator."]
        pub fn hmacSha1CalculateMac(
            dst: *mut libc::c_void,
            key: *const libc::c_void,
            key_size: root::size_t,
            src: *const libc::c_void,
            size: root::size_t,
        );
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Vector2f {
        pub x: f32,
        pub y: f32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Vector3f {
        pub x: f32,
        pub y: f32,
        pub z: f32,
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct Vector4f {
        pub x: f32,
        pub y: f32,
        pub z: f32,
        pub w: f32,
    }
    pub mod lib {
        #[allow(unused_imports)]
        use self::super::super::root;
        extern "C" {
            #[link_name = "\u{1}_ZN3lib18lua_bind_get_valueIiEEbmRT_"]
            pub fn lua_bind_get_value(arg1: u64, arg2: *mut libc::c_int) -> bool;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib9lua_constEPKc"]
            pub fn lua_const(str: *const libc::c_char) -> libc::c_int;
        }
        pub const L2CVarType_L2C_void: root::lib::L2CVarType = 0;
        pub const L2CVarType_L2C_bool: root::lib::L2CVarType = 1;
        pub const L2CVarType_L2C_integer: root::lib::L2CVarType = 2;
        pub const L2CVarType_L2C_number: root::lib::L2CVarType = 3;
        pub const L2CVarType_L2C_pointer: root::lib::L2CVarType = 4;
        pub const L2CVarType_L2C_table: root::lib::L2CVarType = 5;
        pub const L2CVarType_L2C_inner_function: root::lib::L2CVarType = 6;
        pub const L2CVarType_L2C_hash: root::lib::L2CVarType = 7;
        pub const L2CVarType_L2C_string: root::lib::L2CVarType = 8;
        pub type L2CVarType = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct L2CTable_meta {
            pub a: u64,
            pub b: u64,
            pub c: u64,
            pub d: u64,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct L2CTable {
            pub refcnt: u32,
            pub unk: u32,
            pub begin: u64,
            pub end: u64,
            pub also_end: u64,
            pub meta: root::lib::L2CTable_meta,
            pub unk_ptr: u64,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct L2CInnerFunctionBase {
            pub unk: u64,
            pub refcnt: u32,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub struct L2CValue {
            pub type_: u32,
            pub unk: u32,
            pub __bindgen_anon_1: root::lib::L2CValue__bindgen_ty_1,
        }
        #[repr(C)]
        #[derive(Copy, Clone)]
        pub union L2CValue__bindgen_ty_1 {
            pub raw: u64,
            pub raw_float: f32,
            pub raw_pointer: *mut libc::c_void,
            pub raw_table: *mut root::lib::L2CTable,
            pub raw_innerfunc: *mut root::lib::L2CInnerFunctionBase,
            _bindgen_union_align: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CValue13push_variadicEmPKcRNS_7utility8VariadicE"]
            pub fn L2CValue_push_variadic(
                this: *mut root::lib::L2CValue,
                arg1: u64,
                arg2: *const libc::c_char,
                arg3: *mut libc::c_void,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CValueC1Ev"]
            pub fn L2CValue_L2CValue(this: *mut root::lib::L2CValue);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CValueC1Eb"]
            pub fn L2CValue_L2CValue1(this: *mut root::lib::L2CValue, val: bool);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CValueC1Ei"]
            pub fn L2CValue_L2CValue2(this: *mut root::lib::L2CValue, val: libc::c_int);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CValueC1Em"]
            pub fn L2CValue_L2CValue3(this: *mut root::lib::L2CValue, val: u64);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CValueC1Ef"]
            pub fn L2CValue_L2CValue4(this: *mut root::lib::L2CValue, val: f32);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CValueC1Ed"]
            pub fn L2CValue_L2CValue5(this: *mut root::lib::L2CValue, val: f64);
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CValueC1EPKc"]
            pub fn L2CValue_L2CValue6(this: *mut root::lib::L2CValue, str: *const libc::c_char);
        }
        impl L2CValue {
            #[inline]
            pub unsafe fn push_variadic(
                &mut self,
                arg1: u64,
                arg2: *const libc::c_char,
                arg3: *mut libc::c_void,
            ) {
                L2CValue_push_variadic(self, arg1, arg2, arg3)
            }
            #[inline]
            pub unsafe fn new() -> Self {
                let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
                L2CValue_L2CValue(__bindgen_tmp.as_mut_ptr());
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new1(val: bool) -> Self {
                let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
                L2CValue_L2CValue1(__bindgen_tmp.as_mut_ptr(), val);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new2(val: libc::c_int) -> Self {
                let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
                L2CValue_L2CValue2(__bindgen_tmp.as_mut_ptr(), val);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new3(val: u64) -> Self {
                let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
                L2CValue_L2CValue3(__bindgen_tmp.as_mut_ptr(), val);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new4(val: f32) -> Self {
                let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
                L2CValue_L2CValue4(__bindgen_tmp.as_mut_ptr(), val);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new5(val: f64) -> Self {
                let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
                L2CValue_L2CValue5(__bindgen_tmp.as_mut_ptr(), val);
                __bindgen_tmp.assume_init()
            }
            #[inline]
            pub unsafe fn new6(str: *const libc::c_char) -> Self {
                let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
                L2CValue_L2CValue6(__bindgen_tmp.as_mut_ptr(), str);
                __bindgen_tmp.assume_init()
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct L2CAgent {
            pub vtable: u64,
            pub lua_state_agent: u64,
            pub unk10: u64,
            pub unk18: u64,
            pub unk20: u64,
            pub unk28: u64,
            pub unk30: u64,
            pub unk38: u64,
            pub lua_state_agentbase: u64,
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CAgentC2EP9lua_State"]
            pub fn L2CAgent_L2CAgent_constr(
                this: *mut root::lib::L2CAgent,
                lua_state: u64,
            ) -> *mut root::lib::L2CAgent;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CAgent14push_lua_stackERKNS_8L2CValueE"]
            pub fn L2CAgent_push_lua_stack(
                this: *mut root::lib::L2CAgent,
                l2c_value: *mut root::lib::L2CValue,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CAgent13pop_lua_stackEi"]
            pub fn L2CAgent_pop_lua_stack(
                this: *mut root::lib::L2CAgent,
                index: libc::c_int,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CAgent13get_lua_stackEiPNS_8L2CValueE"]
            pub fn L2CAgent_get_lua_stack(
                this: *mut root::lib::L2CAgent,
                index: libc::c_int,
                l2c_val: *mut root::lib::L2CValue,
            );
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CAgent20sv_set_function_hashEPvN3phx6Hash40E"]
            pub fn L2CAgent_sv_set_function_hash(
                this: *mut root::lib::L2CAgent,
                func: ::core::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut root::lib::L2CAgent,
                        arg2: *mut libc::c_void,
                    ) -> u64,
                >,
                hash: u64,
            ) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CAgent15clear_lua_stackEv"]
            pub fn L2CAgent_clear_lua_stack(this: *mut root::lib::L2CAgent) -> u64;
        }
        extern "C" {
            #[link_name = "\u{1}_ZN3lib8L2CAgent16_clear_lua_stackEv"]
            pub fn L2CAgent__clear_lua_stack(this: *mut root::lib::L2CAgent) -> u64;
        }
        impl L2CAgent {
            #[inline]
            pub unsafe fn L2CAgent_constr(
                &mut self,
                lua_state: u64,
            ) -> *mut root::lib::L2CAgent {
                L2CAgent_L2CAgent_constr(self, lua_state)
            }
            #[inline]
            pub unsafe fn push_lua_stack(
                &mut self,
                l2c_value: *mut root::lib::L2CValue,
            ) -> u64 {
                L2CAgent_push_lua_stack(self, l2c_value)
            }
            #[inline]
            pub unsafe fn pop_lua_stack(&mut self, index: libc::c_int) -> u64 {
                L2CAgent_pop_lua_stack(self, index)
            }
            #[inline]
            pub unsafe fn get_lua_stack(
                &mut self,
                index: libc::c_int,
                l2c_val: *mut root::lib::L2CValue,
            ) {
                L2CAgent_get_lua_stack(self, index, l2c_val)
            }
            #[inline]
            pub unsafe fn sv_set_function_hash(
                &mut self,
                func: ::core::option::Option<
                    unsafe extern "C" fn(
                        arg1: *mut root::lib::L2CAgent,
                        arg2: *mut libc::c_void,
                    ) -> u64,
                >,
                hash: u64,
            ) -> u64 {
                L2CAgent_sv_set_function_hash(self, func, hash)
            }
            #[inline]
            pub unsafe fn clear_lua_stack(&mut self) -> u64 {
                L2CAgent_clear_lua_stack(self)
            }
            #[inline]
            pub unsafe fn _clear_lua_stack(&mut self) -> u64 {
                L2CAgent__clear_lua_stack(self)
            }
        }
        pub mod utility {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub mod Variadic {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                extern "C" {
                    #[link_name = "\u{1}_ZNK3lib7utility8Variadic10get_formatEv"]
                    pub fn get_format(variadic: *mut libc::c_void) -> *const libc::c_char;
                }
            }
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Rect {
            pub _address: u8,
        }
    }
    pub mod phx {
        #[allow(unused_imports)]
        use self::super::super::root;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Vector2f {
            pub x: f32,
            pub y: f32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Vector3f {
            pub x: f32,
            pub y: f32,
            pub z: f32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Vector4f {
            pub x: f32,
            pub y: f32,
            pub z: f32,
            pub w: f32,
        }
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct Hash40 {
            pub hash: u64,
        }
    }
    pub type __uint128_t = u128;
    pub type __int128_t = i128;
    pub type __builtin_va_list = root::__va_list;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __va_list {
        pub __stack: *mut libc::c_void,
        pub __gr_top: *mut libc::c_void,
        pub __vr_top: *mut libc::c_void,
        pub __gr_offs: libc::c_int,
        pub __vr_offs: libc::c_int,
    }
}
